-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runWeight2Reg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    param_dout : IN STD_LOGIC_VECTOR (1183 downto 0);
    param_empty_n : IN STD_LOGIC;
    param_read : OUT STD_LOGIC;
    ko_1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    ko_1_empty_n : IN STD_LOGIC;
    ko_1_read : OUT STD_LOGIC;
    co_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    co_empty_n : IN STD_LOGIC;
    co_read : OUT STD_LOGIC;
    ro_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ro_empty_n : IN STD_LOGIC;
    ro_read : OUT STD_LOGIC;
    so_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    so_empty_n : IN STD_LOGIC;
    so_read : OUT STD_LOGIC;
    weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_0_ce0 : OUT STD_LOGIC;
    weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    param_out_din : OUT STD_LOGIC_VECTOR (1183 downto 0);
    param_out_full_n : IN STD_LOGIC;
    param_out_write : OUT STD_LOGIC;
    ko_1_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    ko_1_out_full_n : IN STD_LOGIC;
    ko_1_out_write : OUT STD_LOGIC;
    co_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    co_out_full_n : IN STD_LOGIC;
    co_out_write : OUT STD_LOGIC;
    ro_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ro_out_full_n : IN STD_LOGIC;
    ro_out_write : OUT STD_LOGIC;
    so_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    so_out_full_n : IN STD_LOGIC;
    so_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Conv_sysarr_runWeight2Reg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001011";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101011";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal param_blk_n : STD_LOGIC;
    signal ko_1_blk_n : STD_LOGIC;
    signal co_blk_n : STD_LOGIC;
    signal ro_blk_n : STD_LOGIC;
    signal so_blk_n : STD_LOGIC;
    signal param_out_blk_n : STD_LOGIC;
    signal ko_1_out_blk_n : STD_LOGIC;
    signal co_out_blk_n : STD_LOGIC;
    signal ro_out_blk_n : STD_LOGIC;
    signal so_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal empty_fu_387_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_reg_1531 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_fu_391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_1536 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast7_reg_1546 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast1_reg_1551 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_54_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_54_reg_1556 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul2_i_i_i_fu_509_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul2_i_i_i_reg_1561 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_1299_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul4_i_i_i_reg_1566 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln71_fu_522_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln71_reg_1574 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_55_fu_528_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_55_reg_1579 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln71_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal weight_l2_0_load_reg_1625 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln72_fu_652_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ci_reg_312 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln72_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ki_reg_323 : STD_LOGIC_VECTOR (2 downto 0);
    signal idxprom_i_i_i_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_regfile_3_316_i_016_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_316_i_3_fu_1155_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_658_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag_0_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_3_fu_999_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_0_fu_110 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_3_fu_1168_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_215_i_017_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_215_i_3_fu_1181_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_01_i_018_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_01_i_3_fu_1012_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag42_0_fu_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag42_3_fu_1194_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_114_i_019_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_114_i_3_fu_1207_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag3_0_fu_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag3_3_fu_1025_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_0_fu_134 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_3_fu_1220_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_013_i_020_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_013_i_3_fu_1233_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_12_i_021_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_12_i_3_fu_1038_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag36_0_fu_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag36_3_fu_1246_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_312_i_022_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_312_i_3_fu_687_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag6_0_fu_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag6_3_fu_1051_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_0_fu_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_3_fu_700_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_211_i_023_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_211_i_3_fu_713_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_23_i_024_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_23_i_3_fu_1064_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag30_0_fu_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag30_3_fu_726_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_110_i_025_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_110_i_3_fu_739_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag9_0_fu_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag9_3_fu_1077_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_0_fu_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_3_fu_752_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_09_i_026_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_09_i_3_fu_765_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_34_i_027_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_34_i_3_fu_1090_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag24_0_fu_194 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag24_3_fu_778_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_38_i_028_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_38_i_3_fu_843_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag12_0_fu_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag12_3_fu_856_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_0_fu_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_3_fu_869_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_27_i_029_fu_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_27_i_3_fu_882_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_05_i_030_fu_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_05_i_3_fu_895_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag18_0_fu_218 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag18_3_fu_908_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_16_i_031_fu_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_16_i_3_fu_921_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag15_0_fu_226 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag15_3_fu_934_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln409_fu_382_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ci_cast_i_i_i_cast_fu_532_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_536_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_536_p2 : signal is "no";
    signal grp_fu_1310_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal weight_regfile_1_16_i_fu_662_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_regfile_1_16_i_fu_662_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1305_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_1299_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component Conv_sysarr_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_mux_42_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sysarr_mul_mul_12s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    mux_42_8_1_1_U53 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_0_load_reg_1625,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => ap_const_lv8_0,
        din4 => weight_regfile_1_16_i_fu_662_p5,
        dout => weight_regfile_1_16_i_fu_662_p6);

    mux_42_8_1_1_U54 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_312_i_022_fu_150,
        din1 => weight_regfile_2_312_i_022_fu_150,
        din2 => weight_regfile_2_312_i_022_fu_150,
        din3 => weight_regfile_1_16_i_fu_662_p6,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_2_312_i_3_fu_687_p6);

    mux_42_1_1_1_U55 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag33_0_fu_158,
        din1 => write_flag33_0_fu_158,
        din2 => write_flag33_0_fu_158,
        din3 => ap_const_lv1_1,
        din4 => empty_55_reg_1579,
        dout => write_flag33_3_fu_700_p6);

    mux_42_8_1_1_U56 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_211_i_023_fu_162,
        din1 => weight_regfile_2_211_i_023_fu_162,
        din2 => weight_regfile_1_16_i_fu_662_p6,
        din3 => weight_regfile_2_211_i_023_fu_162,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_2_211_i_3_fu_713_p6);

    mux_42_1_1_1_U57 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag30_0_fu_170,
        din1 => write_flag30_0_fu_170,
        din2 => ap_const_lv1_1,
        din3 => write_flag30_0_fu_170,
        din4 => empty_55_reg_1579,
        dout => write_flag30_3_fu_726_p6);

    mux_42_8_1_1_U58 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_110_i_025_fu_174,
        din1 => weight_regfile_1_16_i_fu_662_p6,
        din2 => weight_regfile_2_110_i_025_fu_174,
        din3 => weight_regfile_2_110_i_025_fu_174,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_2_110_i_3_fu_739_p6);

    mux_42_1_1_1_U59 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag27_0_fu_182,
        din1 => ap_const_lv1_1,
        din2 => write_flag27_0_fu_182,
        din3 => write_flag27_0_fu_182,
        din4 => empty_55_reg_1579,
        dout => write_flag27_3_fu_752_p6);

    mux_42_8_1_1_U60 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_662_p6,
        din1 => weight_regfile_2_09_i_026_fu_186,
        din2 => weight_regfile_2_09_i_026_fu_186,
        din3 => weight_regfile_2_09_i_026_fu_186,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_2_09_i_3_fu_765_p6);

    mux_42_1_1_1_U61 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag24_0_fu_194,
        din2 => write_flag24_0_fu_194,
        din3 => write_flag24_0_fu_194,
        din4 => empty_55_reg_1579,
        dout => write_flag24_3_fu_778_p6);

    mux_42_8_1_1_U62 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_38_i_028_fu_198,
        din1 => weight_regfile_1_38_i_028_fu_198,
        din2 => weight_regfile_1_38_i_028_fu_198,
        din3 => weight_regfile_1_16_i_fu_662_p6,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_1_38_i_3_fu_843_p6);

    mux_42_1_1_1_U63 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag12_0_fu_202,
        din2 => write_flag12_0_fu_202,
        din3 => write_flag12_0_fu_202,
        din4 => empty_55_reg_1579,
        dout => write_flag12_3_fu_856_p6);

    mux_42_1_1_1_U64 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag21_0_fu_206,
        din1 => write_flag21_0_fu_206,
        din2 => write_flag21_0_fu_206,
        din3 => ap_const_lv1_1,
        din4 => empty_55_reg_1579,
        dout => write_flag21_3_fu_869_p6);

    mux_42_8_1_1_U65 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_27_i_029_fu_210,
        din1 => weight_regfile_1_27_i_029_fu_210,
        din2 => weight_regfile_1_16_i_fu_662_p6,
        din3 => weight_regfile_1_27_i_029_fu_210,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_1_27_i_3_fu_882_p6);

    mux_42_8_1_1_U66 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_662_p6,
        din1 => weight_regfile_1_05_i_030_fu_214,
        din2 => weight_regfile_1_05_i_030_fu_214,
        din3 => weight_regfile_1_05_i_030_fu_214,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_1_05_i_3_fu_895_p6);

    mux_42_1_1_1_U67 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag18_0_fu_218,
        din1 => write_flag18_0_fu_218,
        din2 => ap_const_lv1_1,
        din3 => write_flag18_0_fu_218,
        din4 => empty_55_reg_1579,
        dout => write_flag18_3_fu_908_p6);

    mux_42_8_1_1_U68 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_031_fu_222,
        din1 => weight_regfile_1_16_i_fu_662_p6,
        din2 => weight_regfile_1_16_i_031_fu_222,
        din3 => weight_regfile_1_16_i_031_fu_222,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_1_16_i_3_fu_921_p6);

    mux_42_1_1_1_U69 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag15_0_fu_226,
        din1 => ap_const_lv1_1,
        din2 => write_flag15_0_fu_226,
        din3 => write_flag15_0_fu_226,
        din4 => empty_55_reg_1579,
        dout => write_flag15_3_fu_934_p6);

    mux_42_1_1_1_U70 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_0_fu_106,
        din2 => write_flag_0_fu_106,
        din3 => write_flag_0_fu_106,
        din4 => empty_55_reg_1579,
        dout => write_flag_3_fu_999_p6);

    mux_42_8_1_1_U71 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_662_p6,
        din1 => weight_regfile_0_01_i_018_fu_118,
        din2 => weight_regfile_0_01_i_018_fu_118,
        din3 => weight_regfile_0_01_i_018_fu_118,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_0_01_i_3_fu_1012_p6);

    mux_42_1_1_1_U72 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag3_0_fu_130,
        din1 => ap_const_lv1_1,
        din2 => write_flag3_0_fu_130,
        din3 => write_flag3_0_fu_130,
        din4 => empty_55_reg_1579,
        dout => write_flag3_3_fu_1025_p6);

    mux_42_8_1_1_U73 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_12_i_021_fu_142,
        din1 => weight_regfile_1_16_i_fu_662_p6,
        din2 => weight_regfile_0_12_i_021_fu_142,
        din3 => weight_regfile_0_12_i_021_fu_142,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_0_12_i_3_fu_1038_p6);

    mux_42_1_1_1_U74 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag6_0_fu_154,
        din1 => write_flag6_0_fu_154,
        din2 => ap_const_lv1_1,
        din3 => write_flag6_0_fu_154,
        din4 => empty_55_reg_1579,
        dout => write_flag6_3_fu_1051_p6);

    mux_42_8_1_1_U75 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_23_i_024_fu_166,
        din1 => weight_regfile_0_23_i_024_fu_166,
        din2 => weight_regfile_1_16_i_fu_662_p6,
        din3 => weight_regfile_0_23_i_024_fu_166,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_0_23_i_3_fu_1064_p6);

    mux_42_1_1_1_U76 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag9_0_fu_178,
        din1 => write_flag9_0_fu_178,
        din2 => write_flag9_0_fu_178,
        din3 => ap_const_lv1_1,
        din4 => empty_55_reg_1579,
        dout => write_flag9_3_fu_1077_p6);

    mux_42_8_1_1_U77 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_34_i_027_fu_190,
        din1 => weight_regfile_0_34_i_027_fu_190,
        din2 => weight_regfile_0_34_i_027_fu_190,
        din3 => weight_regfile_1_16_i_fu_662_p6,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_0_34_i_3_fu_1090_p6);

    mux_42_8_1_1_U78 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_316_i_016_fu_102,
        din1 => weight_regfile_3_316_i_016_fu_102,
        din2 => weight_regfile_3_316_i_016_fu_102,
        din3 => weight_regfile_1_16_i_fu_662_p6,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_3_316_i_3_fu_1155_p6);

    mux_42_1_1_1_U79 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag45_0_fu_110,
        din1 => write_flag45_0_fu_110,
        din2 => write_flag45_0_fu_110,
        din3 => ap_const_lv1_1,
        din4 => empty_55_reg_1579,
        dout => write_flag45_3_fu_1168_p6);

    mux_42_8_1_1_U80 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_215_i_017_fu_114,
        din1 => weight_regfile_3_215_i_017_fu_114,
        din2 => weight_regfile_1_16_i_fu_662_p6,
        din3 => weight_regfile_3_215_i_017_fu_114,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_3_215_i_3_fu_1181_p6);

    mux_42_1_1_1_U81 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag42_0_fu_122,
        din1 => write_flag42_0_fu_122,
        din2 => ap_const_lv1_1,
        din3 => write_flag42_0_fu_122,
        din4 => empty_55_reg_1579,
        dout => write_flag42_3_fu_1194_p6);

    mux_42_8_1_1_U82 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_114_i_019_fu_126,
        din1 => weight_regfile_1_16_i_fu_662_p6,
        din2 => weight_regfile_3_114_i_019_fu_126,
        din3 => weight_regfile_3_114_i_019_fu_126,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_3_114_i_3_fu_1207_p6);

    mux_42_1_1_1_U83 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag39_0_fu_134,
        din1 => ap_const_lv1_1,
        din2 => write_flag39_0_fu_134,
        din3 => write_flag39_0_fu_134,
        din4 => empty_55_reg_1579,
        dout => write_flag39_3_fu_1220_p6);

    mux_42_8_1_1_U84 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_662_p6,
        din1 => weight_regfile_3_013_i_020_fu_138,
        din2 => weight_regfile_3_013_i_020_fu_138,
        din3 => weight_regfile_3_013_i_020_fu_138,
        din4 => empty_55_reg_1579,
        dout => weight_regfile_3_013_i_3_fu_1233_p6);

    mux_42_1_1_1_U85 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag36_0_fu_146,
        din2 => write_flag36_0_fu_146,
        din3 => write_flag36_0_fu_146,
        din4 => empty_55_reg_1579,
        dout => write_flag36_3_fu_1246_p6);

    mul_mul_12s_12s_12_4_1_U86 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ko_1_dout,
        din1 => grp_fu_1299_p1,
        ce => grp_fu_1299_ce,
        dout => grp_fu_1299_p2);

    mul_mul_12s_12s_12_4_1_U87 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_cast7_reg_1546,
        din1 => grp_fu_1305_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1305_p2);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U88 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_1531,
        din1 => grp_fu_1305_p2,
        din2 => p_cast1_reg_1551,
        din3 => empty_53_reg_1536,
        ce => ap_const_logic_1,
        dout => grp_fu_1310_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln71_fu_516_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_1))) then 
                ci_reg_312 <= add_ln71_reg_1574;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ci_reg_312 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ki_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                ki_reg_323 <= add_ln72_fu_652_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ki_reg_323 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    write_flag12_0_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag12_0_fu_202 <= write_flag12_3_fu_856_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag12_0_fu_202 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag15_0_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag15_0_fu_226 <= write_flag15_3_fu_934_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag15_0_fu_226 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag18_0_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag18_0_fu_218 <= write_flag18_3_fu_908_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag18_0_fu_218 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag21_0_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag21_0_fu_206 <= write_flag21_3_fu_869_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag21_0_fu_206 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag24_0_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag24_0_fu_194 <= write_flag24_3_fu_778_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag24_0_fu_194 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag27_0_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag27_0_fu_182 <= write_flag27_3_fu_752_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag27_0_fu_182 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag30_0_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag30_0_fu_170 <= write_flag30_3_fu_726_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag30_0_fu_170 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag33_0_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag33_0_fu_158 <= write_flag33_3_fu_700_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag33_0_fu_158 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag36_0_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag36_0_fu_146 <= write_flag36_3_fu_1246_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag36_0_fu_146 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag39_0_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag39_0_fu_134 <= write_flag39_3_fu_1220_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag39_0_fu_134 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag3_0_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag3_0_fu_130 <= write_flag3_3_fu_1025_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag3_0_fu_130 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag42_0_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag42_0_fu_122 <= write_flag42_3_fu_1194_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag42_0_fu_122 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag45_0_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag45_0_fu_110 <= write_flag45_3_fu_1168_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag45_0_fu_110 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag6_0_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag6_0_fu_154 <= write_flag6_3_fu_1051_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag6_0_fu_154 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag9_0_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag9_0_fu_178 <= write_flag9_3_fu_1077_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag9_0_fu_178 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_0_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then 
                write_flag_0_fu_106 <= write_flag_3_fu_999_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag_0_fu_106 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln71_reg_1574 <= add_ln71_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_53_reg_1536 <= empty_53_fu_391_p1;
                empty_54_reg_1556 <= empty_54_fu_425_p1;
                empty_reg_1531 <= empty_fu_387_p1;
                p_cast1_reg_1551 <= param_dout(587 downto 576);
                p_cast7_reg_1546 <= param_dout(555 downto 544);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln71_fu_516_p2 = ap_const_lv1_0))) then
                empty_55_reg_1579 <= empty_55_fu_528_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    mul2_i_i_i_reg_1561(11 downto 2) <= mul2_i_i_i_fu_509_p3(11 downto 2);
                mul4_i_i_i_reg_1566 <= grp_fu_1299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                weight_l2_0_load_reg_1625 <= weight_l2_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then
                weight_regfile_0_01_i_018_fu_118 <= weight_regfile_0_01_i_3_fu_1012_p6;
                weight_regfile_0_12_i_021_fu_142 <= weight_regfile_0_12_i_3_fu_1038_p6;
                weight_regfile_0_23_i_024_fu_166 <= weight_regfile_0_23_i_3_fu_1064_p6;
                weight_regfile_0_34_i_027_fu_190 <= weight_regfile_0_34_i_3_fu_1090_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then
                weight_regfile_1_05_i_030_fu_214 <= weight_regfile_1_05_i_3_fu_895_p6;
                weight_regfile_1_16_i_031_fu_222 <= weight_regfile_1_16_i_3_fu_921_p6;
                weight_regfile_1_27_i_029_fu_210 <= weight_regfile_1_27_i_3_fu_882_p6;
                weight_regfile_1_38_i_028_fu_198 <= weight_regfile_1_38_i_3_fu_843_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then
                weight_regfile_2_09_i_026_fu_186 <= weight_regfile_2_09_i_3_fu_765_p6;
                weight_regfile_2_110_i_025_fu_174 <= weight_regfile_2_110_i_3_fu_739_p6;
                weight_regfile_2_211_i_023_fu_162 <= weight_regfile_2_211_i_3_fu_713_p6;
                weight_regfile_2_312_i_022_fu_150 <= weight_regfile_2_312_i_3_fu_687_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln76_fu_658_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_0))) then
                weight_regfile_3_013_i_020_fu_138 <= weight_regfile_3_013_i_3_fu_1233_p6;
                weight_regfile_3_114_i_019_fu_126 <= weight_regfile_3_114_i_3_fu_1207_p6;
                weight_regfile_3_215_i_017_fu_114 <= weight_regfile_3_215_i_3_fu_1181_p6;
                weight_regfile_3_316_i_016_fu_102 <= weight_regfile_3_316_i_3_fu_1155_p6;
            end if;
        end if;
    end process;
    mul2_i_i_i_reg_1561(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n, ap_CS_fsm_state5, icmp_ln71_fu_516_p2, ap_CS_fsm_state13, icmp_ln72_fu_646_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln71_fu_516_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln72_fu_646_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln71_fu_522_p2 <= std_logic_vector(unsigned(ci_reg_312) + unsigned(ap_const_lv3_1));
    add_ln72_fu_652_p2 <= std_logic_vector(unsigned(ki_reg_323) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
                ap_block_state1 <= ((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, icmp_ln71_fu_516_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln71_fu_516_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln71_fu_516_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln71_fu_516_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= weight_regfile_0_01_i_018_fu_118;
    ap_return_1 <= weight_regfile_0_12_i_021_fu_142;
    ap_return_10 <= weight_regfile_2_211_i_023_fu_162;
    ap_return_11 <= weight_regfile_2_312_i_022_fu_150;
    ap_return_12 <= weight_regfile_3_013_i_020_fu_138;
    ap_return_13 <= weight_regfile_3_114_i_019_fu_126;
    ap_return_14 <= weight_regfile_3_215_i_017_fu_114;
    ap_return_15 <= weight_regfile_3_316_i_016_fu_102;
    ap_return_2 <= weight_regfile_0_23_i_024_fu_166;
    ap_return_3 <= weight_regfile_0_34_i_027_fu_190;
    ap_return_4 <= weight_regfile_1_05_i_030_fu_214;
    ap_return_5 <= weight_regfile_1_16_i_031_fu_222;
    ap_return_6 <= weight_regfile_1_27_i_029_fu_210;
    ap_return_7 <= weight_regfile_1_38_i_028_fu_198;
    ap_return_8 <= weight_regfile_2_09_i_026_fu_186;
    ap_return_9 <= weight_regfile_2_110_i_025_fu_174;
    ci_cast_i_i_i_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_55_fu_528_p1),12));

    co_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_blk_n <= co_empty_n;
        else 
            co_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    co_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_blk_n <= co_out_full_n;
        else 
            co_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    co_out_din <= co_dout;

    co_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_write <= ap_const_logic_1;
        else 
            co_out_write <= ap_const_logic_0;
        end if; 
    end process;


    co_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_read <= ap_const_logic_1;
        else 
            co_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_53_fu_391_p1 <= so_dout(12 - 1 downto 0);
    empty_54_fu_425_p1 <= co_dout(10 - 1 downto 0);
    empty_55_fu_528_p1 <= ci_reg_312(2 - 1 downto 0);
    empty_fu_387_p1 <= ro_dout(12 - 1 downto 0);

    grp_fu_1299_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_1299_ce <= ap_const_logic_1;
        else 
            grp_fu_1299_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1299_p1 <= param_dout(395 downto 384);
    grp_fu_1305_p1 <= std_logic_vector(unsigned(tmp_fu_536_p2) + unsigned(mul2_i_i_i_reg_1561));
    icmp_ln71_fu_516_p2 <= "1" when (ci_reg_312 = ap_const_lv3_4) else "0";
    icmp_ln72_fu_646_p2 <= "1" when (ki_reg_323 = ap_const_lv3_4) else "0";
    idxprom_i_i_i_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1310_p4),64));

    ko_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_blk_n <= ko_1_empty_n;
        else 
            ko_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_out_blk_n <= ko_1_out_full_n;
        else 
            ko_1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ko_1_out_din <= trunc_ln409_fu_382_p0(11 - 1 downto 0);

    ko_1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_out_write <= ap_const_logic_1;
        else 
            ko_1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ko_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_read <= ap_const_logic_1;
        else 
            ko_1_read <= ap_const_logic_0;
        end if; 
    end process;

    mul2_i_i_i_fu_509_p3 <= (empty_54_reg_1556 & ap_const_lv2_0);

    param_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_blk_n <= param_empty_n;
        else 
            param_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    param_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_out_blk_n <= param_out_full_n;
        else 
            param_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    param_out_din <= param_dout;

    param_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_out_write <= ap_const_logic_1;
        else 
            param_out_write <= ap_const_logic_0;
        end if; 
    end process;


    param_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_read <= ap_const_logic_1;
        else 
            param_read <= ap_const_logic_0;
        end if; 
    end process;


    ro_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_blk_n <= ro_empty_n;
        else 
            ro_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ro_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_blk_n <= ro_out_full_n;
        else 
            ro_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ro_out_din <= ro_dout;

    ro_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_write <= ap_const_logic_1;
        else 
            ro_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ro_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_read <= ap_const_logic_1;
        else 
            ro_read <= ap_const_logic_0;
        end if; 
    end process;


    so_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_blk_n <= so_empty_n;
        else 
            so_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    so_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_blk_n <= so_out_full_n;
        else 
            so_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    so_out_din <= so_dout;

    so_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_write <= ap_const_logic_1;
        else 
            so_out_write <= ap_const_logic_0;
        end if; 
    end process;


    so_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_read <= ap_const_logic_1;
        else 
            so_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_536_p2 <= std_logic_vector(signed(mul4_i_i_i_reg_1566) + signed(ci_cast_i_i_i_cast_fu_532_p1));
    trunc_ln409_fu_382_p0 <= ko_1_dout;
    trunc_ln76_fu_658_p1 <= ki_reg_323(2 - 1 downto 0);
    weight_l2_0_address0 <= idxprom_i_i_i_fu_642_p1(12 - 1 downto 0);

    weight_l2_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_0_ce0 <= ap_const_logic_1;
        else 
            weight_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_regfile_1_16_i_fu_662_p5 <= ki_reg_323(2 - 1 downto 0);
end behav;
