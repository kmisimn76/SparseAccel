-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runWeight2Reg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_L2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    C_L2_empty_n : IN STD_LOGIC;
    C_L2_read : OUT STD_LOGIC;
    R_L2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    R_L2_empty_n : IN STD_LOGIC;
    R_L2_read : OUT STD_LOGIC;
    S_L2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    S_L2_empty_n : IN STD_LOGIC;
    S_L2_read : OUT STD_LOGIC;
    ko_3_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    ko_3_empty_n : IN STD_LOGIC;
    ko_3_read : OUT STD_LOGIC;
    co_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    co_empty_n : IN STD_LOGIC;
    co_read : OUT STD_LOGIC;
    ro_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ro_empty_n : IN STD_LOGIC;
    ro_read : OUT STD_LOGIC;
    so_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    so_empty_n : IN STD_LOGIC;
    so_read : OUT STD_LOGIC;
    weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_0_ce0 : OUT STD_LOGIC;
    weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_1_ce0 : OUT STD_LOGIC;
    weight_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_2_ce0 : OUT STD_LOGIC;
    weight_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_3_ce0 : OUT STD_LOGIC;
    weight_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_4_ce0 : OUT STD_LOGIC;
    weight_l2_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_5_ce0 : OUT STD_LOGIC;
    weight_l2_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_6_ce0 : OUT STD_LOGIC;
    weight_l2_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_7_ce0 : OUT STD_LOGIC;
    weight_l2_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ko_3_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    ko_3_out_full_n : IN STD_LOGIC;
    ko_3_out_write : OUT STD_LOGIC;
    co_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    co_out_full_n : IN STD_LOGIC;
    co_out_write : OUT STD_LOGIC;
    ro_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ro_out_full_n : IN STD_LOGIC;
    ro_out_write : OUT STD_LOGIC;
    so_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    so_out_full_n : IN STD_LOGIC;
    so_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_49 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_50 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_51 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_52 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_53 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_54 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_55 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_56 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_57 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_58 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_59 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_60 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_61 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_62 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_63 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Conv_sysarr_runWeight2Reg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal C_L2_blk_n : STD_LOGIC;
    signal R_L2_blk_n : STD_LOGIC;
    signal S_L2_blk_n : STD_LOGIC;
    signal ko_3_blk_n : STD_LOGIC;
    signal co_blk_n : STD_LOGIC;
    signal ro_blk_n : STD_LOGIC;
    signal so_blk_n : STD_LOGIC;
    signal ko_3_out_blk_n : STD_LOGIC;
    signal co_out_blk_n : STD_LOGIC;
    signal ro_out_blk_n : STD_LOGIC;
    signal so_out_blk_n : STD_LOGIC;
    signal write_flag30_0_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_0_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_0_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag36_0_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_0_reg_321 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag24_0_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag42_0_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_0_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_0_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag48_0_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag51_0_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag18_0_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag54_0_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag57_0_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag15_0_reg_431 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag60_0_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag63_0_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag12_0_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag66_0_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag69_0_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag9_0_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag72_0_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag75_0_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag6_0_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag78_0_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag81_0_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag3_0_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag84_0_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag87_0_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_0_reg_596 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag90_0_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag126_0_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag123_0_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag129_0_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag132_0_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag120_0_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag135_0_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag138_0_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag117_0_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag141_0_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag144_0_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag114_0_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag147_0_reg_739 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag150_0_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag111_0_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag153_0_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag156_0_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag108_0_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag159_0_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag162_0_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag105_0_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag165_0_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag168_0_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag102_0_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag171_0_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag174_0_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag99_0_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag177_0_reg_904 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag180_0_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag96_0_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag183_0_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag186_0_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag93_0_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag189_0_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_reg_981 : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_regfile_1_110_i_0127_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_211_i_0126_reg_1004 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_312_i_0125_reg_1016 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_09_i_0124_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_413_i_0123_reg_1040 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_514_i_0122_reg_1052 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_78_i_0121_reg_1064 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_615_i_0120_reg_1076 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_716_i_0119_reg_1088 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_67_i_0118_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_017_i_0117_reg_1112 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_118_i_0116_reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_56_i_0115_reg_1136 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_219_i_0114_reg_1148 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_320_i_0113_reg_1160 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_45_i_0112_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_421_i_0111_reg_1184 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_522_i_0110_reg_1196 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_34_i_0109_reg_1208 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_623_i_0108_reg_1220 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_724_i_0107_reg_1232 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_23_i_0106_reg_1244 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_025_i_0105_reg_1256 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_126_i_0104_reg_1268 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_12_i_0103_reg_1280 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_227_i_0102_reg_1292 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_328_i_0101_reg_1304 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_01_i_0100_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_429_i_099_reg_1328 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_530_i_098_reg_1340 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_142_i_097_reg_1352 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_243_i_096_reg_1364 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_041_i_095_reg_1376 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_344_i_094_reg_1388 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_445_i_093_reg_1400 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_740_i_092_reg_1412 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_546_i_091_reg_1424 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_647_i_090_reg_1436 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_639_i_089_reg_1448 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_748_i_088_reg_1460 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_049_i_087_reg_1472 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_538_i_086_reg_1484 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_150_i_085_reg_1496 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_251_i_084_reg_1508 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_437_i_083_reg_1520 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_352_i_082_reg_1532 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_453_i_081_reg_1544 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_336_i_080_reg_1556 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_554_i_079_reg_1568 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_655_i_078_reg_1580 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_235_i_077_reg_1592 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_756_i_076_reg_1604 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_057_i_075_reg_1616 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_134_i_074_reg_1628 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_158_i_073_reg_1640 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_259_i_072_reg_1652 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_033_i_071_reg_1664 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_360_i_070_reg_1676 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_461_i_069_reg_1688 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_732_i_068_reg_1700 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_562_i_067_reg_1712 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_663_i_066_reg_1724 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_631_i_065_reg_1736 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_764_i_064_reg_1748 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal R_L2_read_reg_4985 : STD_LOGIC_VECTOR (11 downto 0);
    signal S_L2_read_reg_4990 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln861_fu_1765_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln861_reg_5000 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln863_fu_1769_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln863_reg_5005 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_1773_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_reg_5010 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul2_i_i_i_fu_1777_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul2_i_i_i_reg_5015 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_4961_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul4_i_i_i_reg_5020 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln36_fu_1784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_5025 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln36_reg_5025_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_5025_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_5025_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_5025_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_5025_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_5025_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_1790_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal empty_56_fu_1796_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_reg_5034 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_reg_5034_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_reg_5034_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_reg_5034_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_reg_5034_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_reg_5034_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_56_reg_5034_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal write_flag189_1_fu_1814_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag93_1_fu_1836_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag186_1_fu_1858_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag183_1_fu_1880_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag96_1_fu_1902_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag180_1_fu_1924_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag177_1_fu_1946_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag99_1_fu_1968_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag174_1_fu_1990_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag171_1_fu_2012_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag102_1_fu_2034_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag168_1_fu_2056_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag165_1_fu_2078_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag105_1_fu_2100_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag162_1_fu_2122_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag159_1_fu_2144_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag108_1_fu_2166_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag156_1_fu_2188_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag153_1_fu_2210_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag111_1_fu_2232_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag150_1_fu_2254_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag147_1_fu_2276_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag114_1_fu_2298_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag144_1_fu_2320_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag141_1_fu_2342_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag117_1_fu_2364_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag138_1_fu_2386_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag135_1_fu_2408_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag120_1_fu_2430_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag132_1_fu_2452_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag129_1_fu_2474_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag123_1_fu_2496_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag126_1_fu_2518_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag90_1_fu_2540_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_1_fu_2562_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag87_1_fu_2584_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag84_1_fu_2606_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag3_1_fu_2628_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag81_1_fu_2650_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag78_1_fu_2672_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag6_1_fu_2694_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag75_1_fu_2716_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag72_1_fu_2738_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag9_1_fu_2760_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag69_1_fu_2782_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag66_1_fu_2804_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag12_1_fu_2826_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag63_1_fu_2848_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag60_1_fu_2870_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag15_1_fu_2892_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag57_1_fu_2914_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag54_1_fu_2936_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag18_1_fu_2958_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag51_1_fu_2980_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag48_1_fu_3002_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_1_fu_3024_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_1_fu_3046_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag42_1_fu_3068_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag24_1_fu_3090_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_1_fu_3112_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag36_1_fu_3134_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_1_fu_3156_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_1_fu_3178_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag30_1_fu_3200_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_7_764_i_1_fu_3233_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal weight_regfile_3_631_i_1_fu_3254_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_663_i_1_fu_3275_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_562_i_1_fu_3296_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_732_i_1_fu_3317_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_461_i_1_fu_3338_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_360_i_1_fu_3359_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_033_i_1_fu_3380_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_259_i_1_fu_3401_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_158_i_1_fu_3422_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_134_i_1_fu_3443_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_7_057_i_1_fu_3464_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_756_i_1_fu_3485_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_235_i_1_fu_3506_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_655_i_1_fu_3527_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_554_i_1_fu_3548_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_336_i_1_fu_3569_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_453_i_1_fu_3590_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_352_i_1_fu_3611_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_437_i_1_fu_3632_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_251_i_1_fu_3653_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_150_i_1_fu_3674_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_538_i_1_fu_3695_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_6_049_i_1_fu_3716_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_748_i_1_fu_3737_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_639_i_1_fu_3758_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_647_i_1_fu_3779_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_546_i_1_fu_3800_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_4_740_i_1_fu_3821_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_445_i_1_fu_3842_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_344_i_1_fu_3863_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_041_i_1_fu_3884_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_243_i_1_fu_3905_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_5_142_i_1_fu_3926_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_530_i_1_fu_3947_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_429_i_1_fu_3968_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_01_i_1_fu_3989_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_328_i_1_fu_4010_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_227_i_1_fu_4031_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_12_i_1_fu_4052_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_126_i_1_fu_4073_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_025_i_1_fu_4094_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_23_i_1_fu_4115_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_724_i_1_fu_4136_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_623_i_1_fu_4157_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_34_i_1_fu_4178_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_522_i_1_fu_4199_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_421_i_1_fu_4220_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_45_i_1_fu_4241_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_320_i_1_fu_4262_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_219_i_1_fu_4283_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_56_i_1_fu_4304_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_118_i_1_fu_4325_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_017_i_1_fu_4346_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_67_i_1_fu_4367_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_716_i_1_fu_4388_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_615_i_1_fu_4409_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_78_i_1_fu_4430_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_514_i_1_fu_4451_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_413_i_1_fu_4472_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_09_i_1_fu_4493_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_312_i_1_fu_4514_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_211_i_1_fu_4535_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_110_i_1_fu_4556_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter6_state11 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom13_i_i_i_fu_3222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln855_fu_1760_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ci_cast_cast_i_i_i_fu_1800_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_1804_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_1804_p2 : signal is "no";
    signal grp_fu_4972_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_4967_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_4967_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_4961_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv_sysarr_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sysarr_mux_83_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_mul_mul_12s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    mux_83_1_1_1_U190 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag189_0_reg_970,
        din1 => write_flag189_0_reg_970,
        din2 => write_flag189_0_reg_970,
        din3 => write_flag189_0_reg_970,
        din4 => write_flag189_0_reg_970,
        din5 => write_flag189_0_reg_970,
        din6 => write_flag189_0_reg_970,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag189_1_fu_1814_p10);

    mux_83_1_1_1_U191 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag93_0_reg_959,
        din1 => write_flag93_0_reg_959,
        din2 => write_flag93_0_reg_959,
        din3 => write_flag93_0_reg_959,
        din4 => write_flag93_0_reg_959,
        din5 => write_flag93_0_reg_959,
        din6 => write_flag93_0_reg_959,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag93_1_fu_1836_p10);

    mux_83_1_1_1_U192 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag186_0_reg_948,
        din1 => write_flag186_0_reg_948,
        din2 => write_flag186_0_reg_948,
        din3 => write_flag186_0_reg_948,
        din4 => write_flag186_0_reg_948,
        din5 => write_flag186_0_reg_948,
        din6 => ap_const_lv1_1,
        din7 => write_flag186_0_reg_948,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag186_1_fu_1858_p10);

    mux_83_1_1_1_U193 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag183_0_reg_937,
        din1 => write_flag183_0_reg_937,
        din2 => write_flag183_0_reg_937,
        din3 => write_flag183_0_reg_937,
        din4 => write_flag183_0_reg_937,
        din5 => ap_const_lv1_1,
        din6 => write_flag183_0_reg_937,
        din7 => write_flag183_0_reg_937,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag183_1_fu_1880_p10);

    mux_83_1_1_1_U194 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag96_0_reg_926,
        din2 => write_flag96_0_reg_926,
        din3 => write_flag96_0_reg_926,
        din4 => write_flag96_0_reg_926,
        din5 => write_flag96_0_reg_926,
        din6 => write_flag96_0_reg_926,
        din7 => write_flag96_0_reg_926,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag96_1_fu_1902_p10);

    mux_83_1_1_1_U195 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag180_0_reg_915,
        din1 => write_flag180_0_reg_915,
        din2 => write_flag180_0_reg_915,
        din3 => write_flag180_0_reg_915,
        din4 => ap_const_lv1_1,
        din5 => write_flag180_0_reg_915,
        din6 => write_flag180_0_reg_915,
        din7 => write_flag180_0_reg_915,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag180_1_fu_1924_p10);

    mux_83_1_1_1_U196 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag177_0_reg_904,
        din1 => write_flag177_0_reg_904,
        din2 => write_flag177_0_reg_904,
        din3 => ap_const_lv1_1,
        din4 => write_flag177_0_reg_904,
        din5 => write_flag177_0_reg_904,
        din6 => write_flag177_0_reg_904,
        din7 => write_flag177_0_reg_904,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag177_1_fu_1946_p10);

    mux_83_1_1_1_U197 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag99_0_reg_893,
        din1 => ap_const_lv1_1,
        din2 => write_flag99_0_reg_893,
        din3 => write_flag99_0_reg_893,
        din4 => write_flag99_0_reg_893,
        din5 => write_flag99_0_reg_893,
        din6 => write_flag99_0_reg_893,
        din7 => write_flag99_0_reg_893,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag99_1_fu_1968_p10);

    mux_83_1_1_1_U198 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag174_0_reg_882,
        din1 => write_flag174_0_reg_882,
        din2 => ap_const_lv1_1,
        din3 => write_flag174_0_reg_882,
        din4 => write_flag174_0_reg_882,
        din5 => write_flag174_0_reg_882,
        din6 => write_flag174_0_reg_882,
        din7 => write_flag174_0_reg_882,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag174_1_fu_1990_p10);

    mux_83_1_1_1_U199 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag171_0_reg_871,
        din1 => ap_const_lv1_1,
        din2 => write_flag171_0_reg_871,
        din3 => write_flag171_0_reg_871,
        din4 => write_flag171_0_reg_871,
        din5 => write_flag171_0_reg_871,
        din6 => write_flag171_0_reg_871,
        din7 => write_flag171_0_reg_871,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag171_1_fu_2012_p10);

    mux_83_1_1_1_U200 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag102_0_reg_860,
        din1 => write_flag102_0_reg_860,
        din2 => ap_const_lv1_1,
        din3 => write_flag102_0_reg_860,
        din4 => write_flag102_0_reg_860,
        din5 => write_flag102_0_reg_860,
        din6 => write_flag102_0_reg_860,
        din7 => write_flag102_0_reg_860,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag102_1_fu_2034_p10);

    mux_83_1_1_1_U201 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag168_0_reg_849,
        din2 => write_flag168_0_reg_849,
        din3 => write_flag168_0_reg_849,
        din4 => write_flag168_0_reg_849,
        din5 => write_flag168_0_reg_849,
        din6 => write_flag168_0_reg_849,
        din7 => write_flag168_0_reg_849,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag168_1_fu_2056_p10);

    mux_83_1_1_1_U202 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag165_0_reg_838,
        din1 => write_flag165_0_reg_838,
        din2 => write_flag165_0_reg_838,
        din3 => write_flag165_0_reg_838,
        din4 => write_flag165_0_reg_838,
        din5 => write_flag165_0_reg_838,
        din6 => write_flag165_0_reg_838,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag165_1_fu_2078_p10);

    mux_83_1_1_1_U203 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag105_0_reg_827,
        din1 => write_flag105_0_reg_827,
        din2 => write_flag105_0_reg_827,
        din3 => ap_const_lv1_1,
        din4 => write_flag105_0_reg_827,
        din5 => write_flag105_0_reg_827,
        din6 => write_flag105_0_reg_827,
        din7 => write_flag105_0_reg_827,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag105_1_fu_2100_p10);

    mux_83_1_1_1_U204 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag162_0_reg_816,
        din1 => write_flag162_0_reg_816,
        din2 => write_flag162_0_reg_816,
        din3 => write_flag162_0_reg_816,
        din4 => write_flag162_0_reg_816,
        din5 => write_flag162_0_reg_816,
        din6 => ap_const_lv1_1,
        din7 => write_flag162_0_reg_816,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag162_1_fu_2122_p10);

    mux_83_1_1_1_U205 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag159_0_reg_805,
        din1 => write_flag159_0_reg_805,
        din2 => write_flag159_0_reg_805,
        din3 => write_flag159_0_reg_805,
        din4 => write_flag159_0_reg_805,
        din5 => ap_const_lv1_1,
        din6 => write_flag159_0_reg_805,
        din7 => write_flag159_0_reg_805,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag159_1_fu_2144_p10);

    mux_83_1_1_1_U206 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag108_0_reg_794,
        din1 => write_flag108_0_reg_794,
        din2 => write_flag108_0_reg_794,
        din3 => write_flag108_0_reg_794,
        din4 => ap_const_lv1_1,
        din5 => write_flag108_0_reg_794,
        din6 => write_flag108_0_reg_794,
        din7 => write_flag108_0_reg_794,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag108_1_fu_2166_p10);

    mux_83_1_1_1_U207 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag156_0_reg_783,
        din1 => write_flag156_0_reg_783,
        din2 => write_flag156_0_reg_783,
        din3 => write_flag156_0_reg_783,
        din4 => ap_const_lv1_1,
        din5 => write_flag156_0_reg_783,
        din6 => write_flag156_0_reg_783,
        din7 => write_flag156_0_reg_783,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag156_1_fu_2188_p10);

    mux_83_1_1_1_U208 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag153_0_reg_772,
        din1 => write_flag153_0_reg_772,
        din2 => write_flag153_0_reg_772,
        din3 => ap_const_lv1_1,
        din4 => write_flag153_0_reg_772,
        din5 => write_flag153_0_reg_772,
        din6 => write_flag153_0_reg_772,
        din7 => write_flag153_0_reg_772,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag153_1_fu_2210_p10);

    mux_83_1_1_1_U209 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag111_0_reg_761,
        din1 => write_flag111_0_reg_761,
        din2 => write_flag111_0_reg_761,
        din3 => write_flag111_0_reg_761,
        din4 => write_flag111_0_reg_761,
        din5 => ap_const_lv1_1,
        din6 => write_flag111_0_reg_761,
        din7 => write_flag111_0_reg_761,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag111_1_fu_2232_p10);

    mux_83_1_1_1_U210 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag150_0_reg_750,
        din1 => write_flag150_0_reg_750,
        din2 => ap_const_lv1_1,
        din3 => write_flag150_0_reg_750,
        din4 => write_flag150_0_reg_750,
        din5 => write_flag150_0_reg_750,
        din6 => write_flag150_0_reg_750,
        din7 => write_flag150_0_reg_750,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag150_1_fu_2254_p10);

    mux_83_1_1_1_U211 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag147_0_reg_739,
        din1 => ap_const_lv1_1,
        din2 => write_flag147_0_reg_739,
        din3 => write_flag147_0_reg_739,
        din4 => write_flag147_0_reg_739,
        din5 => write_flag147_0_reg_739,
        din6 => write_flag147_0_reg_739,
        din7 => write_flag147_0_reg_739,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag147_1_fu_2276_p10);

    mux_83_1_1_1_U212 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag114_0_reg_728,
        din1 => write_flag114_0_reg_728,
        din2 => write_flag114_0_reg_728,
        din3 => write_flag114_0_reg_728,
        din4 => write_flag114_0_reg_728,
        din5 => write_flag114_0_reg_728,
        din6 => ap_const_lv1_1,
        din7 => write_flag114_0_reg_728,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag114_1_fu_2298_p10);

    mux_83_1_1_1_U213 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag144_0_reg_717,
        din2 => write_flag144_0_reg_717,
        din3 => write_flag144_0_reg_717,
        din4 => write_flag144_0_reg_717,
        din5 => write_flag144_0_reg_717,
        din6 => write_flag144_0_reg_717,
        din7 => write_flag144_0_reg_717,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag144_1_fu_2320_p10);

    mux_83_1_1_1_U214 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag141_0_reg_706,
        din1 => write_flag141_0_reg_706,
        din2 => write_flag141_0_reg_706,
        din3 => write_flag141_0_reg_706,
        din4 => write_flag141_0_reg_706,
        din5 => write_flag141_0_reg_706,
        din6 => write_flag141_0_reg_706,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag141_1_fu_2342_p10);

    mux_83_1_1_1_U215 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag117_0_reg_695,
        din1 => write_flag117_0_reg_695,
        din2 => write_flag117_0_reg_695,
        din3 => write_flag117_0_reg_695,
        din4 => write_flag117_0_reg_695,
        din5 => write_flag117_0_reg_695,
        din6 => write_flag117_0_reg_695,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag117_1_fu_2364_p10);

    mux_83_1_1_1_U216 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag138_0_reg_684,
        din1 => write_flag138_0_reg_684,
        din2 => write_flag138_0_reg_684,
        din3 => write_flag138_0_reg_684,
        din4 => write_flag138_0_reg_684,
        din5 => write_flag138_0_reg_684,
        din6 => ap_const_lv1_1,
        din7 => write_flag138_0_reg_684,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag138_1_fu_2386_p10);

    mux_83_1_1_1_U217 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag135_0_reg_673,
        din1 => write_flag135_0_reg_673,
        din2 => write_flag135_0_reg_673,
        din3 => write_flag135_0_reg_673,
        din4 => write_flag135_0_reg_673,
        din5 => ap_const_lv1_1,
        din6 => write_flag135_0_reg_673,
        din7 => write_flag135_0_reg_673,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag135_1_fu_2408_p10);

    mux_83_1_1_1_U218 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag120_0_reg_662,
        din2 => write_flag120_0_reg_662,
        din3 => write_flag120_0_reg_662,
        din4 => write_flag120_0_reg_662,
        din5 => write_flag120_0_reg_662,
        din6 => write_flag120_0_reg_662,
        din7 => write_flag120_0_reg_662,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag120_1_fu_2430_p10);

    mux_83_1_1_1_U219 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag132_0_reg_651,
        din1 => write_flag132_0_reg_651,
        din2 => write_flag132_0_reg_651,
        din3 => write_flag132_0_reg_651,
        din4 => ap_const_lv1_1,
        din5 => write_flag132_0_reg_651,
        din6 => write_flag132_0_reg_651,
        din7 => write_flag132_0_reg_651,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag132_1_fu_2452_p10);

    mux_83_1_1_1_U220 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag129_0_reg_640,
        din1 => write_flag129_0_reg_640,
        din2 => write_flag129_0_reg_640,
        din3 => ap_const_lv1_1,
        din4 => write_flag129_0_reg_640,
        din5 => write_flag129_0_reg_640,
        din6 => write_flag129_0_reg_640,
        din7 => write_flag129_0_reg_640,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag129_1_fu_2474_p10);

    mux_83_1_1_1_U221 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag123_0_reg_629,
        din1 => ap_const_lv1_1,
        din2 => write_flag123_0_reg_629,
        din3 => write_flag123_0_reg_629,
        din4 => write_flag123_0_reg_629,
        din5 => write_flag123_0_reg_629,
        din6 => write_flag123_0_reg_629,
        din7 => write_flag123_0_reg_629,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag123_1_fu_2496_p10);

    mux_83_1_1_1_U222 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag126_0_reg_618,
        din1 => write_flag126_0_reg_618,
        din2 => ap_const_lv1_1,
        din3 => write_flag126_0_reg_618,
        din4 => write_flag126_0_reg_618,
        din5 => write_flag126_0_reg_618,
        din6 => write_flag126_0_reg_618,
        din7 => write_flag126_0_reg_618,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag126_1_fu_2518_p10);

    mux_83_1_1_1_U223 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag90_0_reg_607,
        din1 => write_flag90_0_reg_607,
        din2 => write_flag90_0_reg_607,
        din3 => write_flag90_0_reg_607,
        din4 => write_flag90_0_reg_607,
        din5 => write_flag90_0_reg_607,
        din6 => ap_const_lv1_1,
        din7 => write_flag90_0_reg_607,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag90_1_fu_2540_p10);

    mux_83_1_1_1_U224 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_0_reg_596,
        din2 => write_flag_0_reg_596,
        din3 => write_flag_0_reg_596,
        din4 => write_flag_0_reg_596,
        din5 => write_flag_0_reg_596,
        din6 => write_flag_0_reg_596,
        din7 => write_flag_0_reg_596,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag_1_fu_2562_p10);

    mux_83_1_1_1_U225 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag87_0_reg_585,
        din1 => write_flag87_0_reg_585,
        din2 => write_flag87_0_reg_585,
        din3 => write_flag87_0_reg_585,
        din4 => write_flag87_0_reg_585,
        din5 => ap_const_lv1_1,
        din6 => write_flag87_0_reg_585,
        din7 => write_flag87_0_reg_585,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag87_1_fu_2584_p10);

    mux_83_1_1_1_U226 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag84_0_reg_574,
        din1 => write_flag84_0_reg_574,
        din2 => write_flag84_0_reg_574,
        din3 => write_flag84_0_reg_574,
        din4 => ap_const_lv1_1,
        din5 => write_flag84_0_reg_574,
        din6 => write_flag84_0_reg_574,
        din7 => write_flag84_0_reg_574,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag84_1_fu_2606_p10);

    mux_83_1_1_1_U227 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag3_0_reg_563,
        din1 => ap_const_lv1_1,
        din2 => write_flag3_0_reg_563,
        din3 => write_flag3_0_reg_563,
        din4 => write_flag3_0_reg_563,
        din5 => write_flag3_0_reg_563,
        din6 => write_flag3_0_reg_563,
        din7 => write_flag3_0_reg_563,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag3_1_fu_2628_p10);

    mux_83_1_1_1_U228 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag81_0_reg_552,
        din1 => write_flag81_0_reg_552,
        din2 => write_flag81_0_reg_552,
        din3 => ap_const_lv1_1,
        din4 => write_flag81_0_reg_552,
        din5 => write_flag81_0_reg_552,
        din6 => write_flag81_0_reg_552,
        din7 => write_flag81_0_reg_552,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag81_1_fu_2650_p10);

    mux_83_1_1_1_U229 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag78_0_reg_541,
        din1 => write_flag78_0_reg_541,
        din2 => ap_const_lv1_1,
        din3 => write_flag78_0_reg_541,
        din4 => write_flag78_0_reg_541,
        din5 => write_flag78_0_reg_541,
        din6 => write_flag78_0_reg_541,
        din7 => write_flag78_0_reg_541,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag78_1_fu_2672_p10);

    mux_83_1_1_1_U230 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag6_0_reg_530,
        din1 => write_flag6_0_reg_530,
        din2 => ap_const_lv1_1,
        din3 => write_flag6_0_reg_530,
        din4 => write_flag6_0_reg_530,
        din5 => write_flag6_0_reg_530,
        din6 => write_flag6_0_reg_530,
        din7 => write_flag6_0_reg_530,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag6_1_fu_2694_p10);

    mux_83_1_1_1_U231 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag75_0_reg_519,
        din1 => ap_const_lv1_1,
        din2 => write_flag75_0_reg_519,
        din3 => write_flag75_0_reg_519,
        din4 => write_flag75_0_reg_519,
        din5 => write_flag75_0_reg_519,
        din6 => write_flag75_0_reg_519,
        din7 => write_flag75_0_reg_519,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag75_1_fu_2716_p10);

    mux_83_1_1_1_U232 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag72_0_reg_508,
        din2 => write_flag72_0_reg_508,
        din3 => write_flag72_0_reg_508,
        din4 => write_flag72_0_reg_508,
        din5 => write_flag72_0_reg_508,
        din6 => write_flag72_0_reg_508,
        din7 => write_flag72_0_reg_508,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag72_1_fu_2738_p10);

    mux_83_1_1_1_U233 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag9_0_reg_497,
        din1 => write_flag9_0_reg_497,
        din2 => write_flag9_0_reg_497,
        din3 => ap_const_lv1_1,
        din4 => write_flag9_0_reg_497,
        din5 => write_flag9_0_reg_497,
        din6 => write_flag9_0_reg_497,
        din7 => write_flag9_0_reg_497,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag9_1_fu_2760_p10);

    mux_83_1_1_1_U234 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag69_0_reg_486,
        din1 => write_flag69_0_reg_486,
        din2 => write_flag69_0_reg_486,
        din3 => write_flag69_0_reg_486,
        din4 => write_flag69_0_reg_486,
        din5 => write_flag69_0_reg_486,
        din6 => write_flag69_0_reg_486,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag69_1_fu_2782_p10);

    mux_83_1_1_1_U235 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag66_0_reg_475,
        din1 => write_flag66_0_reg_475,
        din2 => write_flag66_0_reg_475,
        din3 => write_flag66_0_reg_475,
        din4 => write_flag66_0_reg_475,
        din5 => write_flag66_0_reg_475,
        din6 => ap_const_lv1_1,
        din7 => write_flag66_0_reg_475,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag66_1_fu_2804_p10);

    mux_83_1_1_1_U236 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag12_0_reg_464,
        din1 => write_flag12_0_reg_464,
        din2 => write_flag12_0_reg_464,
        din3 => write_flag12_0_reg_464,
        din4 => ap_const_lv1_1,
        din5 => write_flag12_0_reg_464,
        din6 => write_flag12_0_reg_464,
        din7 => write_flag12_0_reg_464,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag12_1_fu_2826_p10);

    mux_83_1_1_1_U237 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag63_0_reg_453,
        din1 => write_flag63_0_reg_453,
        din2 => write_flag63_0_reg_453,
        din3 => write_flag63_0_reg_453,
        din4 => write_flag63_0_reg_453,
        din5 => ap_const_lv1_1,
        din6 => write_flag63_0_reg_453,
        din7 => write_flag63_0_reg_453,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag63_1_fu_2848_p10);

    mux_83_1_1_1_U238 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag60_0_reg_442,
        din1 => write_flag60_0_reg_442,
        din2 => write_flag60_0_reg_442,
        din3 => write_flag60_0_reg_442,
        din4 => ap_const_lv1_1,
        din5 => write_flag60_0_reg_442,
        din6 => write_flag60_0_reg_442,
        din7 => write_flag60_0_reg_442,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag60_1_fu_2870_p10);

    mux_83_1_1_1_U239 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag15_0_reg_431,
        din1 => write_flag15_0_reg_431,
        din2 => write_flag15_0_reg_431,
        din3 => write_flag15_0_reg_431,
        din4 => write_flag15_0_reg_431,
        din5 => ap_const_lv1_1,
        din6 => write_flag15_0_reg_431,
        din7 => write_flag15_0_reg_431,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag15_1_fu_2892_p10);

    mux_83_1_1_1_U240 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag57_0_reg_420,
        din1 => write_flag57_0_reg_420,
        din2 => write_flag57_0_reg_420,
        din3 => ap_const_lv1_1,
        din4 => write_flag57_0_reg_420,
        din5 => write_flag57_0_reg_420,
        din6 => write_flag57_0_reg_420,
        din7 => write_flag57_0_reg_420,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag57_1_fu_2914_p10);

    mux_83_1_1_1_U241 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag54_0_reg_409,
        din1 => write_flag54_0_reg_409,
        din2 => ap_const_lv1_1,
        din3 => write_flag54_0_reg_409,
        din4 => write_flag54_0_reg_409,
        din5 => write_flag54_0_reg_409,
        din6 => write_flag54_0_reg_409,
        din7 => write_flag54_0_reg_409,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag54_1_fu_2936_p10);

    mux_83_1_1_1_U242 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag18_0_reg_398,
        din1 => write_flag18_0_reg_398,
        din2 => write_flag18_0_reg_398,
        din3 => write_flag18_0_reg_398,
        din4 => write_flag18_0_reg_398,
        din5 => write_flag18_0_reg_398,
        din6 => ap_const_lv1_1,
        din7 => write_flag18_0_reg_398,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag18_1_fu_2958_p10);

    mux_83_1_1_1_U243 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag51_0_reg_387,
        din1 => ap_const_lv1_1,
        din2 => write_flag51_0_reg_387,
        din3 => write_flag51_0_reg_387,
        din4 => write_flag51_0_reg_387,
        din5 => write_flag51_0_reg_387,
        din6 => write_flag51_0_reg_387,
        din7 => write_flag51_0_reg_387,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag51_1_fu_2980_p10);

    mux_83_1_1_1_U244 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag48_0_reg_376,
        din2 => write_flag48_0_reg_376,
        din3 => write_flag48_0_reg_376,
        din4 => write_flag48_0_reg_376,
        din5 => write_flag48_0_reg_376,
        din6 => write_flag48_0_reg_376,
        din7 => write_flag48_0_reg_376,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag48_1_fu_3002_p10);

    mux_83_1_1_1_U245 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag21_0_reg_365,
        din1 => write_flag21_0_reg_365,
        din2 => write_flag21_0_reg_365,
        din3 => write_flag21_0_reg_365,
        din4 => write_flag21_0_reg_365,
        din5 => write_flag21_0_reg_365,
        din6 => write_flag21_0_reg_365,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag21_1_fu_3024_p10);

    mux_83_1_1_1_U246 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag45_0_reg_354,
        din1 => write_flag45_0_reg_354,
        din2 => write_flag45_0_reg_354,
        din3 => write_flag45_0_reg_354,
        din4 => write_flag45_0_reg_354,
        din5 => write_flag45_0_reg_354,
        din6 => write_flag45_0_reg_354,
        din7 => ap_const_lv1_1,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag45_1_fu_3046_p10);

    mux_83_1_1_1_U247 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag42_0_reg_343,
        din1 => write_flag42_0_reg_343,
        din2 => write_flag42_0_reg_343,
        din3 => write_flag42_0_reg_343,
        din4 => write_flag42_0_reg_343,
        din5 => write_flag42_0_reg_343,
        din6 => ap_const_lv1_1,
        din7 => write_flag42_0_reg_343,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag42_1_fu_3068_p10);

    mux_83_1_1_1_U248 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag24_0_reg_332,
        din2 => write_flag24_0_reg_332,
        din3 => write_flag24_0_reg_332,
        din4 => write_flag24_0_reg_332,
        din5 => write_flag24_0_reg_332,
        din6 => write_flag24_0_reg_332,
        din7 => write_flag24_0_reg_332,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag24_1_fu_3090_p10);

    mux_83_1_1_1_U249 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag39_0_reg_321,
        din1 => write_flag39_0_reg_321,
        din2 => write_flag39_0_reg_321,
        din3 => write_flag39_0_reg_321,
        din4 => write_flag39_0_reg_321,
        din5 => ap_const_lv1_1,
        din6 => write_flag39_0_reg_321,
        din7 => write_flag39_0_reg_321,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag39_1_fu_3112_p10);

    mux_83_1_1_1_U250 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag36_0_reg_310,
        din1 => write_flag36_0_reg_310,
        din2 => write_flag36_0_reg_310,
        din3 => write_flag36_0_reg_310,
        din4 => ap_const_lv1_1,
        din5 => write_flag36_0_reg_310,
        din6 => write_flag36_0_reg_310,
        din7 => write_flag36_0_reg_310,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag36_1_fu_3134_p10);

    mux_83_1_1_1_U251 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag27_0_reg_299,
        din1 => ap_const_lv1_1,
        din2 => write_flag27_0_reg_299,
        din3 => write_flag27_0_reg_299,
        din4 => write_flag27_0_reg_299,
        din5 => write_flag27_0_reg_299,
        din6 => write_flag27_0_reg_299,
        din7 => write_flag27_0_reg_299,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag27_1_fu_3156_p10);

    mux_83_1_1_1_U252 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag33_0_reg_288,
        din1 => write_flag33_0_reg_288,
        din2 => write_flag33_0_reg_288,
        din3 => ap_const_lv1_1,
        din4 => write_flag33_0_reg_288,
        din5 => write_flag33_0_reg_288,
        din6 => write_flag33_0_reg_288,
        din7 => write_flag33_0_reg_288,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag33_1_fu_3178_p10);

    mux_83_1_1_1_U253 : component Conv_sysarr_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag30_0_reg_277,
        din1 => write_flag30_0_reg_277,
        din2 => ap_const_lv1_1,
        din3 => write_flag30_0_reg_277,
        din4 => write_flag30_0_reg_277,
        din5 => write_flag30_0_reg_277,
        din6 => write_flag30_0_reg_277,
        din7 => write_flag30_0_reg_277,
        din8 => empty_56_fu_1796_p1,
        dout => write_flag30_1_fu_3200_p10);

    mux_83_8_1_1_U254 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_7_764_i_064_reg_1748,
        din1 => weight_regfile_7_764_i_064_reg_1748,
        din2 => weight_regfile_7_764_i_064_reg_1748,
        din3 => weight_regfile_7_764_i_064_reg_1748,
        din4 => weight_regfile_7_764_i_064_reg_1748,
        din5 => weight_regfile_7_764_i_064_reg_1748,
        din6 => weight_regfile_7_764_i_064_reg_1748,
        din7 => weight_l2_7_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_764_i_1_fu_3233_p10);

    mux_83_8_1_1_U255 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_631_i_065_reg_1736,
        din1 => weight_regfile_3_631_i_065_reg_1736,
        din2 => weight_regfile_3_631_i_065_reg_1736,
        din3 => weight_regfile_3_631_i_065_reg_1736,
        din4 => weight_regfile_3_631_i_065_reg_1736,
        din5 => weight_regfile_3_631_i_065_reg_1736,
        din6 => weight_l2_3_q0,
        din7 => weight_regfile_3_631_i_065_reg_1736,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_631_i_1_fu_3254_p10);

    mux_83_8_1_1_U256 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_7_663_i_066_reg_1724,
        din1 => weight_regfile_7_663_i_066_reg_1724,
        din2 => weight_regfile_7_663_i_066_reg_1724,
        din3 => weight_regfile_7_663_i_066_reg_1724,
        din4 => weight_regfile_7_663_i_066_reg_1724,
        din5 => weight_regfile_7_663_i_066_reg_1724,
        din6 => weight_l2_7_q0,
        din7 => weight_regfile_7_663_i_066_reg_1724,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_663_i_1_fu_3275_p10);

    mux_83_8_1_1_U257 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_7_562_i_067_reg_1712,
        din1 => weight_regfile_7_562_i_067_reg_1712,
        din2 => weight_regfile_7_562_i_067_reg_1712,
        din3 => weight_regfile_7_562_i_067_reg_1712,
        din4 => weight_regfile_7_562_i_067_reg_1712,
        din5 => weight_l2_7_q0,
        din6 => weight_regfile_7_562_i_067_reg_1712,
        din7 => weight_regfile_7_562_i_067_reg_1712,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_562_i_1_fu_3296_p10);

    mux_83_8_1_1_U258 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_732_i_068_reg_1700,
        din1 => weight_regfile_3_732_i_068_reg_1700,
        din2 => weight_regfile_3_732_i_068_reg_1700,
        din3 => weight_regfile_3_732_i_068_reg_1700,
        din4 => weight_regfile_3_732_i_068_reg_1700,
        din5 => weight_regfile_3_732_i_068_reg_1700,
        din6 => weight_regfile_3_732_i_068_reg_1700,
        din7 => weight_l2_3_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_732_i_1_fu_3317_p10);

    mux_83_8_1_1_U259 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_7_461_i_069_reg_1688,
        din1 => weight_regfile_7_461_i_069_reg_1688,
        din2 => weight_regfile_7_461_i_069_reg_1688,
        din3 => weight_regfile_7_461_i_069_reg_1688,
        din4 => weight_l2_7_q0,
        din5 => weight_regfile_7_461_i_069_reg_1688,
        din6 => weight_regfile_7_461_i_069_reg_1688,
        din7 => weight_regfile_7_461_i_069_reg_1688,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_461_i_1_fu_3338_p10);

    mux_83_8_1_1_U260 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_7_360_i_070_reg_1676,
        din1 => weight_regfile_7_360_i_070_reg_1676,
        din2 => weight_regfile_7_360_i_070_reg_1676,
        din3 => weight_l2_7_q0,
        din4 => weight_regfile_7_360_i_070_reg_1676,
        din5 => weight_regfile_7_360_i_070_reg_1676,
        din6 => weight_regfile_7_360_i_070_reg_1676,
        din7 => weight_regfile_7_360_i_070_reg_1676,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_360_i_1_fu_3359_p10);

    mux_83_8_1_1_U261 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_4_q0,
        din1 => weight_regfile_4_033_i_071_reg_1664,
        din2 => weight_regfile_4_033_i_071_reg_1664,
        din3 => weight_regfile_4_033_i_071_reg_1664,
        din4 => weight_regfile_4_033_i_071_reg_1664,
        din5 => weight_regfile_4_033_i_071_reg_1664,
        din6 => weight_regfile_4_033_i_071_reg_1664,
        din7 => weight_regfile_4_033_i_071_reg_1664,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_033_i_1_fu_3380_p10);

    mux_83_8_1_1_U262 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_7_259_i_072_reg_1652,
        din1 => weight_regfile_7_259_i_072_reg_1652,
        din2 => weight_l2_7_q0,
        din3 => weight_regfile_7_259_i_072_reg_1652,
        din4 => weight_regfile_7_259_i_072_reg_1652,
        din5 => weight_regfile_7_259_i_072_reg_1652,
        din6 => weight_regfile_7_259_i_072_reg_1652,
        din7 => weight_regfile_7_259_i_072_reg_1652,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_259_i_1_fu_3401_p10);

    mux_83_8_1_1_U263 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_7_158_i_073_reg_1640,
        din1 => weight_l2_7_q0,
        din2 => weight_regfile_7_158_i_073_reg_1640,
        din3 => weight_regfile_7_158_i_073_reg_1640,
        din4 => weight_regfile_7_158_i_073_reg_1640,
        din5 => weight_regfile_7_158_i_073_reg_1640,
        din6 => weight_regfile_7_158_i_073_reg_1640,
        din7 => weight_regfile_7_158_i_073_reg_1640,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_158_i_1_fu_3422_p10);

    mux_83_8_1_1_U264 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_4_134_i_074_reg_1628,
        din1 => weight_l2_4_q0,
        din2 => weight_regfile_4_134_i_074_reg_1628,
        din3 => weight_regfile_4_134_i_074_reg_1628,
        din4 => weight_regfile_4_134_i_074_reg_1628,
        din5 => weight_regfile_4_134_i_074_reg_1628,
        din6 => weight_regfile_4_134_i_074_reg_1628,
        din7 => weight_regfile_4_134_i_074_reg_1628,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_134_i_1_fu_3443_p10);

    mux_83_8_1_1_U265 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_7_q0,
        din1 => weight_regfile_7_057_i_075_reg_1616,
        din2 => weight_regfile_7_057_i_075_reg_1616,
        din3 => weight_regfile_7_057_i_075_reg_1616,
        din4 => weight_regfile_7_057_i_075_reg_1616,
        din5 => weight_regfile_7_057_i_075_reg_1616,
        din6 => weight_regfile_7_057_i_075_reg_1616,
        din7 => weight_regfile_7_057_i_075_reg_1616,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_7_057_i_1_fu_3464_p10);

    mux_83_8_1_1_U266 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_6_756_i_076_reg_1604,
        din1 => weight_regfile_6_756_i_076_reg_1604,
        din2 => weight_regfile_6_756_i_076_reg_1604,
        din3 => weight_regfile_6_756_i_076_reg_1604,
        din4 => weight_regfile_6_756_i_076_reg_1604,
        din5 => weight_regfile_6_756_i_076_reg_1604,
        din6 => weight_regfile_6_756_i_076_reg_1604,
        din7 => weight_l2_6_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_756_i_1_fu_3485_p10);

    mux_83_8_1_1_U267 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_4_235_i_077_reg_1592,
        din1 => weight_regfile_4_235_i_077_reg_1592,
        din2 => weight_l2_4_q0,
        din3 => weight_regfile_4_235_i_077_reg_1592,
        din4 => weight_regfile_4_235_i_077_reg_1592,
        din5 => weight_regfile_4_235_i_077_reg_1592,
        din6 => weight_regfile_4_235_i_077_reg_1592,
        din7 => weight_regfile_4_235_i_077_reg_1592,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_235_i_1_fu_3506_p10);

    mux_83_8_1_1_U268 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_6_655_i_078_reg_1580,
        din1 => weight_regfile_6_655_i_078_reg_1580,
        din2 => weight_regfile_6_655_i_078_reg_1580,
        din3 => weight_regfile_6_655_i_078_reg_1580,
        din4 => weight_regfile_6_655_i_078_reg_1580,
        din5 => weight_regfile_6_655_i_078_reg_1580,
        din6 => weight_l2_6_q0,
        din7 => weight_regfile_6_655_i_078_reg_1580,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_655_i_1_fu_3527_p10);

    mux_83_8_1_1_U269 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_6_554_i_079_reg_1568,
        din1 => weight_regfile_6_554_i_079_reg_1568,
        din2 => weight_regfile_6_554_i_079_reg_1568,
        din3 => weight_regfile_6_554_i_079_reg_1568,
        din4 => weight_regfile_6_554_i_079_reg_1568,
        din5 => weight_l2_6_q0,
        din6 => weight_regfile_6_554_i_079_reg_1568,
        din7 => weight_regfile_6_554_i_079_reg_1568,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_554_i_1_fu_3548_p10);

    mux_83_8_1_1_U270 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_4_336_i_080_reg_1556,
        din1 => weight_regfile_4_336_i_080_reg_1556,
        din2 => weight_regfile_4_336_i_080_reg_1556,
        din3 => weight_l2_4_q0,
        din4 => weight_regfile_4_336_i_080_reg_1556,
        din5 => weight_regfile_4_336_i_080_reg_1556,
        din6 => weight_regfile_4_336_i_080_reg_1556,
        din7 => weight_regfile_4_336_i_080_reg_1556,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_336_i_1_fu_3569_p10);

    mux_83_8_1_1_U271 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_6_453_i_081_reg_1544,
        din1 => weight_regfile_6_453_i_081_reg_1544,
        din2 => weight_regfile_6_453_i_081_reg_1544,
        din3 => weight_regfile_6_453_i_081_reg_1544,
        din4 => weight_l2_6_q0,
        din5 => weight_regfile_6_453_i_081_reg_1544,
        din6 => weight_regfile_6_453_i_081_reg_1544,
        din7 => weight_regfile_6_453_i_081_reg_1544,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_453_i_1_fu_3590_p10);

    mux_83_8_1_1_U272 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_6_352_i_082_reg_1532,
        din1 => weight_regfile_6_352_i_082_reg_1532,
        din2 => weight_regfile_6_352_i_082_reg_1532,
        din3 => weight_l2_6_q0,
        din4 => weight_regfile_6_352_i_082_reg_1532,
        din5 => weight_regfile_6_352_i_082_reg_1532,
        din6 => weight_regfile_6_352_i_082_reg_1532,
        din7 => weight_regfile_6_352_i_082_reg_1532,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_352_i_1_fu_3611_p10);

    mux_83_8_1_1_U273 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_4_437_i_083_reg_1520,
        din1 => weight_regfile_4_437_i_083_reg_1520,
        din2 => weight_regfile_4_437_i_083_reg_1520,
        din3 => weight_regfile_4_437_i_083_reg_1520,
        din4 => weight_l2_4_q0,
        din5 => weight_regfile_4_437_i_083_reg_1520,
        din6 => weight_regfile_4_437_i_083_reg_1520,
        din7 => weight_regfile_4_437_i_083_reg_1520,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_437_i_1_fu_3632_p10);

    mux_83_8_1_1_U274 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_6_251_i_084_reg_1508,
        din1 => weight_regfile_6_251_i_084_reg_1508,
        din2 => weight_l2_6_q0,
        din3 => weight_regfile_6_251_i_084_reg_1508,
        din4 => weight_regfile_6_251_i_084_reg_1508,
        din5 => weight_regfile_6_251_i_084_reg_1508,
        din6 => weight_regfile_6_251_i_084_reg_1508,
        din7 => weight_regfile_6_251_i_084_reg_1508,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_251_i_1_fu_3653_p10);

    mux_83_8_1_1_U275 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_6_150_i_085_reg_1496,
        din1 => weight_l2_6_q0,
        din2 => weight_regfile_6_150_i_085_reg_1496,
        din3 => weight_regfile_6_150_i_085_reg_1496,
        din4 => weight_regfile_6_150_i_085_reg_1496,
        din5 => weight_regfile_6_150_i_085_reg_1496,
        din6 => weight_regfile_6_150_i_085_reg_1496,
        din7 => weight_regfile_6_150_i_085_reg_1496,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_150_i_1_fu_3674_p10);

    mux_83_8_1_1_U276 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_4_538_i_086_reg_1484,
        din1 => weight_regfile_4_538_i_086_reg_1484,
        din2 => weight_regfile_4_538_i_086_reg_1484,
        din3 => weight_regfile_4_538_i_086_reg_1484,
        din4 => weight_regfile_4_538_i_086_reg_1484,
        din5 => weight_l2_4_q0,
        din6 => weight_regfile_4_538_i_086_reg_1484,
        din7 => weight_regfile_4_538_i_086_reg_1484,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_538_i_1_fu_3695_p10);

    mux_83_8_1_1_U277 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_6_q0,
        din1 => weight_regfile_6_049_i_087_reg_1472,
        din2 => weight_regfile_6_049_i_087_reg_1472,
        din3 => weight_regfile_6_049_i_087_reg_1472,
        din4 => weight_regfile_6_049_i_087_reg_1472,
        din5 => weight_regfile_6_049_i_087_reg_1472,
        din6 => weight_regfile_6_049_i_087_reg_1472,
        din7 => weight_regfile_6_049_i_087_reg_1472,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_6_049_i_1_fu_3716_p10);

    mux_83_8_1_1_U278 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_5_748_i_088_reg_1460,
        din1 => weight_regfile_5_748_i_088_reg_1460,
        din2 => weight_regfile_5_748_i_088_reg_1460,
        din3 => weight_regfile_5_748_i_088_reg_1460,
        din4 => weight_regfile_5_748_i_088_reg_1460,
        din5 => weight_regfile_5_748_i_088_reg_1460,
        din6 => weight_regfile_5_748_i_088_reg_1460,
        din7 => weight_l2_5_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_748_i_1_fu_3737_p10);

    mux_83_8_1_1_U279 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_4_639_i_089_reg_1448,
        din1 => weight_regfile_4_639_i_089_reg_1448,
        din2 => weight_regfile_4_639_i_089_reg_1448,
        din3 => weight_regfile_4_639_i_089_reg_1448,
        din4 => weight_regfile_4_639_i_089_reg_1448,
        din5 => weight_regfile_4_639_i_089_reg_1448,
        din6 => weight_l2_4_q0,
        din7 => weight_regfile_4_639_i_089_reg_1448,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_639_i_1_fu_3758_p10);

    mux_83_8_1_1_U280 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_5_647_i_090_reg_1436,
        din1 => weight_regfile_5_647_i_090_reg_1436,
        din2 => weight_regfile_5_647_i_090_reg_1436,
        din3 => weight_regfile_5_647_i_090_reg_1436,
        din4 => weight_regfile_5_647_i_090_reg_1436,
        din5 => weight_regfile_5_647_i_090_reg_1436,
        din6 => weight_l2_5_q0,
        din7 => weight_regfile_5_647_i_090_reg_1436,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_647_i_1_fu_3779_p10);

    mux_83_8_1_1_U281 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_5_546_i_091_reg_1424,
        din1 => weight_regfile_5_546_i_091_reg_1424,
        din2 => weight_regfile_5_546_i_091_reg_1424,
        din3 => weight_regfile_5_546_i_091_reg_1424,
        din4 => weight_regfile_5_546_i_091_reg_1424,
        din5 => weight_l2_5_q0,
        din6 => weight_regfile_5_546_i_091_reg_1424,
        din7 => weight_regfile_5_546_i_091_reg_1424,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_546_i_1_fu_3800_p10);

    mux_83_8_1_1_U282 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_4_740_i_092_reg_1412,
        din1 => weight_regfile_4_740_i_092_reg_1412,
        din2 => weight_regfile_4_740_i_092_reg_1412,
        din3 => weight_regfile_4_740_i_092_reg_1412,
        din4 => weight_regfile_4_740_i_092_reg_1412,
        din5 => weight_regfile_4_740_i_092_reg_1412,
        din6 => weight_regfile_4_740_i_092_reg_1412,
        din7 => weight_l2_4_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_4_740_i_1_fu_3821_p10);

    mux_83_8_1_1_U283 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_5_445_i_093_reg_1400,
        din1 => weight_regfile_5_445_i_093_reg_1400,
        din2 => weight_regfile_5_445_i_093_reg_1400,
        din3 => weight_regfile_5_445_i_093_reg_1400,
        din4 => weight_l2_5_q0,
        din5 => weight_regfile_5_445_i_093_reg_1400,
        din6 => weight_regfile_5_445_i_093_reg_1400,
        din7 => weight_regfile_5_445_i_093_reg_1400,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_445_i_1_fu_3842_p10);

    mux_83_8_1_1_U284 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_5_344_i_094_reg_1388,
        din1 => weight_regfile_5_344_i_094_reg_1388,
        din2 => weight_regfile_5_344_i_094_reg_1388,
        din3 => weight_l2_5_q0,
        din4 => weight_regfile_5_344_i_094_reg_1388,
        din5 => weight_regfile_5_344_i_094_reg_1388,
        din6 => weight_regfile_5_344_i_094_reg_1388,
        din7 => weight_regfile_5_344_i_094_reg_1388,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_344_i_1_fu_3863_p10);

    mux_83_8_1_1_U285 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_5_q0,
        din1 => weight_regfile_5_041_i_095_reg_1376,
        din2 => weight_regfile_5_041_i_095_reg_1376,
        din3 => weight_regfile_5_041_i_095_reg_1376,
        din4 => weight_regfile_5_041_i_095_reg_1376,
        din5 => weight_regfile_5_041_i_095_reg_1376,
        din6 => weight_regfile_5_041_i_095_reg_1376,
        din7 => weight_regfile_5_041_i_095_reg_1376,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_041_i_1_fu_3884_p10);

    mux_83_8_1_1_U286 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_5_243_i_096_reg_1364,
        din1 => weight_regfile_5_243_i_096_reg_1364,
        din2 => weight_l2_5_q0,
        din3 => weight_regfile_5_243_i_096_reg_1364,
        din4 => weight_regfile_5_243_i_096_reg_1364,
        din5 => weight_regfile_5_243_i_096_reg_1364,
        din6 => weight_regfile_5_243_i_096_reg_1364,
        din7 => weight_regfile_5_243_i_096_reg_1364,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_243_i_1_fu_3905_p10);

    mux_83_8_1_1_U287 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_5_142_i_097_reg_1352,
        din1 => weight_l2_5_q0,
        din2 => weight_regfile_5_142_i_097_reg_1352,
        din3 => weight_regfile_5_142_i_097_reg_1352,
        din4 => weight_regfile_5_142_i_097_reg_1352,
        din5 => weight_regfile_5_142_i_097_reg_1352,
        din6 => weight_regfile_5_142_i_097_reg_1352,
        din7 => weight_regfile_5_142_i_097_reg_1352,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_5_142_i_1_fu_3926_p10);

    mux_83_8_1_1_U288 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_530_i_098_reg_1340,
        din1 => weight_regfile_3_530_i_098_reg_1340,
        din2 => weight_regfile_3_530_i_098_reg_1340,
        din3 => weight_regfile_3_530_i_098_reg_1340,
        din4 => weight_regfile_3_530_i_098_reg_1340,
        din5 => weight_l2_3_q0,
        din6 => weight_regfile_3_530_i_098_reg_1340,
        din7 => weight_regfile_3_530_i_098_reg_1340,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_530_i_1_fu_3947_p10);

    mux_83_8_1_1_U289 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_429_i_099_reg_1328,
        din1 => weight_regfile_3_429_i_099_reg_1328,
        din2 => weight_regfile_3_429_i_099_reg_1328,
        din3 => weight_regfile_3_429_i_099_reg_1328,
        din4 => weight_l2_3_q0,
        din5 => weight_regfile_3_429_i_099_reg_1328,
        din6 => weight_regfile_3_429_i_099_reg_1328,
        din7 => weight_regfile_3_429_i_099_reg_1328,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_429_i_1_fu_3968_p10);

    mux_83_8_1_1_U290 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_0_q0,
        din1 => weight_regfile_0_01_i_0100_reg_1316,
        din2 => weight_regfile_0_01_i_0100_reg_1316,
        din3 => weight_regfile_0_01_i_0100_reg_1316,
        din4 => weight_regfile_0_01_i_0100_reg_1316,
        din5 => weight_regfile_0_01_i_0100_reg_1316,
        din6 => weight_regfile_0_01_i_0100_reg_1316,
        din7 => weight_regfile_0_01_i_0100_reg_1316,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_01_i_1_fu_3989_p10);

    mux_83_8_1_1_U291 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_328_i_0101_reg_1304,
        din1 => weight_regfile_3_328_i_0101_reg_1304,
        din2 => weight_regfile_3_328_i_0101_reg_1304,
        din3 => weight_l2_3_q0,
        din4 => weight_regfile_3_328_i_0101_reg_1304,
        din5 => weight_regfile_3_328_i_0101_reg_1304,
        din6 => weight_regfile_3_328_i_0101_reg_1304,
        din7 => weight_regfile_3_328_i_0101_reg_1304,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_328_i_1_fu_4010_p10);

    mux_83_8_1_1_U292 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_227_i_0102_reg_1292,
        din1 => weight_regfile_3_227_i_0102_reg_1292,
        din2 => weight_l2_3_q0,
        din3 => weight_regfile_3_227_i_0102_reg_1292,
        din4 => weight_regfile_3_227_i_0102_reg_1292,
        din5 => weight_regfile_3_227_i_0102_reg_1292,
        din6 => weight_regfile_3_227_i_0102_reg_1292,
        din7 => weight_regfile_3_227_i_0102_reg_1292,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_227_i_1_fu_4031_p10);

    mux_83_8_1_1_U293 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_12_i_0103_reg_1280,
        din1 => weight_l2_0_q0,
        din2 => weight_regfile_0_12_i_0103_reg_1280,
        din3 => weight_regfile_0_12_i_0103_reg_1280,
        din4 => weight_regfile_0_12_i_0103_reg_1280,
        din5 => weight_regfile_0_12_i_0103_reg_1280,
        din6 => weight_regfile_0_12_i_0103_reg_1280,
        din7 => weight_regfile_0_12_i_0103_reg_1280,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_12_i_1_fu_4052_p10);

    mux_83_8_1_1_U294 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_126_i_0104_reg_1268,
        din1 => weight_l2_3_q0,
        din2 => weight_regfile_3_126_i_0104_reg_1268,
        din3 => weight_regfile_3_126_i_0104_reg_1268,
        din4 => weight_regfile_3_126_i_0104_reg_1268,
        din5 => weight_regfile_3_126_i_0104_reg_1268,
        din6 => weight_regfile_3_126_i_0104_reg_1268,
        din7 => weight_regfile_3_126_i_0104_reg_1268,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_126_i_1_fu_4073_p10);

    mux_83_8_1_1_U295 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_3_q0,
        din1 => weight_regfile_3_025_i_0105_reg_1256,
        din2 => weight_regfile_3_025_i_0105_reg_1256,
        din3 => weight_regfile_3_025_i_0105_reg_1256,
        din4 => weight_regfile_3_025_i_0105_reg_1256,
        din5 => weight_regfile_3_025_i_0105_reg_1256,
        din6 => weight_regfile_3_025_i_0105_reg_1256,
        din7 => weight_regfile_3_025_i_0105_reg_1256,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_3_025_i_1_fu_4094_p10);

    mux_83_8_1_1_U296 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_23_i_0106_reg_1244,
        din1 => weight_regfile_0_23_i_0106_reg_1244,
        din2 => weight_l2_0_q0,
        din3 => weight_regfile_0_23_i_0106_reg_1244,
        din4 => weight_regfile_0_23_i_0106_reg_1244,
        din5 => weight_regfile_0_23_i_0106_reg_1244,
        din6 => weight_regfile_0_23_i_0106_reg_1244,
        din7 => weight_regfile_0_23_i_0106_reg_1244,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_23_i_1_fu_4115_p10);

    mux_83_8_1_1_U297 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_724_i_0107_reg_1232,
        din1 => weight_regfile_2_724_i_0107_reg_1232,
        din2 => weight_regfile_2_724_i_0107_reg_1232,
        din3 => weight_regfile_2_724_i_0107_reg_1232,
        din4 => weight_regfile_2_724_i_0107_reg_1232,
        din5 => weight_regfile_2_724_i_0107_reg_1232,
        din6 => weight_regfile_2_724_i_0107_reg_1232,
        din7 => weight_l2_2_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_724_i_1_fu_4136_p10);

    mux_83_8_1_1_U298 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_623_i_0108_reg_1220,
        din1 => weight_regfile_2_623_i_0108_reg_1220,
        din2 => weight_regfile_2_623_i_0108_reg_1220,
        din3 => weight_regfile_2_623_i_0108_reg_1220,
        din4 => weight_regfile_2_623_i_0108_reg_1220,
        din5 => weight_regfile_2_623_i_0108_reg_1220,
        din6 => weight_l2_2_q0,
        din7 => weight_regfile_2_623_i_0108_reg_1220,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_623_i_1_fu_4157_p10);

    mux_83_8_1_1_U299 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_34_i_0109_reg_1208,
        din1 => weight_regfile_0_34_i_0109_reg_1208,
        din2 => weight_regfile_0_34_i_0109_reg_1208,
        din3 => weight_l2_0_q0,
        din4 => weight_regfile_0_34_i_0109_reg_1208,
        din5 => weight_regfile_0_34_i_0109_reg_1208,
        din6 => weight_regfile_0_34_i_0109_reg_1208,
        din7 => weight_regfile_0_34_i_0109_reg_1208,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_34_i_1_fu_4178_p10);

    mux_83_8_1_1_U300 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_522_i_0110_reg_1196,
        din1 => weight_regfile_2_522_i_0110_reg_1196,
        din2 => weight_regfile_2_522_i_0110_reg_1196,
        din3 => weight_regfile_2_522_i_0110_reg_1196,
        din4 => weight_regfile_2_522_i_0110_reg_1196,
        din5 => weight_l2_2_q0,
        din6 => weight_regfile_2_522_i_0110_reg_1196,
        din7 => weight_regfile_2_522_i_0110_reg_1196,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_522_i_1_fu_4199_p10);

    mux_83_8_1_1_U301 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_421_i_0111_reg_1184,
        din1 => weight_regfile_2_421_i_0111_reg_1184,
        din2 => weight_regfile_2_421_i_0111_reg_1184,
        din3 => weight_regfile_2_421_i_0111_reg_1184,
        din4 => weight_l2_2_q0,
        din5 => weight_regfile_2_421_i_0111_reg_1184,
        din6 => weight_regfile_2_421_i_0111_reg_1184,
        din7 => weight_regfile_2_421_i_0111_reg_1184,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_421_i_1_fu_4220_p10);

    mux_83_8_1_1_U302 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_45_i_0112_reg_1172,
        din1 => weight_regfile_0_45_i_0112_reg_1172,
        din2 => weight_regfile_0_45_i_0112_reg_1172,
        din3 => weight_regfile_0_45_i_0112_reg_1172,
        din4 => weight_l2_0_q0,
        din5 => weight_regfile_0_45_i_0112_reg_1172,
        din6 => weight_regfile_0_45_i_0112_reg_1172,
        din7 => weight_regfile_0_45_i_0112_reg_1172,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_45_i_1_fu_4241_p10);

    mux_83_8_1_1_U303 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_320_i_0113_reg_1160,
        din1 => weight_regfile_2_320_i_0113_reg_1160,
        din2 => weight_regfile_2_320_i_0113_reg_1160,
        din3 => weight_l2_2_q0,
        din4 => weight_regfile_2_320_i_0113_reg_1160,
        din5 => weight_regfile_2_320_i_0113_reg_1160,
        din6 => weight_regfile_2_320_i_0113_reg_1160,
        din7 => weight_regfile_2_320_i_0113_reg_1160,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_320_i_1_fu_4262_p10);

    mux_83_8_1_1_U304 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_219_i_0114_reg_1148,
        din1 => weight_regfile_2_219_i_0114_reg_1148,
        din2 => weight_l2_2_q0,
        din3 => weight_regfile_2_219_i_0114_reg_1148,
        din4 => weight_regfile_2_219_i_0114_reg_1148,
        din5 => weight_regfile_2_219_i_0114_reg_1148,
        din6 => weight_regfile_2_219_i_0114_reg_1148,
        din7 => weight_regfile_2_219_i_0114_reg_1148,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_219_i_1_fu_4283_p10);

    mux_83_8_1_1_U305 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_56_i_0115_reg_1136,
        din1 => weight_regfile_0_56_i_0115_reg_1136,
        din2 => weight_regfile_0_56_i_0115_reg_1136,
        din3 => weight_regfile_0_56_i_0115_reg_1136,
        din4 => weight_regfile_0_56_i_0115_reg_1136,
        din5 => weight_l2_0_q0,
        din6 => weight_regfile_0_56_i_0115_reg_1136,
        din7 => weight_regfile_0_56_i_0115_reg_1136,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_56_i_1_fu_4304_p10);

    mux_83_8_1_1_U306 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_118_i_0116_reg_1124,
        din1 => weight_l2_2_q0,
        din2 => weight_regfile_2_118_i_0116_reg_1124,
        din3 => weight_regfile_2_118_i_0116_reg_1124,
        din4 => weight_regfile_2_118_i_0116_reg_1124,
        din5 => weight_regfile_2_118_i_0116_reg_1124,
        din6 => weight_regfile_2_118_i_0116_reg_1124,
        din7 => weight_regfile_2_118_i_0116_reg_1124,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_118_i_1_fu_4325_p10);

    mux_83_8_1_1_U307 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_2_q0,
        din1 => weight_regfile_2_017_i_0117_reg_1112,
        din2 => weight_regfile_2_017_i_0117_reg_1112,
        din3 => weight_regfile_2_017_i_0117_reg_1112,
        din4 => weight_regfile_2_017_i_0117_reg_1112,
        din5 => weight_regfile_2_017_i_0117_reg_1112,
        din6 => weight_regfile_2_017_i_0117_reg_1112,
        din7 => weight_regfile_2_017_i_0117_reg_1112,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_2_017_i_1_fu_4346_p10);

    mux_83_8_1_1_U308 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_67_i_0118_reg_1100,
        din1 => weight_regfile_0_67_i_0118_reg_1100,
        din2 => weight_regfile_0_67_i_0118_reg_1100,
        din3 => weight_regfile_0_67_i_0118_reg_1100,
        din4 => weight_regfile_0_67_i_0118_reg_1100,
        din5 => weight_regfile_0_67_i_0118_reg_1100,
        din6 => weight_l2_0_q0,
        din7 => weight_regfile_0_67_i_0118_reg_1100,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_67_i_1_fu_4367_p10);

    mux_83_8_1_1_U309 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_716_i_0119_reg_1088,
        din1 => weight_regfile_1_716_i_0119_reg_1088,
        din2 => weight_regfile_1_716_i_0119_reg_1088,
        din3 => weight_regfile_1_716_i_0119_reg_1088,
        din4 => weight_regfile_1_716_i_0119_reg_1088,
        din5 => weight_regfile_1_716_i_0119_reg_1088,
        din6 => weight_regfile_1_716_i_0119_reg_1088,
        din7 => weight_l2_1_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_716_i_1_fu_4388_p10);

    mux_83_8_1_1_U310 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_615_i_0120_reg_1076,
        din1 => weight_regfile_1_615_i_0120_reg_1076,
        din2 => weight_regfile_1_615_i_0120_reg_1076,
        din3 => weight_regfile_1_615_i_0120_reg_1076,
        din4 => weight_regfile_1_615_i_0120_reg_1076,
        din5 => weight_regfile_1_615_i_0120_reg_1076,
        din6 => weight_l2_1_q0,
        din7 => weight_regfile_1_615_i_0120_reg_1076,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_615_i_1_fu_4409_p10);

    mux_83_8_1_1_U311 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_78_i_0121_reg_1064,
        din1 => weight_regfile_0_78_i_0121_reg_1064,
        din2 => weight_regfile_0_78_i_0121_reg_1064,
        din3 => weight_regfile_0_78_i_0121_reg_1064,
        din4 => weight_regfile_0_78_i_0121_reg_1064,
        din5 => weight_regfile_0_78_i_0121_reg_1064,
        din6 => weight_regfile_0_78_i_0121_reg_1064,
        din7 => weight_l2_0_q0,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_0_78_i_1_fu_4430_p10);

    mux_83_8_1_1_U312 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_514_i_0122_reg_1052,
        din1 => weight_regfile_1_514_i_0122_reg_1052,
        din2 => weight_regfile_1_514_i_0122_reg_1052,
        din3 => weight_regfile_1_514_i_0122_reg_1052,
        din4 => weight_regfile_1_514_i_0122_reg_1052,
        din5 => weight_l2_1_q0,
        din6 => weight_regfile_1_514_i_0122_reg_1052,
        din7 => weight_regfile_1_514_i_0122_reg_1052,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_514_i_1_fu_4451_p10);

    mux_83_8_1_1_U313 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_413_i_0123_reg_1040,
        din1 => weight_regfile_1_413_i_0123_reg_1040,
        din2 => weight_regfile_1_413_i_0123_reg_1040,
        din3 => weight_regfile_1_413_i_0123_reg_1040,
        din4 => weight_l2_1_q0,
        din5 => weight_regfile_1_413_i_0123_reg_1040,
        din6 => weight_regfile_1_413_i_0123_reg_1040,
        din7 => weight_regfile_1_413_i_0123_reg_1040,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_413_i_1_fu_4472_p10);

    mux_83_8_1_1_U314 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_1_q0,
        din1 => weight_regfile_1_09_i_0124_reg_1028,
        din2 => weight_regfile_1_09_i_0124_reg_1028,
        din3 => weight_regfile_1_09_i_0124_reg_1028,
        din4 => weight_regfile_1_09_i_0124_reg_1028,
        din5 => weight_regfile_1_09_i_0124_reg_1028,
        din6 => weight_regfile_1_09_i_0124_reg_1028,
        din7 => weight_regfile_1_09_i_0124_reg_1028,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_09_i_1_fu_4493_p10);

    mux_83_8_1_1_U315 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_312_i_0125_reg_1016,
        din1 => weight_regfile_1_312_i_0125_reg_1016,
        din2 => weight_regfile_1_312_i_0125_reg_1016,
        din3 => weight_l2_1_q0,
        din4 => weight_regfile_1_312_i_0125_reg_1016,
        din5 => weight_regfile_1_312_i_0125_reg_1016,
        din6 => weight_regfile_1_312_i_0125_reg_1016,
        din7 => weight_regfile_1_312_i_0125_reg_1016,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_312_i_1_fu_4514_p10);

    mux_83_8_1_1_U316 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_211_i_0126_reg_1004,
        din1 => weight_regfile_1_211_i_0126_reg_1004,
        din2 => weight_l2_1_q0,
        din3 => weight_regfile_1_211_i_0126_reg_1004,
        din4 => weight_regfile_1_211_i_0126_reg_1004,
        din5 => weight_regfile_1_211_i_0126_reg_1004,
        din6 => weight_regfile_1_211_i_0126_reg_1004,
        din7 => weight_regfile_1_211_i_0126_reg_1004,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_211_i_1_fu_4535_p10);

    mux_83_8_1_1_U317 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_110_i_0127_reg_992,
        din1 => weight_l2_1_q0,
        din2 => weight_regfile_1_110_i_0127_reg_992,
        din3 => weight_regfile_1_110_i_0127_reg_992,
        din4 => weight_regfile_1_110_i_0127_reg_992,
        din5 => weight_regfile_1_110_i_0127_reg_992,
        din6 => weight_regfile_1_110_i_0127_reg_992,
        din7 => weight_regfile_1_110_i_0127_reg_992,
        din8 => empty_56_reg_5034_pp0_iter6_reg,
        dout => weight_regfile_1_110_i_1_fu_4556_p10);

    mul_mul_12s_12s_12_4_1_U318 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ko_3_dout,
        din1 => C_L2_dout,
        ce => grp_fu_4961_ce,
        dout => grp_fu_4961_p2);

    mul_mul_12s_12s_12_4_1_U319 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_4985,
        din1 => grp_fu_4967_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_4967_p2);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U320 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln861_reg_5000,
        din1 => grp_fu_4967_p2,
        din2 => S_L2_read_reg_4990,
        din3 => trunc_ln863_reg_5005,
        ce => ap_const_logic_1,
        dout => grp_fu_4972_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter6_state11)))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter6_state11))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_981_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ci_reg_981 <= add_ln36_fu_1790_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ci_reg_981 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    write_flag102_0_reg_860_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag102_0_reg_860 <= write_flag102_1_fu_2034_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag102_0_reg_860 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag105_0_reg_827_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag105_0_reg_827 <= write_flag105_1_fu_2100_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag105_0_reg_827 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag108_0_reg_794_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag108_0_reg_794 <= write_flag108_1_fu_2166_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag108_0_reg_794 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag111_0_reg_761_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag111_0_reg_761 <= write_flag111_1_fu_2232_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag111_0_reg_761 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag114_0_reg_728_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag114_0_reg_728 <= write_flag114_1_fu_2298_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag114_0_reg_728 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag117_0_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag117_0_reg_695 <= write_flag117_1_fu_2364_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag117_0_reg_695 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag120_0_reg_662_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag120_0_reg_662 <= write_flag120_1_fu_2430_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag120_0_reg_662 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag123_0_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag123_0_reg_629 <= write_flag123_1_fu_2496_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag123_0_reg_629 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag126_0_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag126_0_reg_618 <= write_flag126_1_fu_2518_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag126_0_reg_618 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag129_0_reg_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag129_0_reg_640 <= write_flag129_1_fu_2474_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag129_0_reg_640 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag12_0_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag12_0_reg_464 <= write_flag12_1_fu_2826_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag12_0_reg_464 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag132_0_reg_651_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag132_0_reg_651 <= write_flag132_1_fu_2452_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag132_0_reg_651 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag135_0_reg_673_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag135_0_reg_673 <= write_flag135_1_fu_2408_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag135_0_reg_673 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag138_0_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag138_0_reg_684 <= write_flag138_1_fu_2386_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag138_0_reg_684 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag141_0_reg_706_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag141_0_reg_706 <= write_flag141_1_fu_2342_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag141_0_reg_706 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag144_0_reg_717_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag144_0_reg_717 <= write_flag144_1_fu_2320_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag144_0_reg_717 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag147_0_reg_739_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag147_0_reg_739 <= write_flag147_1_fu_2276_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag147_0_reg_739 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag150_0_reg_750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag150_0_reg_750 <= write_flag150_1_fu_2254_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag150_0_reg_750 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag153_0_reg_772_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag153_0_reg_772 <= write_flag153_1_fu_2210_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag153_0_reg_772 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag156_0_reg_783_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag156_0_reg_783 <= write_flag156_1_fu_2188_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag156_0_reg_783 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag159_0_reg_805_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag159_0_reg_805 <= write_flag159_1_fu_2144_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag159_0_reg_805 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag15_0_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag15_0_reg_431 <= write_flag15_1_fu_2892_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag15_0_reg_431 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag162_0_reg_816_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag162_0_reg_816 <= write_flag162_1_fu_2122_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag162_0_reg_816 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag165_0_reg_838_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag165_0_reg_838 <= write_flag165_1_fu_2078_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag165_0_reg_838 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag168_0_reg_849_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag168_0_reg_849 <= write_flag168_1_fu_2056_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag168_0_reg_849 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag171_0_reg_871_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag171_0_reg_871 <= write_flag171_1_fu_2012_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag171_0_reg_871 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag174_0_reg_882_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag174_0_reg_882 <= write_flag174_1_fu_1990_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag174_0_reg_882 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag177_0_reg_904_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag177_0_reg_904 <= write_flag177_1_fu_1946_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag177_0_reg_904 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag180_0_reg_915_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag180_0_reg_915 <= write_flag180_1_fu_1924_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag180_0_reg_915 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag183_0_reg_937_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag183_0_reg_937 <= write_flag183_1_fu_1880_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag183_0_reg_937 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag186_0_reg_948_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag186_0_reg_948 <= write_flag186_1_fu_1858_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag186_0_reg_948 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag189_0_reg_970_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag189_0_reg_970 <= write_flag189_1_fu_1814_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag189_0_reg_970 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag18_0_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag18_0_reg_398 <= write_flag18_1_fu_2958_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag18_0_reg_398 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag21_0_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag21_0_reg_365 <= write_flag21_1_fu_3024_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag21_0_reg_365 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag24_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag24_0_reg_332 <= write_flag24_1_fu_3090_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag24_0_reg_332 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag27_0_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag27_0_reg_299 <= write_flag27_1_fu_3156_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag27_0_reg_299 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag30_0_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag30_0_reg_277 <= write_flag30_1_fu_3200_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag30_0_reg_277 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag33_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag33_0_reg_288 <= write_flag33_1_fu_3178_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag33_0_reg_288 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag36_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag36_0_reg_310 <= write_flag36_1_fu_3134_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag36_0_reg_310 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag39_0_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag39_0_reg_321 <= write_flag39_1_fu_3112_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag39_0_reg_321 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag3_0_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag3_0_reg_563 <= write_flag3_1_fu_2628_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag3_0_reg_563 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag42_0_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag42_0_reg_343 <= write_flag42_1_fu_3068_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag42_0_reg_343 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag45_0_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag45_0_reg_354 <= write_flag45_1_fu_3046_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag45_0_reg_354 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag48_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag48_0_reg_376 <= write_flag48_1_fu_3002_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag48_0_reg_376 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag51_0_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag51_0_reg_387 <= write_flag51_1_fu_2980_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag51_0_reg_387 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag54_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag54_0_reg_409 <= write_flag54_1_fu_2936_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag54_0_reg_409 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag57_0_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag57_0_reg_420 <= write_flag57_1_fu_2914_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag57_0_reg_420 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag60_0_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag60_0_reg_442 <= write_flag60_1_fu_2870_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag60_0_reg_442 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag63_0_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag63_0_reg_453 <= write_flag63_1_fu_2848_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag63_0_reg_453 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag66_0_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag66_0_reg_475 <= write_flag66_1_fu_2804_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag66_0_reg_475 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag69_0_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag69_0_reg_486 <= write_flag69_1_fu_2782_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag69_0_reg_486 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag6_0_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag6_0_reg_530 <= write_flag6_1_fu_2694_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag6_0_reg_530 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag72_0_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag72_0_reg_508 <= write_flag72_1_fu_2738_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag72_0_reg_508 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag75_0_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag75_0_reg_519 <= write_flag75_1_fu_2716_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag75_0_reg_519 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag78_0_reg_541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag78_0_reg_541 <= write_flag78_1_fu_2672_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag78_0_reg_541 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag81_0_reg_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag81_0_reg_552 <= write_flag81_1_fu_2650_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag81_0_reg_552 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag84_0_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag84_0_reg_574 <= write_flag84_1_fu_2606_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag84_0_reg_574 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag87_0_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag87_0_reg_585 <= write_flag87_1_fu_2584_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag87_0_reg_585 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag90_0_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag90_0_reg_607 <= write_flag90_1_fu_2540_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag90_0_reg_607 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag93_0_reg_959_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag93_0_reg_959 <= write_flag93_1_fu_1836_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag93_0_reg_959 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag96_0_reg_926_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag96_0_reg_926 <= write_flag96_1_fu_1902_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag96_0_reg_926 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag99_0_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag99_0_reg_893 <= write_flag99_1_fu_1968_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag99_0_reg_893 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag9_0_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag9_0_reg_497 <= write_flag9_1_fu_2760_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag9_0_reg_497 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_0_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                write_flag_0_reg_596 <= write_flag_1_fu_2562_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                write_flag_0_reg_596 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                R_L2_read_reg_4985 <= R_L2_dout;
                S_L2_read_reg_4990 <= S_L2_dout;
                empty_reg_5010 <= empty_fu_1773_p1;
                trunc_ln861_reg_5000 <= trunc_ln861_fu_1765_p1;
                trunc_ln863_reg_5005 <= trunc_ln863_fu_1769_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_56_reg_5034 <= empty_56_fu_1796_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_56_reg_5034_pp0_iter1_reg <= empty_56_reg_5034;
                icmp_ln36_reg_5025 <= icmp_ln36_fu_1784_p2;
                icmp_ln36_reg_5025_pp0_iter1_reg <= icmp_ln36_reg_5025;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                empty_56_reg_5034_pp0_iter2_reg <= empty_56_reg_5034_pp0_iter1_reg;
                empty_56_reg_5034_pp0_iter3_reg <= empty_56_reg_5034_pp0_iter2_reg;
                empty_56_reg_5034_pp0_iter4_reg <= empty_56_reg_5034_pp0_iter3_reg;
                empty_56_reg_5034_pp0_iter5_reg <= empty_56_reg_5034_pp0_iter4_reg;
                empty_56_reg_5034_pp0_iter6_reg <= empty_56_reg_5034_pp0_iter5_reg;
                icmp_ln36_reg_5025_pp0_iter2_reg <= icmp_ln36_reg_5025_pp0_iter1_reg;
                icmp_ln36_reg_5025_pp0_iter3_reg <= icmp_ln36_reg_5025_pp0_iter2_reg;
                icmp_ln36_reg_5025_pp0_iter4_reg <= icmp_ln36_reg_5025_pp0_iter3_reg;
                icmp_ln36_reg_5025_pp0_iter5_reg <= icmp_ln36_reg_5025_pp0_iter4_reg;
                icmp_ln36_reg_5025_pp0_iter6_reg <= icmp_ln36_reg_5025_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    mul2_i_i_i_reg_5015(11 downto 3) <= mul2_i_i_i_fu_1777_p3(11 downto 3);
                mul4_i_i_i_reg_5020 <= grp_fu_4961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln36_reg_5025_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                weight_regfile_0_01_i_0100_reg_1316 <= weight_regfile_0_01_i_1_fu_3989_p10;
                weight_regfile_0_12_i_0103_reg_1280 <= weight_regfile_0_12_i_1_fu_4052_p10;
                weight_regfile_0_23_i_0106_reg_1244 <= weight_regfile_0_23_i_1_fu_4115_p10;
                weight_regfile_0_34_i_0109_reg_1208 <= weight_regfile_0_34_i_1_fu_4178_p10;
                weight_regfile_0_45_i_0112_reg_1172 <= weight_regfile_0_45_i_1_fu_4241_p10;
                weight_regfile_0_56_i_0115_reg_1136 <= weight_regfile_0_56_i_1_fu_4304_p10;
                weight_regfile_0_67_i_0118_reg_1100 <= weight_regfile_0_67_i_1_fu_4367_p10;
                weight_regfile_0_78_i_0121_reg_1064 <= weight_regfile_0_78_i_1_fu_4430_p10;
                weight_regfile_1_09_i_0124_reg_1028 <= weight_regfile_1_09_i_1_fu_4493_p10;
                weight_regfile_1_110_i_0127_reg_992 <= weight_regfile_1_110_i_1_fu_4556_p10;
                weight_regfile_1_211_i_0126_reg_1004 <= weight_regfile_1_211_i_1_fu_4535_p10;
                weight_regfile_1_312_i_0125_reg_1016 <= weight_regfile_1_312_i_1_fu_4514_p10;
                weight_regfile_1_413_i_0123_reg_1040 <= weight_regfile_1_413_i_1_fu_4472_p10;
                weight_regfile_1_514_i_0122_reg_1052 <= weight_regfile_1_514_i_1_fu_4451_p10;
                weight_regfile_1_615_i_0120_reg_1076 <= weight_regfile_1_615_i_1_fu_4409_p10;
                weight_regfile_1_716_i_0119_reg_1088 <= weight_regfile_1_716_i_1_fu_4388_p10;
                weight_regfile_2_017_i_0117_reg_1112 <= weight_regfile_2_017_i_1_fu_4346_p10;
                weight_regfile_2_118_i_0116_reg_1124 <= weight_regfile_2_118_i_1_fu_4325_p10;
                weight_regfile_2_219_i_0114_reg_1148 <= weight_regfile_2_219_i_1_fu_4283_p10;
                weight_regfile_2_320_i_0113_reg_1160 <= weight_regfile_2_320_i_1_fu_4262_p10;
                weight_regfile_2_421_i_0111_reg_1184 <= weight_regfile_2_421_i_1_fu_4220_p10;
                weight_regfile_2_522_i_0110_reg_1196 <= weight_regfile_2_522_i_1_fu_4199_p10;
                weight_regfile_2_623_i_0108_reg_1220 <= weight_regfile_2_623_i_1_fu_4157_p10;
                weight_regfile_2_724_i_0107_reg_1232 <= weight_regfile_2_724_i_1_fu_4136_p10;
                weight_regfile_3_025_i_0105_reg_1256 <= weight_regfile_3_025_i_1_fu_4094_p10;
                weight_regfile_3_126_i_0104_reg_1268 <= weight_regfile_3_126_i_1_fu_4073_p10;
                weight_regfile_3_227_i_0102_reg_1292 <= weight_regfile_3_227_i_1_fu_4031_p10;
                weight_regfile_3_328_i_0101_reg_1304 <= weight_regfile_3_328_i_1_fu_4010_p10;
                weight_regfile_3_429_i_099_reg_1328 <= weight_regfile_3_429_i_1_fu_3968_p10;
                weight_regfile_3_530_i_098_reg_1340 <= weight_regfile_3_530_i_1_fu_3947_p10;
                weight_regfile_3_631_i_065_reg_1736 <= weight_regfile_3_631_i_1_fu_3254_p10;
                weight_regfile_3_732_i_068_reg_1700 <= weight_regfile_3_732_i_1_fu_3317_p10;
                weight_regfile_4_033_i_071_reg_1664 <= weight_regfile_4_033_i_1_fu_3380_p10;
                weight_regfile_4_134_i_074_reg_1628 <= weight_regfile_4_134_i_1_fu_3443_p10;
                weight_regfile_4_235_i_077_reg_1592 <= weight_regfile_4_235_i_1_fu_3506_p10;
                weight_regfile_4_336_i_080_reg_1556 <= weight_regfile_4_336_i_1_fu_3569_p10;
                weight_regfile_4_437_i_083_reg_1520 <= weight_regfile_4_437_i_1_fu_3632_p10;
                weight_regfile_4_538_i_086_reg_1484 <= weight_regfile_4_538_i_1_fu_3695_p10;
                weight_regfile_4_639_i_089_reg_1448 <= weight_regfile_4_639_i_1_fu_3758_p10;
                weight_regfile_4_740_i_092_reg_1412 <= weight_regfile_4_740_i_1_fu_3821_p10;
                weight_regfile_5_041_i_095_reg_1376 <= weight_regfile_5_041_i_1_fu_3884_p10;
                weight_regfile_5_142_i_097_reg_1352 <= weight_regfile_5_142_i_1_fu_3926_p10;
                weight_regfile_5_243_i_096_reg_1364 <= weight_regfile_5_243_i_1_fu_3905_p10;
                weight_regfile_5_344_i_094_reg_1388 <= weight_regfile_5_344_i_1_fu_3863_p10;
                weight_regfile_5_445_i_093_reg_1400 <= weight_regfile_5_445_i_1_fu_3842_p10;
                weight_regfile_5_546_i_091_reg_1424 <= weight_regfile_5_546_i_1_fu_3800_p10;
                weight_regfile_5_647_i_090_reg_1436 <= weight_regfile_5_647_i_1_fu_3779_p10;
                weight_regfile_5_748_i_088_reg_1460 <= weight_regfile_5_748_i_1_fu_3737_p10;
                weight_regfile_6_049_i_087_reg_1472 <= weight_regfile_6_049_i_1_fu_3716_p10;
                weight_regfile_6_150_i_085_reg_1496 <= weight_regfile_6_150_i_1_fu_3674_p10;
                weight_regfile_6_251_i_084_reg_1508 <= weight_regfile_6_251_i_1_fu_3653_p10;
                weight_regfile_6_352_i_082_reg_1532 <= weight_regfile_6_352_i_1_fu_3611_p10;
                weight_regfile_6_453_i_081_reg_1544 <= weight_regfile_6_453_i_1_fu_3590_p10;
                weight_regfile_6_554_i_079_reg_1568 <= weight_regfile_6_554_i_1_fu_3548_p10;
                weight_regfile_6_655_i_078_reg_1580 <= weight_regfile_6_655_i_1_fu_3527_p10;
                weight_regfile_6_756_i_076_reg_1604 <= weight_regfile_6_756_i_1_fu_3485_p10;
                weight_regfile_7_057_i_075_reg_1616 <= weight_regfile_7_057_i_1_fu_3464_p10;
                weight_regfile_7_158_i_073_reg_1640 <= weight_regfile_7_158_i_1_fu_3422_p10;
                weight_regfile_7_259_i_072_reg_1652 <= weight_regfile_7_259_i_1_fu_3401_p10;
                weight_regfile_7_360_i_070_reg_1676 <= weight_regfile_7_360_i_1_fu_3359_p10;
                weight_regfile_7_461_i_069_reg_1688 <= weight_regfile_7_461_i_1_fu_3338_p10;
                weight_regfile_7_562_i_067_reg_1712 <= weight_regfile_7_562_i_1_fu_3296_p10;
                weight_regfile_7_663_i_066_reg_1724 <= weight_regfile_7_663_i_1_fu_3275_p10;
                weight_regfile_7_764_i_064_reg_1748 <= weight_regfile_7_764_i_1_fu_3233_p10;
            end if;
        end if;
    end process;
    mul2_i_i_i_reg_5015(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    C_L2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_L2_blk_n <= C_L2_empty_n;
        else 
            C_L2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    C_L2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_L2_read <= ap_const_logic_1;
        else 
            C_L2_read <= ap_const_logic_0;
        end if; 
    end process;


    R_L2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, R_L2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_L2_blk_n <= R_L2_empty_n;
        else 
            R_L2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    R_L2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_L2_read <= ap_const_logic_1;
        else 
            R_L2_read <= ap_const_logic_0;
        end if; 
    end process;


    S_L2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, S_L2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_L2_blk_n <= S_L2_empty_n;
        else 
            S_L2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_L2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_L2_read <= ap_const_logic_1;
        else 
            S_L2_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln36_fu_1790_p2 <= std_logic_vector(unsigned(ci_reg_981) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(5);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
                ap_block_state1 <= ((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter6_state11_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter6_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter6_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln36_fu_1784_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln36_fu_1784_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= weight_regfile_0_01_i_0100_reg_1316;
    ap_return_1 <= weight_regfile_0_12_i_0103_reg_1280;
    ap_return_10 <= weight_regfile_1_211_i_0126_reg_1004;
    ap_return_11 <= weight_regfile_1_312_i_0125_reg_1016;
    ap_return_12 <= weight_regfile_1_413_i_0123_reg_1040;
    ap_return_13 <= weight_regfile_1_514_i_0122_reg_1052;
    ap_return_14 <= weight_regfile_1_615_i_0120_reg_1076;
    ap_return_15 <= weight_regfile_1_716_i_0119_reg_1088;
    ap_return_16 <= weight_regfile_2_017_i_0117_reg_1112;
    ap_return_17 <= weight_regfile_2_118_i_0116_reg_1124;
    ap_return_18 <= weight_regfile_2_219_i_0114_reg_1148;
    ap_return_19 <= weight_regfile_2_320_i_0113_reg_1160;
    ap_return_2 <= weight_regfile_0_23_i_0106_reg_1244;
    ap_return_20 <= weight_regfile_2_421_i_0111_reg_1184;
    ap_return_21 <= weight_regfile_2_522_i_0110_reg_1196;
    ap_return_22 <= weight_regfile_2_623_i_0108_reg_1220;
    ap_return_23 <= weight_regfile_2_724_i_0107_reg_1232;
    ap_return_24 <= weight_regfile_3_025_i_0105_reg_1256;
    ap_return_25 <= weight_regfile_3_126_i_0104_reg_1268;
    ap_return_26 <= weight_regfile_3_227_i_0102_reg_1292;
    ap_return_27 <= weight_regfile_3_328_i_0101_reg_1304;
    ap_return_28 <= weight_regfile_3_429_i_099_reg_1328;
    ap_return_29 <= weight_regfile_3_530_i_098_reg_1340;
    ap_return_3 <= weight_regfile_0_34_i_0109_reg_1208;
    ap_return_30 <= weight_regfile_3_631_i_065_reg_1736;
    ap_return_31 <= weight_regfile_3_732_i_068_reg_1700;
    ap_return_32 <= weight_regfile_4_033_i_071_reg_1664;
    ap_return_33 <= weight_regfile_4_134_i_074_reg_1628;
    ap_return_34 <= weight_regfile_4_235_i_077_reg_1592;
    ap_return_35 <= weight_regfile_4_336_i_080_reg_1556;
    ap_return_36 <= weight_regfile_4_437_i_083_reg_1520;
    ap_return_37 <= weight_regfile_4_538_i_086_reg_1484;
    ap_return_38 <= weight_regfile_4_639_i_089_reg_1448;
    ap_return_39 <= weight_regfile_4_740_i_092_reg_1412;
    ap_return_4 <= weight_regfile_0_45_i_0112_reg_1172;
    ap_return_40 <= weight_regfile_5_041_i_095_reg_1376;
    ap_return_41 <= weight_regfile_5_142_i_097_reg_1352;
    ap_return_42 <= weight_regfile_5_243_i_096_reg_1364;
    ap_return_43 <= weight_regfile_5_344_i_094_reg_1388;
    ap_return_44 <= weight_regfile_5_445_i_093_reg_1400;
    ap_return_45 <= weight_regfile_5_546_i_091_reg_1424;
    ap_return_46 <= weight_regfile_5_647_i_090_reg_1436;
    ap_return_47 <= weight_regfile_5_748_i_088_reg_1460;
    ap_return_48 <= weight_regfile_6_049_i_087_reg_1472;
    ap_return_49 <= weight_regfile_6_150_i_085_reg_1496;
    ap_return_5 <= weight_regfile_0_56_i_0115_reg_1136;
    ap_return_50 <= weight_regfile_6_251_i_084_reg_1508;
    ap_return_51 <= weight_regfile_6_352_i_082_reg_1532;
    ap_return_52 <= weight_regfile_6_453_i_081_reg_1544;
    ap_return_53 <= weight_regfile_6_554_i_079_reg_1568;
    ap_return_54 <= weight_regfile_6_655_i_078_reg_1580;
    ap_return_55 <= weight_regfile_6_756_i_076_reg_1604;
    ap_return_56 <= weight_regfile_7_057_i_075_reg_1616;
    ap_return_57 <= weight_regfile_7_158_i_073_reg_1640;
    ap_return_58 <= weight_regfile_7_259_i_072_reg_1652;
    ap_return_59 <= weight_regfile_7_360_i_070_reg_1676;
    ap_return_6 <= weight_regfile_0_67_i_0118_reg_1100;
    ap_return_60 <= weight_regfile_7_461_i_069_reg_1688;
    ap_return_61 <= weight_regfile_7_562_i_067_reg_1712;
    ap_return_62 <= weight_regfile_7_663_i_066_reg_1724;
    ap_return_63 <= weight_regfile_7_764_i_064_reg_1748;
    ap_return_7 <= weight_regfile_0_78_i_0121_reg_1064;
    ap_return_8 <= weight_regfile_1_09_i_0124_reg_1028;
    ap_return_9 <= weight_regfile_1_110_i_0127_reg_992;
    ci_cast_cast_i_i_i_fu_1800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_56_fu_1796_p1),12));

    co_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_blk_n <= co_empty_n;
        else 
            co_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    co_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_blk_n <= co_out_full_n;
        else 
            co_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    co_out_din <= co_dout;

    co_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_write <= ap_const_logic_1;
        else 
            co_out_write <= ap_const_logic_0;
        end if; 
    end process;


    co_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_read <= ap_const_logic_1;
        else 
            co_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_56_fu_1796_p1 <= ci_reg_981(3 - 1 downto 0);
    empty_fu_1773_p1 <= co_dout(9 - 1 downto 0);

    grp_fu_4961_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))))) then 
            grp_fu_4961_ce <= ap_const_logic_0;
        else 
            grp_fu_4961_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_4967_p1 <= std_logic_vector(unsigned(tmp_fu_1804_p2) + unsigned(mul2_i_i_i_reg_5015));
    icmp_ln36_fu_1784_p2 <= "1" when (ci_reg_981 = ap_const_lv4_8) else "0";
    idxprom13_i_i_i_fu_3222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_4972_p4),64));

    ko_3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_blk_n <= ko_3_empty_n;
        else 
            ko_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_3_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_3_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_out_blk_n <= ko_3_out_full_n;
        else 
            ko_3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ko_3_out_din <= trunc_ln855_fu_1760_p0(11 - 1 downto 0);

    ko_3_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_out_write <= ap_const_logic_1;
        else 
            ko_3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ko_3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_read <= ap_const_logic_1;
        else 
            ko_3_read <= ap_const_logic_0;
        end if; 
    end process;

    mul2_i_i_i_fu_1777_p3 <= (empty_reg_5010 & ap_const_lv3_0);

    ro_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_blk_n <= ro_empty_n;
        else 
            ro_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ro_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_blk_n <= ro_out_full_n;
        else 
            ro_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ro_out_din <= ro_dout;

    ro_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_write <= ap_const_logic_1;
        else 
            ro_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ro_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_read <= ap_const_logic_1;
        else 
            ro_read <= ap_const_logic_0;
        end if; 
    end process;


    so_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_blk_n <= so_empty_n;
        else 
            so_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    so_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_blk_n <= so_out_full_n;
        else 
            so_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    so_out_din <= so_dout;

    so_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_write <= ap_const_logic_1;
        else 
            so_out_write <= ap_const_logic_0;
        end if; 
    end process;


    so_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_read <= ap_const_logic_1;
        else 
            so_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_1804_p2 <= std_logic_vector(signed(mul4_i_i_i_reg_5020) + signed(ci_cast_cast_i_i_i_fu_1800_p1));
    trunc_ln855_fu_1760_p0 <= ko_3_dout;
    trunc_ln861_fu_1765_p1 <= ro_dout(12 - 1 downto 0);
    trunc_ln863_fu_1769_p1 <= so_dout(12 - 1 downto 0);
    weight_l2_0_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_0_ce0 <= ap_const_logic_1;
        else 
            weight_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_1_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_1_ce0 <= ap_const_logic_1;
        else 
            weight_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_2_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_2_ce0 <= ap_const_logic_1;
        else 
            weight_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_3_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_3_ce0 <= ap_const_logic_1;
        else 
            weight_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_4_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_4_ce0 <= ap_const_logic_1;
        else 
            weight_l2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_5_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_5_ce0 <= ap_const_logic_1;
        else 
            weight_l2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_6_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_6_ce0 <= ap_const_logic_1;
        else 
            weight_l2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_7_address0 <= idxprom13_i_i_i_fu_3222_p1(12 - 1 downto 0);

    weight_l2_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_l2_7_ce0 <= ap_const_logic_1;
        else 
            weight_l2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
