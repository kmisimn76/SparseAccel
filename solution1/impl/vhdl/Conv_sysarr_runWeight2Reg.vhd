-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runWeight2Reg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    param_dout : IN STD_LOGIC_VECTOR (1183 downto 0);
    param_empty_n : IN STD_LOGIC;
    param_read : OUT STD_LOGIC;
    ko_1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    ko_1_empty_n : IN STD_LOGIC;
    ko_1_read : OUT STD_LOGIC;
    co_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    co_empty_n : IN STD_LOGIC;
    co_read : OUT STD_LOGIC;
    ro_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ro_empty_n : IN STD_LOGIC;
    ro_read : OUT STD_LOGIC;
    so_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    so_empty_n : IN STD_LOGIC;
    so_read : OUT STD_LOGIC;
    weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_0_ce0 : OUT STD_LOGIC;
    weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_1_ce0 : OUT STD_LOGIC;
    weight_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_2_ce0 : OUT STD_LOGIC;
    weight_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_3_ce0 : OUT STD_LOGIC;
    weight_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    param_out_din : OUT STD_LOGIC_VECTOR (1183 downto 0);
    param_out_full_n : IN STD_LOGIC;
    param_out_write : OUT STD_LOGIC;
    ko_1_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    ko_1_out_full_n : IN STD_LOGIC;
    ko_1_out_write : OUT STD_LOGIC;
    co_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    co_out_full_n : IN STD_LOGIC;
    co_out_write : OUT STD_LOGIC;
    ro_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ro_out_full_n : IN STD_LOGIC;
    ro_out_write : OUT STD_LOGIC;
    so_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    so_out_full_n : IN STD_LOGIC;
    so_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Conv_sysarr_runWeight2Reg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001011";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101011";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal param_blk_n : STD_LOGIC;
    signal ko_1_blk_n : STD_LOGIC;
    signal co_blk_n : STD_LOGIC;
    signal ro_blk_n : STD_LOGIC;
    signal so_blk_n : STD_LOGIC;
    signal param_out_blk_n : STD_LOGIC;
    signal ko_1_out_blk_n : STD_LOGIC;
    signal co_out_blk_n : STD_LOGIC;
    signal ro_out_blk_n : STD_LOGIC;
    signal so_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal empty_fu_430_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_reg_1574 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_65_fu_434_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_65_reg_1579 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast7_reg_1589 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast1_reg_1594 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_66_fu_468_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_66_reg_1599 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul2_i_i_i_fu_552_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul2_i_i_i_reg_1604 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_1342_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul4_i_i_i_reg_1609 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln69_fu_565_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln69_reg_1617 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal empty_67_fu_571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_67_reg_1622 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln69_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal weight_l2_0_load_reg_1683 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal weight_l2_1_load_reg_1688 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_reg_1693 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_reg_1698 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln70_fu_698_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ci_reg_355 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln70_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ki_reg_366 : STD_LOGIC_VECTOR (2 downto 0);
    signal idxprom_i_i_i_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_regfile_3_316_i_016_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_316_i_3_fu_1198_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln74_fu_704_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag_0_fu_110 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_3_fu_1042_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_0_fu_114 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_3_fu_1211_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_215_i_017_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_215_i_3_fu_1224_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_01_i_018_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_01_i_3_fu_1055_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag42_0_fu_126 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag42_3_fu_1237_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_114_i_019_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_114_i_3_fu_1250_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag3_0_fu_134 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag3_3_fu_1068_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_0_fu_138 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_3_fu_1263_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_013_i_020_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_013_i_3_fu_1276_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_12_i_021_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_12_i_3_fu_1081_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag36_0_fu_150 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag36_3_fu_1289_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_312_i_022_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_312_i_3_fu_730_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag6_0_fu_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag6_3_fu_1094_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_0_fu_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_3_fu_743_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_211_i_023_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_211_i_3_fu_756_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_23_i_024_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_23_i_3_fu_1107_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag30_0_fu_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag30_3_fu_769_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_110_i_025_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_110_i_3_fu_782_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag9_0_fu_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag9_3_fu_1120_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_0_fu_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_3_fu_795_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_09_i_026_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_09_i_3_fu_808_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_34_i_027_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_34_i_3_fu_1133_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag24_0_fu_198 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag24_3_fu_821_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_38_i_028_fu_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_38_i_3_fu_886_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag12_0_fu_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag12_3_fu_899_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_0_fu_210 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_3_fu_912_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_27_i_029_fu_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_27_i_3_fu_925_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_05_i_030_fu_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_05_i_3_fu_938_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag18_0_fu_222 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag18_3_fu_951_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_16_i_031_fu_226 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_16_i_3_fu_964_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag15_0_fu_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag15_3_fu_977_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln357_fu_425_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ci_cast_i_i_i_cast_fu_575_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_579_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_fu_579_p2 : signal is "no";
    signal grp_fu_1353_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal weight_regfile_1_16_i_fu_708_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_regfile_1_16_i_fu_708_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1342_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1348_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_1342_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component Conv_sysarr_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_mux_42_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sysarr_mul_mul_12s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    mux_42_8_1_1_U109 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_0_load_reg_1683,
        din1 => weight_l2_1_load_reg_1688,
        din2 => weight_l2_2_load_reg_1693,
        din3 => weight_l2_3_load_reg_1698,
        din4 => weight_regfile_1_16_i_fu_708_p5,
        dout => weight_regfile_1_16_i_fu_708_p6);

    mux_42_8_1_1_U110 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_312_i_022_fu_154,
        din1 => weight_regfile_2_312_i_022_fu_154,
        din2 => weight_regfile_2_312_i_022_fu_154,
        din3 => weight_regfile_1_16_i_fu_708_p6,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_2_312_i_3_fu_730_p6);

    mux_42_1_1_1_U111 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag33_0_fu_162,
        din1 => write_flag33_0_fu_162,
        din2 => write_flag33_0_fu_162,
        din3 => ap_const_lv1_1,
        din4 => empty_67_reg_1622,
        dout => write_flag33_3_fu_743_p6);

    mux_42_8_1_1_U112 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_211_i_023_fu_166,
        din1 => weight_regfile_2_211_i_023_fu_166,
        din2 => weight_regfile_1_16_i_fu_708_p6,
        din3 => weight_regfile_2_211_i_023_fu_166,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_2_211_i_3_fu_756_p6);

    mux_42_1_1_1_U113 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag30_0_fu_174,
        din1 => write_flag30_0_fu_174,
        din2 => ap_const_lv1_1,
        din3 => write_flag30_0_fu_174,
        din4 => empty_67_reg_1622,
        dout => write_flag30_3_fu_769_p6);

    mux_42_8_1_1_U114 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_110_i_025_fu_178,
        din1 => weight_regfile_1_16_i_fu_708_p6,
        din2 => weight_regfile_2_110_i_025_fu_178,
        din3 => weight_regfile_2_110_i_025_fu_178,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_2_110_i_3_fu_782_p6);

    mux_42_1_1_1_U115 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag27_0_fu_186,
        din1 => ap_const_lv1_1,
        din2 => write_flag27_0_fu_186,
        din3 => write_flag27_0_fu_186,
        din4 => empty_67_reg_1622,
        dout => write_flag27_3_fu_795_p6);

    mux_42_8_1_1_U116 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_708_p6,
        din1 => weight_regfile_2_09_i_026_fu_190,
        din2 => weight_regfile_2_09_i_026_fu_190,
        din3 => weight_regfile_2_09_i_026_fu_190,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_2_09_i_3_fu_808_p6);

    mux_42_1_1_1_U117 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag24_0_fu_198,
        din2 => write_flag24_0_fu_198,
        din3 => write_flag24_0_fu_198,
        din4 => empty_67_reg_1622,
        dout => write_flag24_3_fu_821_p6);

    mux_42_8_1_1_U118 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_38_i_028_fu_202,
        din1 => weight_regfile_1_38_i_028_fu_202,
        din2 => weight_regfile_1_38_i_028_fu_202,
        din3 => weight_regfile_1_16_i_fu_708_p6,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_1_38_i_3_fu_886_p6);

    mux_42_1_1_1_U119 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag12_0_fu_206,
        din2 => write_flag12_0_fu_206,
        din3 => write_flag12_0_fu_206,
        din4 => empty_67_reg_1622,
        dout => write_flag12_3_fu_899_p6);

    mux_42_1_1_1_U120 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag21_0_fu_210,
        din1 => write_flag21_0_fu_210,
        din2 => write_flag21_0_fu_210,
        din3 => ap_const_lv1_1,
        din4 => empty_67_reg_1622,
        dout => write_flag21_3_fu_912_p6);

    mux_42_8_1_1_U121 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_27_i_029_fu_214,
        din1 => weight_regfile_1_27_i_029_fu_214,
        din2 => weight_regfile_1_16_i_fu_708_p6,
        din3 => weight_regfile_1_27_i_029_fu_214,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_1_27_i_3_fu_925_p6);

    mux_42_8_1_1_U122 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_708_p6,
        din1 => weight_regfile_1_05_i_030_fu_218,
        din2 => weight_regfile_1_05_i_030_fu_218,
        din3 => weight_regfile_1_05_i_030_fu_218,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_1_05_i_3_fu_938_p6);

    mux_42_1_1_1_U123 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag18_0_fu_222,
        din1 => write_flag18_0_fu_222,
        din2 => ap_const_lv1_1,
        din3 => write_flag18_0_fu_222,
        din4 => empty_67_reg_1622,
        dout => write_flag18_3_fu_951_p6);

    mux_42_8_1_1_U124 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_031_fu_226,
        din1 => weight_regfile_1_16_i_fu_708_p6,
        din2 => weight_regfile_1_16_i_031_fu_226,
        din3 => weight_regfile_1_16_i_031_fu_226,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_1_16_i_3_fu_964_p6);

    mux_42_1_1_1_U125 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag15_0_fu_230,
        din1 => ap_const_lv1_1,
        din2 => write_flag15_0_fu_230,
        din3 => write_flag15_0_fu_230,
        din4 => empty_67_reg_1622,
        dout => write_flag15_3_fu_977_p6);

    mux_42_1_1_1_U126 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_0_fu_110,
        din2 => write_flag_0_fu_110,
        din3 => write_flag_0_fu_110,
        din4 => empty_67_reg_1622,
        dout => write_flag_3_fu_1042_p6);

    mux_42_8_1_1_U127 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_708_p6,
        din1 => weight_regfile_0_01_i_018_fu_122,
        din2 => weight_regfile_0_01_i_018_fu_122,
        din3 => weight_regfile_0_01_i_018_fu_122,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_0_01_i_3_fu_1055_p6);

    mux_42_1_1_1_U128 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag3_0_fu_134,
        din1 => ap_const_lv1_1,
        din2 => write_flag3_0_fu_134,
        din3 => write_flag3_0_fu_134,
        din4 => empty_67_reg_1622,
        dout => write_flag3_3_fu_1068_p6);

    mux_42_8_1_1_U129 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_12_i_021_fu_146,
        din1 => weight_regfile_1_16_i_fu_708_p6,
        din2 => weight_regfile_0_12_i_021_fu_146,
        din3 => weight_regfile_0_12_i_021_fu_146,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_0_12_i_3_fu_1081_p6);

    mux_42_1_1_1_U130 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag6_0_fu_158,
        din1 => write_flag6_0_fu_158,
        din2 => ap_const_lv1_1,
        din3 => write_flag6_0_fu_158,
        din4 => empty_67_reg_1622,
        dout => write_flag6_3_fu_1094_p6);

    mux_42_8_1_1_U131 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_23_i_024_fu_170,
        din1 => weight_regfile_0_23_i_024_fu_170,
        din2 => weight_regfile_1_16_i_fu_708_p6,
        din3 => weight_regfile_0_23_i_024_fu_170,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_0_23_i_3_fu_1107_p6);

    mux_42_1_1_1_U132 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag9_0_fu_182,
        din1 => write_flag9_0_fu_182,
        din2 => write_flag9_0_fu_182,
        din3 => ap_const_lv1_1,
        din4 => empty_67_reg_1622,
        dout => write_flag9_3_fu_1120_p6);

    mux_42_8_1_1_U133 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_34_i_027_fu_194,
        din1 => weight_regfile_0_34_i_027_fu_194,
        din2 => weight_regfile_0_34_i_027_fu_194,
        din3 => weight_regfile_1_16_i_fu_708_p6,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_0_34_i_3_fu_1133_p6);

    mux_42_8_1_1_U134 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_316_i_016_fu_106,
        din1 => weight_regfile_3_316_i_016_fu_106,
        din2 => weight_regfile_3_316_i_016_fu_106,
        din3 => weight_regfile_1_16_i_fu_708_p6,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_3_316_i_3_fu_1198_p6);

    mux_42_1_1_1_U135 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag45_0_fu_114,
        din1 => write_flag45_0_fu_114,
        din2 => write_flag45_0_fu_114,
        din3 => ap_const_lv1_1,
        din4 => empty_67_reg_1622,
        dout => write_flag45_3_fu_1211_p6);

    mux_42_8_1_1_U136 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_215_i_017_fu_118,
        din1 => weight_regfile_3_215_i_017_fu_118,
        din2 => weight_regfile_1_16_i_fu_708_p6,
        din3 => weight_regfile_3_215_i_017_fu_118,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_3_215_i_3_fu_1224_p6);

    mux_42_1_1_1_U137 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag42_0_fu_126,
        din1 => write_flag42_0_fu_126,
        din2 => ap_const_lv1_1,
        din3 => write_flag42_0_fu_126,
        din4 => empty_67_reg_1622,
        dout => write_flag42_3_fu_1237_p6);

    mux_42_8_1_1_U138 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_114_i_019_fu_130,
        din1 => weight_regfile_1_16_i_fu_708_p6,
        din2 => weight_regfile_3_114_i_019_fu_130,
        din3 => weight_regfile_3_114_i_019_fu_130,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_3_114_i_3_fu_1250_p6);

    mux_42_1_1_1_U139 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag39_0_fu_138,
        din1 => ap_const_lv1_1,
        din2 => write_flag39_0_fu_138,
        din3 => write_flag39_0_fu_138,
        din4 => empty_67_reg_1622,
        dout => write_flag39_3_fu_1263_p6);

    mux_42_8_1_1_U140 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_16_i_fu_708_p6,
        din1 => weight_regfile_3_013_i_020_fu_142,
        din2 => weight_regfile_3_013_i_020_fu_142,
        din3 => weight_regfile_3_013_i_020_fu_142,
        din4 => empty_67_reg_1622,
        dout => weight_regfile_3_013_i_3_fu_1276_p6);

    mux_42_1_1_1_U141 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag36_0_fu_150,
        din2 => write_flag36_0_fu_150,
        din3 => write_flag36_0_fu_150,
        din4 => empty_67_reg_1622,
        dout => write_flag36_3_fu_1289_p6);

    mul_mul_12s_12s_12_4_1_U142 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ko_1_dout,
        din1 => grp_fu_1342_p1,
        ce => grp_fu_1342_ce,
        dout => grp_fu_1342_p2);

    mul_mul_12s_12s_12_4_1_U143 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_cast7_reg_1589,
        din1 => grp_fu_1348_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1348_p2);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U144 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_reg_1574,
        din1 => grp_fu_1348_p2,
        din2 => p_cast1_reg_1594,
        din3 => empty_65_reg_1579,
        ce => ap_const_logic_1,
        dout => grp_fu_1353_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_559_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ci_reg_355 <= add_ln69_reg_1617;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ci_reg_355 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ki_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                ki_reg_366 <= add_ln70_fu_698_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ki_reg_366 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    write_flag12_0_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_1) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag12_0_fu_206 <= write_flag12_3_fu_899_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag12_0_fu_206 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag15_0_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_1) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag15_0_fu_230 <= write_flag15_3_fu_977_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag15_0_fu_230 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag18_0_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_1) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag18_0_fu_222 <= write_flag18_3_fu_951_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag18_0_fu_222 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag21_0_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_1) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag21_0_fu_210 <= write_flag21_3_fu_912_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag21_0_fu_210 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag24_0_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_2) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag24_0_fu_198 <= write_flag24_3_fu_821_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag24_0_fu_198 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag27_0_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_2) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag27_0_fu_186 <= write_flag27_3_fu_795_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag27_0_fu_186 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag30_0_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_2) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag30_0_fu_174 <= write_flag30_3_fu_769_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag30_0_fu_174 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag33_0_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_2) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag33_0_fu_162 <= write_flag33_3_fu_743_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag33_0_fu_162 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag36_0_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_3) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag36_0_fu_150 <= write_flag36_3_fu_1289_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag36_0_fu_150 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag39_0_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_3) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag39_0_fu_138 <= write_flag39_3_fu_1263_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag39_0_fu_138 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag3_0_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_0) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag3_0_fu_134 <= write_flag3_3_fu_1068_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag3_0_fu_134 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag42_0_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_3) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag42_0_fu_126 <= write_flag42_3_fu_1237_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag42_0_fu_126 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag45_0_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_3) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag45_0_fu_114 <= write_flag45_3_fu_1211_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag45_0_fu_114 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag6_0_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_0) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag6_0_fu_158 <= write_flag6_3_fu_1094_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag6_0_fu_158 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag9_0_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_0) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag9_0_fu_182 <= write_flag9_3_fu_1120_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag9_0_fu_182 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_0_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_0) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                write_flag_0_fu_110 <= write_flag_3_fu_1042_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag_0_fu_110 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln69_reg_1617 <= add_ln69_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_65_reg_1579 <= empty_65_fu_434_p1;
                empty_66_reg_1599 <= empty_66_fu_468_p1;
                empty_reg_1574 <= empty_fu_430_p1;
                p_cast1_reg_1594 <= param_dout(587 downto 576);
                p_cast7_reg_1589 <= param_dout(555 downto 544);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_559_p2 = ap_const_lv1_0))) then
                empty_67_reg_1622 <= empty_67_fu_571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    mul2_i_i_i_reg_1604(11 downto 2) <= mul2_i_i_i_fu_552_p3(11 downto 2);
                mul4_i_i_i_reg_1609 <= grp_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                weight_l2_0_load_reg_1683 <= weight_l2_0_q0;
                weight_l2_1_load_reg_1688 <= weight_l2_1_q0;
                weight_l2_2_load_reg_1693 <= weight_l2_2_q0;
                weight_l2_3_load_reg_1698 <= weight_l2_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_0) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                weight_regfile_0_01_i_018_fu_122 <= weight_regfile_0_01_i_3_fu_1055_p6;
                weight_regfile_0_12_i_021_fu_146 <= weight_regfile_0_12_i_3_fu_1081_p6;
                weight_regfile_0_23_i_024_fu_170 <= weight_regfile_0_23_i_3_fu_1107_p6;
                weight_regfile_0_34_i_027_fu_194 <= weight_regfile_0_34_i_3_fu_1133_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_1) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                weight_regfile_1_05_i_030_fu_218 <= weight_regfile_1_05_i_3_fu_938_p6;
                weight_regfile_1_16_i_031_fu_226 <= weight_regfile_1_16_i_3_fu_964_p6;
                weight_regfile_1_27_i_029_fu_214 <= weight_regfile_1_27_i_3_fu_925_p6;
                weight_regfile_1_38_i_028_fu_202 <= weight_regfile_1_38_i_3_fu_886_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_2) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                weight_regfile_2_09_i_026_fu_190 <= weight_regfile_2_09_i_3_fu_808_p6;
                weight_regfile_2_110_i_025_fu_178 <= weight_regfile_2_110_i_3_fu_782_p6;
                weight_regfile_2_211_i_023_fu_166 <= weight_regfile_2_211_i_3_fu_756_p6;
                weight_regfile_2_312_i_022_fu_154 <= weight_regfile_2_312_i_3_fu_730_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln74_fu_704_p1 = ap_const_lv2_3) and (icmp_ln70_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                weight_regfile_3_013_i_020_fu_142 <= weight_regfile_3_013_i_3_fu_1276_p6;
                weight_regfile_3_114_i_019_fu_130 <= weight_regfile_3_114_i_3_fu_1250_p6;
                weight_regfile_3_215_i_017_fu_118 <= weight_regfile_3_215_i_3_fu_1224_p6;
                weight_regfile_3_316_i_016_fu_106 <= weight_regfile_3_316_i_3_fu_1198_p6;
            end if;
        end if;
    end process;
    mul2_i_i_i_reg_1604(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n, ap_CS_fsm_state5, icmp_ln69_fu_559_p2, ap_CS_fsm_state13, icmp_ln70_fu_692_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_559_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln70_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln69_fu_565_p2 <= std_logic_vector(unsigned(ci_reg_355) + unsigned(ap_const_lv3_1));
    add_ln70_fu_698_p2 <= std_logic_vector(unsigned(ki_reg_366) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
                ap_block_state1 <= ((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, icmp_ln69_fu_559_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_559_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln69_fu_559_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_559_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= weight_regfile_0_01_i_018_fu_122;
    ap_return_1 <= weight_regfile_0_12_i_021_fu_146;
    ap_return_10 <= weight_regfile_2_211_i_023_fu_166;
    ap_return_11 <= weight_regfile_2_312_i_022_fu_154;
    ap_return_12 <= weight_regfile_3_013_i_020_fu_142;
    ap_return_13 <= weight_regfile_3_114_i_019_fu_130;
    ap_return_14 <= weight_regfile_3_215_i_017_fu_118;
    ap_return_15 <= weight_regfile_3_316_i_016_fu_106;
    ap_return_2 <= weight_regfile_0_23_i_024_fu_170;
    ap_return_3 <= weight_regfile_0_34_i_027_fu_194;
    ap_return_4 <= weight_regfile_1_05_i_030_fu_218;
    ap_return_5 <= weight_regfile_1_16_i_031_fu_226;
    ap_return_6 <= weight_regfile_1_27_i_029_fu_214;
    ap_return_7 <= weight_regfile_1_38_i_028_fu_202;
    ap_return_8 <= weight_regfile_2_09_i_026_fu_190;
    ap_return_9 <= weight_regfile_2_110_i_025_fu_178;
    ci_cast_i_i_i_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_67_fu_571_p1),12));

    co_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_blk_n <= co_empty_n;
        else 
            co_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    co_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_blk_n <= co_out_full_n;
        else 
            co_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    co_out_din <= co_dout;

    co_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_write <= ap_const_logic_1;
        else 
            co_out_write <= ap_const_logic_0;
        end if; 
    end process;


    co_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_read <= ap_const_logic_1;
        else 
            co_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_65_fu_434_p1 <= so_dout(12 - 1 downto 0);
    empty_66_fu_468_p1 <= co_dout(10 - 1 downto 0);
    empty_67_fu_571_p1 <= ci_reg_355(2 - 1 downto 0);
    empty_fu_430_p1 <= ro_dout(12 - 1 downto 0);

    grp_fu_1342_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_1342_ce <= ap_const_logic_1;
        else 
            grp_fu_1342_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1342_p1 <= param_dout(395 downto 384);
    grp_fu_1348_p1 <= std_logic_vector(unsigned(tmp_fu_579_p2) + unsigned(mul2_i_i_i_reg_1604));
    icmp_ln69_fu_559_p2 <= "1" when (ci_reg_355 = ap_const_lv3_4) else "0";
    icmp_ln70_fu_692_p2 <= "1" when (ki_reg_366 = ap_const_lv3_4) else "0";
    idxprom_i_i_i_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1353_p4),64));

    ko_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_blk_n <= ko_1_empty_n;
        else 
            ko_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_1_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_1_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_out_blk_n <= ko_1_out_full_n;
        else 
            ko_1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ko_1_out_din <= trunc_ln357_fu_425_p0(11 - 1 downto 0);

    ko_1_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_out_write <= ap_const_logic_1;
        else 
            ko_1_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ko_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_read <= ap_const_logic_1;
        else 
            ko_1_read <= ap_const_logic_0;
        end if; 
    end process;

    mul2_i_i_i_fu_552_p3 <= (empty_66_reg_1599 & ap_const_lv2_0);

    param_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_blk_n <= param_empty_n;
        else 
            param_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    param_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_out_blk_n <= param_out_full_n;
        else 
            param_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    param_out_din <= param_dout;

    param_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_out_write <= ap_const_logic_1;
        else 
            param_out_write <= ap_const_logic_0;
        end if; 
    end process;


    param_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            param_read <= ap_const_logic_1;
        else 
            param_read <= ap_const_logic_0;
        end if; 
    end process;


    ro_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_blk_n <= ro_empty_n;
        else 
            ro_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ro_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_blk_n <= ro_out_full_n;
        else 
            ro_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ro_out_din <= ro_dout;

    ro_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_write <= ap_const_logic_1;
        else 
            ro_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ro_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_read <= ap_const_logic_1;
        else 
            ro_read <= ap_const_logic_0;
        end if; 
    end process;


    so_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_blk_n <= so_empty_n;
        else 
            so_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    so_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_blk_n <= so_out_full_n;
        else 
            so_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    so_out_din <= so_dout;

    so_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_write <= ap_const_logic_1;
        else 
            so_out_write <= ap_const_logic_0;
        end if; 
    end process;


    so_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, param_empty_n, ko_1_empty_n, co_empty_n, ro_empty_n, so_empty_n, param_out_full_n, ko_1_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_1_out_full_n = ap_const_logic_0) or (param_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (param_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_read <= ap_const_logic_1;
        else 
            so_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_579_p2 <= std_logic_vector(signed(mul4_i_i_i_reg_1609) + signed(ci_cast_i_i_i_cast_fu_575_p1));
    trunc_ln357_fu_425_p0 <= ko_1_dout;
    trunc_ln74_fu_704_p1 <= ki_reg_366(2 - 1 downto 0);
    weight_l2_0_address0 <= idxprom_i_i_i_fu_685_p1(12 - 1 downto 0);

    weight_l2_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_0_ce0 <= ap_const_logic_1;
        else 
            weight_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_1_address0 <= idxprom_i_i_i_fu_685_p1(12 - 1 downto 0);

    weight_l2_1_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_1_ce0 <= ap_const_logic_1;
        else 
            weight_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_2_address0 <= idxprom_i_i_i_fu_685_p1(12 - 1 downto 0);

    weight_l2_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_2_ce0 <= ap_const_logic_1;
        else 
            weight_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_3_address0 <= idxprom_i_i_i_fu_685_p1(12 - 1 downto 0);

    weight_l2_3_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_3_ce0 <= ap_const_logic_1;
        else 
            weight_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_regfile_1_16_i_fu_708_p5 <= ki_reg_366(2 - 1 downto 0);
end behav;
