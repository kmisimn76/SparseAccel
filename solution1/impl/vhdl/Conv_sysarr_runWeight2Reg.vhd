-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runWeight2Reg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_L2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    C_L2_empty_n : IN STD_LOGIC;
    C_L2_read : OUT STD_LOGIC;
    R_L2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    R_L2_empty_n : IN STD_LOGIC;
    R_L2_read : OUT STD_LOGIC;
    S_L2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    S_L2_empty_n : IN STD_LOGIC;
    S_L2_read : OUT STD_LOGIC;
    ko_3_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    ko_3_empty_n : IN STD_LOGIC;
    ko_3_read : OUT STD_LOGIC;
    co_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    co_empty_n : IN STD_LOGIC;
    co_read : OUT STD_LOGIC;
    ro_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ro_empty_n : IN STD_LOGIC;
    ro_read : OUT STD_LOGIC;
    so_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    so_empty_n : IN STD_LOGIC;
    so_read : OUT STD_LOGIC;
    weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_0_ce0 : OUT STD_LOGIC;
    weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_0_ce1 : OUT STD_LOGIC;
    weight_l2_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_1_ce0 : OUT STD_LOGIC;
    weight_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_1_ce1 : OUT STD_LOGIC;
    weight_l2_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_2_ce0 : OUT STD_LOGIC;
    weight_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_2_ce1 : OUT STD_LOGIC;
    weight_l2_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_3_ce0 : OUT STD_LOGIC;
    weight_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_3_ce1 : OUT STD_LOGIC;
    weight_l2_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_4_ce0 : OUT STD_LOGIC;
    weight_l2_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_4_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_4_ce1 : OUT STD_LOGIC;
    weight_l2_4_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_5_ce0 : OUT STD_LOGIC;
    weight_l2_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_5_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_5_ce1 : OUT STD_LOGIC;
    weight_l2_5_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_6_ce0 : OUT STD_LOGIC;
    weight_l2_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_6_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_6_ce1 : OUT STD_LOGIC;
    weight_l2_6_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_7_ce0 : OUT STD_LOGIC;
    weight_l2_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_7_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_7_ce1 : OUT STD_LOGIC;
    weight_l2_7_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ko_3_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    ko_3_out_full_n : IN STD_LOGIC;
    ko_3_out_write : OUT STD_LOGIC;
    co_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    co_out_full_n : IN STD_LOGIC;
    co_out_write : OUT STD_LOGIC;
    ro_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ro_out_full_n : IN STD_LOGIC;
    ro_out_write : OUT STD_LOGIC;
    so_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    so_out_full_n : IN STD_LOGIC;
    so_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_49 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_50 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_51 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_52 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_53 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_54 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_55 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_56 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_57 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_58 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_59 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_60 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_61 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_62 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_63 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Conv_sysarr_runWeight2Reg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal C_L2_blk_n : STD_LOGIC;
    signal R_L2_blk_n : STD_LOGIC;
    signal S_L2_blk_n : STD_LOGIC;
    signal ko_3_blk_n : STD_LOGIC;
    signal co_blk_n : STD_LOGIC;
    signal ro_blk_n : STD_LOGIC;
    signal so_blk_n : STD_LOGIC;
    signal ko_3_out_blk_n : STD_LOGIC;
    signal co_out_blk_n : STD_LOGIC;
    signal ro_out_blk_n : STD_LOGIC;
    signal so_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal R_L2_read_reg_1376 : STD_LOGIC_VECTOR (11 downto 0);
    signal S_L2_read_reg_1388 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln746_fu_744_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln746_reg_1405 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln748_fu_748_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln748_reg_1417 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_752_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_reg_1429 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_fu_756_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_reg_1434 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_1263_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul4_i_i_i_reg_1444 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal weight_l2_0_load_reg_1574 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal weight_l2_1_load_reg_1579 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_reg_1584 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_reg_1589 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_4_load_reg_1594 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_5_load_reg_1599 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_6_load_reg_1604 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_7_load_reg_1609 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_0_load_1_reg_1614 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_1_load_1_reg_1619 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_1_reg_1624 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_1_reg_1629 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_4_load_1_reg_1634 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_5_load_1_reg_1639 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_6_load_1_reg_1644 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_7_load_1_reg_1649 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1343_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add12_4_i_i_i_reg_1734 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1350_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add12_5_i_i_i_reg_1739 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1357_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add12_6_i_i_i_reg_1744 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1364_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add12_7_i_i_i_reg_1749 : STD_LOGIC_VECTOR (11 downto 0);
    signal weight_l2_0_load_2_reg_1754 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal weight_l2_1_load_2_reg_1759 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_2_reg_1764 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_2_reg_1769 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_4_load_2_reg_1774 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_5_load_2_reg_1779 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_6_load_2_reg_1784 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_7_load_2_reg_1789 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_0_load_3_reg_1794 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_1_load_3_reg_1799 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_3_reg_1804 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_3_reg_1809 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_4_load_3_reg_1814 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_5_load_3_reg_1819 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_6_load_3_reg_1824 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_7_load_3_reg_1829 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_0_load_4_reg_1914 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal weight_l2_1_load_4_reg_1919 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_4_reg_1924 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_4_reg_1929 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_4_load_4_reg_1934 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_5_load_4_reg_1939 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_6_load_4_reg_1944 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_7_load_4_reg_1949 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_0_load_5_reg_1954 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_1_load_5_reg_1959 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_5_reg_1964 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_5_reg_1969 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_4_load_5_reg_1974 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_5_load_5_reg_1979 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_6_load_5_reg_1984 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_7_load_5_reg_1989 : STD_LOGIC_VECTOR (7 downto 0);
    signal idxprom13_i_i_i_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom13_1_i_i_i_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom13_2_i_i_i_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom13_3_i_i_i_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom13_4_i_i_i_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom13_5_i_i_i_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom13_6_i_i_i_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom13_7_i_i_i_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln740_fu_739_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_1_fu_768_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_2_fu_779_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_3_fu_789_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_4_fu_799_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_5_fu_809_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_6_fu_819_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_7_fu_829_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1311_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1319_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1327_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1335_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_1271_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1276_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1286_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1291_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1296_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1301_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1306_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1271_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_1276_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1281_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1286_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1291_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1296_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1301_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1306_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1263_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component Conv_sysarr_mul_mul_12s_12s_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    mul_mul_12s_12s_12_4_1_U238 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ko_3_dout,
        din1 => C_L2_dout,
        ce => grp_fu_1263_ce,
        dout => grp_fu_1263_p2);

    mul_mul_12s_12s_12_4_1_U239 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1271_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1271_p2);

    mul_mul_12s_12s_12_4_1_U240 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1276_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1276_p2);

    mul_mul_12s_12s_12_4_1_U241 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1281_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1281_p2);

    mul_mul_12s_12s_12_4_1_U242 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1286_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1286_p2);

    mul_mul_12s_12s_12_4_1_U243 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1291_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1291_p2);

    mul_mul_12s_12s_12_4_1_U244 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1296_p2);

    mul_mul_12s_12s_12_4_1_U245 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1301_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1301_p2);

    mul_mul_12s_12s_12_4_1_U246 : component Conv_sysarr_mul_mul_12s_12s_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => R_L2_read_reg_1376,
        din1 => grp_fu_1306_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1306_p2);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U247 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1271_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1311_p4);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U248 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1276_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1319_p4);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U249 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1281_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1327_p4);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U250 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1286_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1335_p4);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U251 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1291_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1343_p4);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U252 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1296_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1350_p4);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U253 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1301_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1357_p4);

    ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U254 : component Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln746_reg_1405,
        din1 => grp_fu_1306_p2,
        din2 => S_L2_read_reg_1388,
        din3 => trunc_ln748_reg_1417,
        ce => ap_const_logic_1,
        dout => grp_fu_1364_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                R_L2_read_reg_1376 <= R_L2_dout;
                S_L2_read_reg_1388 <= S_L2_dout;
                empty_reg_1429 <= empty_fu_752_p1;
                trunc_ln746_reg_1405 <= trunc_ln746_fu_744_p1;
                trunc_ln748_reg_1417 <= trunc_ln748_fu_748_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add12_4_i_i_i_reg_1734 <= grp_fu_1343_p4;
                add12_5_i_i_i_reg_1739 <= grp_fu_1350_p4;
                add12_6_i_i_i_reg_1744 <= grp_fu_1357_p4;
                add12_7_i_i_i_reg_1749 <= grp_fu_1364_p4;
                weight_l2_0_load_1_reg_1614 <= weight_l2_0_q0;
                weight_l2_0_load_reg_1574 <= weight_l2_0_q1;
                weight_l2_1_load_1_reg_1619 <= weight_l2_1_q0;
                weight_l2_1_load_reg_1579 <= weight_l2_1_q1;
                weight_l2_2_load_1_reg_1624 <= weight_l2_2_q0;
                weight_l2_2_load_reg_1584 <= weight_l2_2_q1;
                weight_l2_3_load_1_reg_1629 <= weight_l2_3_q0;
                weight_l2_3_load_reg_1589 <= weight_l2_3_q1;
                weight_l2_4_load_1_reg_1634 <= weight_l2_4_q0;
                weight_l2_4_load_reg_1594 <= weight_l2_4_q1;
                weight_l2_5_load_1_reg_1639 <= weight_l2_5_q0;
                weight_l2_5_load_reg_1599 <= weight_l2_5_q1;
                weight_l2_6_load_1_reg_1644 <= weight_l2_6_q0;
                weight_l2_6_load_reg_1604 <= weight_l2_6_q1;
                weight_l2_7_load_1_reg_1649 <= weight_l2_7_q0;
                weight_l2_7_load_reg_1609 <= weight_l2_7_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    c_reg_1434(11 downto 3) <= c_fu_756_p3(11 downto 3);
                mul4_i_i_i_reg_1444 <= grp_fu_1263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                weight_l2_0_load_2_reg_1754 <= weight_l2_0_q1;
                weight_l2_0_load_3_reg_1794 <= weight_l2_0_q0;
                weight_l2_1_load_2_reg_1759 <= weight_l2_1_q1;
                weight_l2_1_load_3_reg_1799 <= weight_l2_1_q0;
                weight_l2_2_load_2_reg_1764 <= weight_l2_2_q1;
                weight_l2_2_load_3_reg_1804 <= weight_l2_2_q0;
                weight_l2_3_load_2_reg_1769 <= weight_l2_3_q1;
                weight_l2_3_load_3_reg_1809 <= weight_l2_3_q0;
                weight_l2_4_load_2_reg_1774 <= weight_l2_4_q1;
                weight_l2_4_load_3_reg_1814 <= weight_l2_4_q0;
                weight_l2_5_load_2_reg_1779 <= weight_l2_5_q1;
                weight_l2_5_load_3_reg_1819 <= weight_l2_5_q0;
                weight_l2_6_load_2_reg_1784 <= weight_l2_6_q1;
                weight_l2_6_load_3_reg_1824 <= weight_l2_6_q0;
                weight_l2_7_load_2_reg_1789 <= weight_l2_7_q1;
                weight_l2_7_load_3_reg_1829 <= weight_l2_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                weight_l2_0_load_4_reg_1914 <= weight_l2_0_q1;
                weight_l2_0_load_5_reg_1954 <= weight_l2_0_q0;
                weight_l2_1_load_4_reg_1919 <= weight_l2_1_q1;
                weight_l2_1_load_5_reg_1959 <= weight_l2_1_q0;
                weight_l2_2_load_4_reg_1924 <= weight_l2_2_q1;
                weight_l2_2_load_5_reg_1964 <= weight_l2_2_q0;
                weight_l2_3_load_4_reg_1929 <= weight_l2_3_q1;
                weight_l2_3_load_5_reg_1969 <= weight_l2_3_q0;
                weight_l2_4_load_4_reg_1934 <= weight_l2_4_q1;
                weight_l2_4_load_5_reg_1974 <= weight_l2_4_q0;
                weight_l2_5_load_4_reg_1939 <= weight_l2_5_q1;
                weight_l2_5_load_5_reg_1979 <= weight_l2_5_q0;
                weight_l2_6_load_4_reg_1944 <= weight_l2_6_q1;
                weight_l2_6_load_5_reg_1984 <= weight_l2_6_q0;
                weight_l2_7_load_4_reg_1949 <= weight_l2_7_q1;
                weight_l2_7_load_5_reg_1989 <= weight_l2_7_q0;
            end if;
        end if;
    end process;
    c_reg_1434(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    C_L2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_L2_blk_n <= C_L2_empty_n;
        else 
            C_L2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    C_L2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_L2_read <= ap_const_logic_1;
        else 
            C_L2_read <= ap_const_logic_0;
        end if; 
    end process;


    R_L2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, R_L2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_L2_blk_n <= R_L2_empty_n;
        else 
            R_L2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    R_L2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_L2_read <= ap_const_logic_1;
        else 
            R_L2_read <= ap_const_logic_0;
        end if; 
    end process;


    S_L2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, S_L2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_L2_blk_n <= S_L2_empty_n;
        else 
            S_L2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_L2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_L2_read <= ap_const_logic_1;
        else 
            S_L2_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
                ap_block_state1 <= ((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= weight_l2_0_load_reg_1574;
    ap_return_1 <= weight_l2_0_load_1_reg_1614;
    ap_return_10 <= weight_l2_1_load_2_reg_1759;
    ap_return_11 <= weight_l2_1_load_3_reg_1799;
    ap_return_12 <= weight_l2_1_load_4_reg_1919;
    ap_return_13 <= weight_l2_1_load_5_reg_1959;
    ap_return_14 <= weight_l2_1_q1;
    ap_return_15 <= weight_l2_1_q0;
    ap_return_16 <= weight_l2_2_load_reg_1584;
    ap_return_17 <= weight_l2_2_load_1_reg_1624;
    ap_return_18 <= weight_l2_2_load_2_reg_1764;
    ap_return_19 <= weight_l2_2_load_3_reg_1804;
    ap_return_2 <= weight_l2_0_load_2_reg_1754;
    ap_return_20 <= weight_l2_2_load_4_reg_1924;
    ap_return_21 <= weight_l2_2_load_5_reg_1964;
    ap_return_22 <= weight_l2_2_q1;
    ap_return_23 <= weight_l2_2_q0;
    ap_return_24 <= weight_l2_3_load_reg_1589;
    ap_return_25 <= weight_l2_3_load_1_reg_1629;
    ap_return_26 <= weight_l2_3_load_2_reg_1769;
    ap_return_27 <= weight_l2_3_load_3_reg_1809;
    ap_return_28 <= weight_l2_3_load_4_reg_1929;
    ap_return_29 <= weight_l2_3_load_5_reg_1969;
    ap_return_3 <= weight_l2_0_load_3_reg_1794;
    ap_return_30 <= weight_l2_3_q1;
    ap_return_31 <= weight_l2_3_q0;
    ap_return_32 <= weight_l2_4_load_reg_1594;
    ap_return_33 <= weight_l2_4_load_1_reg_1634;
    ap_return_34 <= weight_l2_4_load_2_reg_1774;
    ap_return_35 <= weight_l2_4_load_3_reg_1814;
    ap_return_36 <= weight_l2_4_load_4_reg_1934;
    ap_return_37 <= weight_l2_4_load_5_reg_1974;
    ap_return_38 <= weight_l2_4_q1;
    ap_return_39 <= weight_l2_4_q0;
    ap_return_4 <= weight_l2_0_load_4_reg_1914;
    ap_return_40 <= weight_l2_5_load_reg_1599;
    ap_return_41 <= weight_l2_5_load_1_reg_1639;
    ap_return_42 <= weight_l2_5_load_2_reg_1779;
    ap_return_43 <= weight_l2_5_load_3_reg_1819;
    ap_return_44 <= weight_l2_5_load_4_reg_1939;
    ap_return_45 <= weight_l2_5_load_5_reg_1979;
    ap_return_46 <= weight_l2_5_q1;
    ap_return_47 <= weight_l2_5_q0;
    ap_return_48 <= weight_l2_6_load_reg_1604;
    ap_return_49 <= weight_l2_6_load_1_reg_1644;
    ap_return_5 <= weight_l2_0_load_5_reg_1954;
    ap_return_50 <= weight_l2_6_load_2_reg_1784;
    ap_return_51 <= weight_l2_6_load_3_reg_1824;
    ap_return_52 <= weight_l2_6_load_4_reg_1944;
    ap_return_53 <= weight_l2_6_load_5_reg_1984;
    ap_return_54 <= weight_l2_6_q1;
    ap_return_55 <= weight_l2_6_q0;
    ap_return_56 <= weight_l2_7_load_reg_1609;
    ap_return_57 <= weight_l2_7_load_1_reg_1649;
    ap_return_58 <= weight_l2_7_load_2_reg_1789;
    ap_return_59 <= weight_l2_7_load_3_reg_1829;
    ap_return_6 <= weight_l2_0_q1;
    ap_return_60 <= weight_l2_7_load_4_reg_1949;
    ap_return_61 <= weight_l2_7_load_5_reg_1989;
    ap_return_62 <= weight_l2_7_q1;
    ap_return_63 <= weight_l2_7_q0;
    ap_return_7 <= weight_l2_0_q0;
    ap_return_8 <= weight_l2_1_load_reg_1579;
    ap_return_9 <= weight_l2_1_load_1_reg_1619;
    c_1_fu_768_p2 <= (c_fu_756_p3 or ap_const_lv12_1);
    c_2_fu_779_p2 <= (c_reg_1434 or ap_const_lv12_2);
    c_3_fu_789_p2 <= (c_reg_1434 or ap_const_lv12_3);
    c_4_fu_799_p2 <= (c_reg_1434 or ap_const_lv12_4);
    c_5_fu_809_p2 <= (c_reg_1434 or ap_const_lv12_5);
    c_6_fu_819_p2 <= (c_reg_1434 or ap_const_lv12_6);
    c_7_fu_829_p2 <= (c_reg_1434 or ap_const_lv12_7);
    c_fu_756_p3 <= (empty_reg_1429 & ap_const_lv3_0);

    co_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_blk_n <= co_empty_n;
        else 
            co_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    co_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_blk_n <= co_out_full_n;
        else 
            co_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    co_out_din <= co_dout;

    co_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_out_write <= ap_const_logic_1;
        else 
            co_out_write <= ap_const_logic_0;
        end if; 
    end process;


    co_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_read <= ap_const_logic_1;
        else 
            co_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_752_p1 <= co_dout(9 - 1 downto 0);

    grp_fu_1263_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_1263_ce <= ap_const_logic_1;
        else 
            grp_fu_1263_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1271_p1 <= std_logic_vector(unsigned(c_fu_756_p3) + unsigned(grp_fu_1263_p2));
    grp_fu_1276_p1 <= std_logic_vector(unsigned(c_1_fu_768_p2) + unsigned(grp_fu_1263_p2));
    grp_fu_1281_p1 <= std_logic_vector(unsigned(c_2_fu_779_p2) + unsigned(mul4_i_i_i_reg_1444));
    grp_fu_1286_p1 <= std_logic_vector(unsigned(c_3_fu_789_p2) + unsigned(mul4_i_i_i_reg_1444));
    grp_fu_1291_p1 <= std_logic_vector(unsigned(c_4_fu_799_p2) + unsigned(mul4_i_i_i_reg_1444));
    grp_fu_1296_p1 <= std_logic_vector(unsigned(c_5_fu_809_p2) + unsigned(mul4_i_i_i_reg_1444));
    grp_fu_1301_p1 <= std_logic_vector(unsigned(c_6_fu_819_p2) + unsigned(mul4_i_i_i_reg_1444));
    grp_fu_1306_p1 <= std_logic_vector(unsigned(c_7_fu_829_p2) + unsigned(mul4_i_i_i_reg_1444));
    idxprom13_1_i_i_i_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1319_p4),64));
    idxprom13_2_i_i_i_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1327_p4),64));
    idxprom13_3_i_i_i_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1335_p4),64));
    idxprom13_4_i_i_i_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add12_4_i_i_i_reg_1734),64));
    idxprom13_5_i_i_i_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add12_5_i_i_i_reg_1739),64));
    idxprom13_6_i_i_i_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add12_6_i_i_i_reg_1744),64));
    idxprom13_7_i_i_i_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add12_7_i_i_i_reg_1749),64));
    idxprom13_i_i_i_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1311_p4),64));

    ko_3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_blk_n <= ko_3_empty_n;
        else 
            ko_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_3_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_3_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_out_blk_n <= ko_3_out_full_n;
        else 
            ko_3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ko_3_out_din <= trunc_ln740_fu_739_p0(11 - 1 downto 0);

    ko_3_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_out_write <= ap_const_logic_1;
        else 
            ko_3_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ko_3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_3_read <= ap_const_logic_1;
        else 
            ko_3_read <= ap_const_logic_0;
        end if; 
    end process;


    ro_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_blk_n <= ro_empty_n;
        else 
            ro_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ro_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_blk_n <= ro_out_full_n;
        else 
            ro_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ro_out_din <= ro_dout;

    ro_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_write <= ap_const_logic_1;
        else 
            ro_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ro_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_read <= ap_const_logic_1;
        else 
            ro_read <= ap_const_logic_0;
        end if; 
    end process;


    so_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_blk_n <= so_empty_n;
        else 
            so_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    so_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_blk_n <= so_out_full_n;
        else 
            so_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    so_out_din <= so_dout;

    so_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_write <= ap_const_logic_1;
        else 
            so_out_write <= ap_const_logic_0;
        end if; 
    end process;


    so_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_L2_empty_n, R_L2_empty_n, S_L2_empty_n, ko_3_empty_n, co_empty_n, ro_empty_n, so_empty_n, ko_3_out_full_n, co_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_empty_n = ap_const_logic_0) or (ko_3_empty_n = ap_const_logic_0) or (ap_const_logic_0 = S_L2_empty_n) or (ap_const_logic_0 = R_L2_empty_n) or (ap_const_logic_0 = C_L2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (co_out_full_n = ap_const_logic_0) or (ko_3_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_read <= ap_const_logic_1;
        else 
            so_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln740_fu_739_p0 <= ko_3_dout;
    trunc_ln746_fu_744_p1 <= ro_dout(12 - 1 downto 0);
    trunc_ln748_fu_748_p1 <= so_dout(12 - 1 downto 0);

    weight_l2_0_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_0_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_0_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_0_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_0_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_0_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_0_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_0_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_0_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_0_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_0_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_0_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_0_ce0 <= ap_const_logic_1;
        else 
            weight_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_0_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_0_ce1 <= ap_const_logic_1;
        else 
            weight_l2_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_1_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_1_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_1_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_1_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_1_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_1_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_1_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_1_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_1_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_1_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_1_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_1_ce0 <= ap_const_logic_1;
        else 
            weight_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_1_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_1_ce1 <= ap_const_logic_1;
        else 
            weight_l2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_2_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_2_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_2_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_2_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_2_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_2_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_2_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_2_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_2_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_2_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_2_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_2_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_2_ce0 <= ap_const_logic_1;
        else 
            weight_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_2_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_2_ce1 <= ap_const_logic_1;
        else 
            weight_l2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_3_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_3_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_3_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_3_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_3_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_3_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_3_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_3_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_3_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_3_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_3_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_3_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_3_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_3_ce0 <= ap_const_logic_1;
        else 
            weight_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_3_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_3_ce1 <= ap_const_logic_1;
        else 
            weight_l2_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_4_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_4_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_4_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_4_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_4_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_4_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_4_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_4_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_4_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_4_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_4_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_4_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_4_ce0 <= ap_const_logic_1;
        else 
            weight_l2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_4_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_4_ce1 <= ap_const_logic_1;
        else 
            weight_l2_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_5_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_5_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_5_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_5_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_5_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_5_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_5_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_5_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_5_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_5_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_5_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_5_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_5_ce0 <= ap_const_logic_1;
        else 
            weight_l2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_5_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_5_ce1 <= ap_const_logic_1;
        else 
            weight_l2_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_6_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_6_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_6_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_6_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_6_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_6_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_6_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_6_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_6_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_6_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_6_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_6_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_6_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_6_ce0 <= ap_const_logic_1;
        else 
            weight_l2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_6_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_6_ce1 <= ap_const_logic_1;
        else 
            weight_l2_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_7_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_1_i_i_i_fu_850_p1, idxprom13_3_i_i_i_fu_872_p1, idxprom13_5_i_i_i_fu_894_p1, idxprom13_7_i_i_i_fu_916_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_7_address0 <= idxprom13_7_i_i_i_fu_916_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_7_address0 <= idxprom13_5_i_i_i_fu_894_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_7_address0 <= idxprom13_3_i_i_i_fu_872_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_7_address0 <= idxprom13_1_i_i_i_fu_850_p1(12 - 1 downto 0);
        else 
            weight_l2_7_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_7_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, idxprom13_i_i_i_fu_839_p1, idxprom13_2_i_i_i_fu_861_p1, idxprom13_4_i_i_i_fu_883_p1, idxprom13_6_i_i_i_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_l2_7_address1 <= idxprom13_6_i_i_i_fu_905_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_l2_7_address1 <= idxprom13_4_i_i_i_fu_883_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_l2_7_address1 <= idxprom13_2_i_i_i_fu_861_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_l2_7_address1 <= idxprom13_i_i_i_fu_839_p1(12 - 1 downto 0);
        else 
            weight_l2_7_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weight_l2_7_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_7_ce0 <= ap_const_logic_1;
        else 
            weight_l2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_7_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            weight_l2_7_ce1 <= ap_const_logic_1;
        else 
            weight_l2_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
