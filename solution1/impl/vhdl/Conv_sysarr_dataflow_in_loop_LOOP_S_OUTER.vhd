-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    param : IN STD_LOGIC_VECTOR (1183 downto 0);
    ko_1 : IN STD_LOGIC_VECTOR (11 downto 0);
    co : IN STD_LOGIC_VECTOR (31 downto 0);
    ro : IN STD_LOGIC_VECTOR (31 downto 0);
    so : IN STD_LOGIC_VECTOR (31 downto 0);
    ho : IN STD_LOGIC_VECTOR (10 downto 0);
    wo : IN STD_LOGIC_VECTOR (10 downto 0);
    data_l2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_0_ce0 : OUT STD_LOGIC;
    data_l2_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_0_we0 : OUT STD_LOGIC;
    data_l2_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_0_ce1 : OUT STD_LOGIC;
    data_l2_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_0_we1 : OUT STD_LOGIC;
    data_l2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_1_ce0 : OUT STD_LOGIC;
    data_l2_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_1_we0 : OUT STD_LOGIC;
    data_l2_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_1_ce1 : OUT STD_LOGIC;
    data_l2_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_1_we1 : OUT STD_LOGIC;
    data_l2_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_2_ce0 : OUT STD_LOGIC;
    data_l2_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_2_we0 : OUT STD_LOGIC;
    data_l2_2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_2_ce1 : OUT STD_LOGIC;
    data_l2_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_2_we1 : OUT STD_LOGIC;
    data_l2_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_3_ce0 : OUT STD_LOGIC;
    data_l2_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_3_we0 : OUT STD_LOGIC;
    data_l2_3_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    data_l2_3_ce1 : OUT STD_LOGIC;
    data_l2_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_3_we1 : OUT STD_LOGIC;
    output_l2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_0_ce0 : OUT STD_LOGIC;
    output_l2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_0_we0 : OUT STD_LOGIC;
    output_l2_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_0_ce1 : OUT STD_LOGIC;
    output_l2_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_0_we1 : OUT STD_LOGIC;
    output_l2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_1_ce0 : OUT STD_LOGIC;
    output_l2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_1_we0 : OUT STD_LOGIC;
    output_l2_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_1_ce1 : OUT STD_LOGIC;
    output_l2_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_1_we1 : OUT STD_LOGIC;
    output_l2_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_2_ce0 : OUT STD_LOGIC;
    output_l2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_2_we0 : OUT STD_LOGIC;
    output_l2_2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_2_ce1 : OUT STD_LOGIC;
    output_l2_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_2_we1 : OUT STD_LOGIC;
    output_l2_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_3_ce0 : OUT STD_LOGIC;
    output_l2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_3_we0 : OUT STD_LOGIC;
    output_l2_3_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_l2_3_ce1 : OUT STD_LOGIC;
    output_l2_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_3_we1 : OUT STD_LOGIC;
    weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_0_ce0 : OUT STD_LOGIC;
    weight_l2_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_0_we0 : OUT STD_LOGIC;
    weight_l2_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_0_ce1 : OUT STD_LOGIC;
    weight_l2_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_0_we1 : OUT STD_LOGIC;
    weight_l2_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_1_ce0 : OUT STD_LOGIC;
    weight_l2_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_we0 : OUT STD_LOGIC;
    weight_l2_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_1_ce1 : OUT STD_LOGIC;
    weight_l2_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_we1 : OUT STD_LOGIC;
    weight_l2_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_2_ce0 : OUT STD_LOGIC;
    weight_l2_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_we0 : OUT STD_LOGIC;
    weight_l2_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_2_ce1 : OUT STD_LOGIC;
    weight_l2_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_we1 : OUT STD_LOGIC;
    weight_l2_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_3_ce0 : OUT STD_LOGIC;
    weight_l2_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_we0 : OUT STD_LOGIC;
    weight_l2_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_l2_3_ce1 : OUT STD_LOGIC;
    weight_l2_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_we1 : OUT STD_LOGIC;
    param_ap_vld : IN STD_LOGIC;
    ko_1_ap_vld : IN STD_LOGIC;
    co_ap_vld : IN STD_LOGIC;
    ro_ap_vld : IN STD_LOGIC;
    so_ap_vld : IN STD_LOGIC;
    ho_ap_vld : IN STD_LOGIC;
    wo_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    weight_l2_0_empty_n : IN STD_LOGIC;
    weight_l2_0_read : OUT STD_LOGIC;
    weight_l2_1_empty_n : IN STD_LOGIC;
    weight_l2_1_read : OUT STD_LOGIC;
    weight_l2_2_empty_n : IN STD_LOGIC;
    weight_l2_2_read : OUT STD_LOGIC;
    weight_l2_3_empty_n : IN STD_LOGIC;
    weight_l2_3_read : OUT STD_LOGIC;
    data_l2_0_empty_n : IN STD_LOGIC;
    data_l2_0_read : OUT STD_LOGIC;
    data_l2_1_empty_n : IN STD_LOGIC;
    data_l2_1_read : OUT STD_LOGIC;
    data_l2_2_empty_n : IN STD_LOGIC;
    data_l2_2_read : OUT STD_LOGIC;
    data_l2_3_empty_n : IN STD_LOGIC;
    data_l2_3_read : OUT STD_LOGIC;
    output_l2_0_full_n : IN STD_LOGIC;
    output_l2_0_write : OUT STD_LOGIC;
    output_l2_1_full_n : IN STD_LOGIC;
    output_l2_1_write : OUT STD_LOGIC;
    output_l2_2_full_n : IN STD_LOGIC;
    output_l2_2_write : OUT STD_LOGIC;
    output_l2_3_full_n : IN STD_LOGIC;
    output_l2_3_write : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal data_l1_0_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l1_0_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l1_1_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l1_1_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l1_2_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l1_2_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l1_3_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l1_3_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_l1_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out_din : STD_LOGIC_VECTOR (1183 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out1_din : STD_LOGIC_VECTOR (1119 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out1_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ko_1_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ko_1_out_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out2_din : STD_LOGIC_VECTOR (10 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out2_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out3_din : STD_LOGIC_VECTOR (10 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out3_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out4_din : STD_LOGIC_VECTOR (10 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out4_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out5_din : STD_LOGIC_VECTOR (10 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out5_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out_write : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out6_din : STD_LOGIC_VECTOR (10 downto 0);
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out6_write : STD_LOGIC;
    signal runWeight2Reg_U0_ap_start : STD_LOGIC;
    signal runWeight2Reg_U0_ap_done : STD_LOGIC;
    signal runWeight2Reg_U0_ap_continue : STD_LOGIC;
    signal runWeight2Reg_U0_ap_idle : STD_LOGIC;
    signal runWeight2Reg_U0_ap_ready : STD_LOGIC;
    signal runWeight2Reg_U0_param_read : STD_LOGIC;
    signal runWeight2Reg_U0_ko_1_read : STD_LOGIC;
    signal runWeight2Reg_U0_co_read : STD_LOGIC;
    signal runWeight2Reg_U0_ro_read : STD_LOGIC;
    signal runWeight2Reg_U0_so_read : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal runWeight2Reg_U0_weight_l2_0_ce0 : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal runWeight2Reg_U0_weight_l2_1_ce0 : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal runWeight2Reg_U0_weight_l2_2_ce0 : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal runWeight2Reg_U0_weight_l2_3_ce0 : STD_LOGIC;
    signal runWeight2Reg_U0_param_out_din : STD_LOGIC_VECTOR (1183 downto 0);
    signal runWeight2Reg_U0_param_out_write : STD_LOGIC;
    signal runWeight2Reg_U0_ko_1_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal runWeight2Reg_U0_ko_1_out_write : STD_LOGIC;
    signal runWeight2Reg_U0_co_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal runWeight2Reg_U0_co_out_write : STD_LOGIC;
    signal runWeight2Reg_U0_ro_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal runWeight2Reg_U0_ro_out_write : STD_LOGIC;
    signal runWeight2Reg_U0_so_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal runWeight2Reg_U0_so_out_write : STD_LOGIC;
    signal runWeight2Reg_U0_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal runWeight2Reg_U0_weight_l2_0_full_n : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_0_write : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_1_full_n : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_1_write : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_2_full_n : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_2_write : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_3_full_n : STD_LOGIC;
    signal runWeight2Reg_U0_weight_l2_3_write : STD_LOGIC;
    signal ap_channel_done_weight_regfile_3_3 : STD_LOGIC;
    signal weight_regfile_3_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_3_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_3_3 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_3_2 : STD_LOGIC;
    signal weight_regfile_3_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_3_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_3_2 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_3_1 : STD_LOGIC;
    signal weight_regfile_3_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_3_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_3_1 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_3_0 : STD_LOGIC;
    signal weight_regfile_3_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_3_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_3_0 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_2_3 : STD_LOGIC;
    signal weight_regfile_2_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_2_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_2_3 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_2_2 : STD_LOGIC;
    signal weight_regfile_2_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_2_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_2_2 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_2_1 : STD_LOGIC;
    signal weight_regfile_2_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_2_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_2_1 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_2_0 : STD_LOGIC;
    signal weight_regfile_2_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_2_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_2_0 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_1_3 : STD_LOGIC;
    signal weight_regfile_1_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_1_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_1_3 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_1_2 : STD_LOGIC;
    signal weight_regfile_1_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_1_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_1_2 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_1_1 : STD_LOGIC;
    signal weight_regfile_1_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_1_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_1_1 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_1_0 : STD_LOGIC;
    signal weight_regfile_1_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_1_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_1_0 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_0_3 : STD_LOGIC;
    signal weight_regfile_0_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_0_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_0_3 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_0_2 : STD_LOGIC;
    signal weight_regfile_0_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_0_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_0_2 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_0_1 : STD_LOGIC;
    signal weight_regfile_0_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_0_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_0_1 : STD_LOGIC;
    signal ap_channel_done_weight_regfile_0_0 : STD_LOGIC;
    signal weight_regfile_0_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_weight_regfile_0_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_weight_regfile_0_0 : STD_LOGIC;
    signal runDataL2toL1_U0_ap_start : STD_LOGIC;
    signal runDataL2toL1_U0_ap_done : STD_LOGIC;
    signal runDataL2toL1_U0_ap_continue : STD_LOGIC;
    signal runDataL2toL1_U0_ap_idle : STD_LOGIC;
    signal runDataL2toL1_U0_ap_ready : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_017_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runDataL2toL1_U0_data_l1_017_i_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_017_i_we0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_017_i_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal runDataL2toL1_U0_data_l1_118_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runDataL2toL1_U0_data_l1_118_i_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_118_i_we0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_118_i_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal runDataL2toL1_U0_data_l1_219_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runDataL2toL1_U0_data_l1_219_i_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_219_i_we0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_219_i_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal runDataL2toL1_U0_data_l1_320_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runDataL2toL1_U0_data_l1_320_i_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_320_i_we0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_320_i_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal runDataL2toL1_U0_param_read : STD_LOGIC;
    signal runDataL2toL1_U0_co_read : STD_LOGIC;
    signal runDataL2toL1_U0_ho_read : STD_LOGIC;
    signal runDataL2toL1_U0_wo_read : STD_LOGIC;
    signal runDataL2toL1_U0_ro_read : STD_LOGIC;
    signal runDataL2toL1_U0_so_read : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runDataL2toL1_U0_data_l2_0_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runDataL2toL1_U0_data_l2_1_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runDataL2toL1_U0_data_l2_2_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runDataL2toL1_U0_data_l2_3_ce0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_0_full_n : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_0_write : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_1_full_n : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_1_write : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_2_full_n : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_2_write : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_3_full_n : STD_LOGIC;
    signal runDataL2toL1_U0_data_l2_3_write : STD_LOGIC;
    signal ap_channel_done_data_l1_3 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_320_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_l1_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_l1_3 : STD_LOGIC;
    signal ap_channel_done_data_l1_2 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_219_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_l1_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_l1_2 : STD_LOGIC;
    signal ap_channel_done_data_l1_1 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_118_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_l1_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_l1_1 : STD_LOGIC;
    signal ap_channel_done_data_l1_0 : STD_LOGIC;
    signal runDataL2toL1_U0_data_l1_017_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_l1_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_l1_0 : STD_LOGIC;
    signal runSysArr_U0_ap_start : STD_LOGIC;
    signal runSysArr_U0_ap_done : STD_LOGIC;
    signal runSysArr_U0_ap_continue : STD_LOGIC;
    signal runSysArr_U0_ap_idle : STD_LOGIC;
    signal runSysArr_U0_ap_ready : STD_LOGIC;
    signal runSysArr_U0_data_l1_017_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_data_l1_017_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_data_l1_118_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_data_l1_118_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_data_l1_219_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_data_l1_219_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_data_l1_320_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_data_l1_320_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_021_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_output_l1_021_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_021_i_we0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_021_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runSysArr_U0_output_l1_122_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_output_l1_122_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_122_i_we0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_122_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runSysArr_U0_output_l1_223_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_output_l1_223_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_223_i_we0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_223_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runSysArr_U0_output_l1_324_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runSysArr_U0_output_l1_324_i_ce0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_324_i_we0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_324_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runSysArr_U0_param_read : STD_LOGIC;
    signal runSysArr_U0_param_out_din : STD_LOGIC_VECTOR (1119 downto 0);
    signal runSysArr_U0_param_out_write : STD_LOGIC;
    signal ap_channel_done_output_l1_3 : STD_LOGIC;
    signal runSysArr_U0_output_l1_324_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_l1_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_l1_3 : STD_LOGIC;
    signal ap_channel_done_output_l1_2 : STD_LOGIC;
    signal runSysArr_U0_output_l1_223_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_l1_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_l1_2 : STD_LOGIC;
    signal ap_channel_done_output_l1_1 : STD_LOGIC;
    signal runSysArr_U0_output_l1_122_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_l1_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_l1_1 : STD_LOGIC;
    signal ap_channel_done_output_l1_0 : STD_LOGIC;
    signal runSysArr_U0_output_l1_021_i_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_output_l1_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_output_l1_0 : STD_LOGIC;
    signal runOutputL1toL2_U0_ap_start : STD_LOGIC;
    signal runOutputL1toL2_U0_ap_done : STD_LOGIC;
    signal runOutputL1toL2_U0_ap_continue : STD_LOGIC;
    signal runOutputL1toL2_U0_ap_idle : STD_LOGIC;
    signal runOutputL1toL2_U0_ap_ready : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l1_021_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runOutputL1toL2_U0_output_l1_021_i_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l1_122_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runOutputL1toL2_U0_output_l1_122_i_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l1_223_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runOutputL1toL2_U0_output_l1_223_i_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l1_324_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal runOutputL1toL2_U0_output_l1_324_i_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_param_read : STD_LOGIC;
    signal runOutputL1toL2_U0_ko_1_read : STD_LOGIC;
    signal runOutputL1toL2_U0_ho_read : STD_LOGIC;
    signal runOutputL1toL2_U0_wo_read : STD_LOGIC;
    signal runOutputL1toL2_U0_ro_read : STD_LOGIC;
    signal runOutputL1toL2_U0_co_read : STD_LOGIC;
    signal runOutputL1toL2_U0_so_read : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runOutputL1toL2_U0_output_l2_0_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_0_we0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runOutputL1toL2_U0_output_l2_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runOutputL1toL2_U0_output_l2_1_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_1_we0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runOutputL1toL2_U0_output_l2_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runOutputL1toL2_U0_output_l2_2_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_2_we0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runOutputL1toL2_U0_output_l2_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal runOutputL1toL2_U0_output_l2_3_ce0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_3_we0 : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal runOutputL1toL2_U0_output_l2_0_full_n : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_0_write : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_1_full_n : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_1_write : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_2_full_n : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_2_write : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_3_full_n : STD_LOGIC;
    signal runOutputL1toL2_U0_output_l2_3_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal data_l1_0_i_full_n : STD_LOGIC;
    signal data_l1_0_t_empty_n : STD_LOGIC;
    signal data_l1_1_i_full_n : STD_LOGIC;
    signal data_l1_1_t_empty_n : STD_LOGIC;
    signal data_l1_2_i_full_n : STD_LOGIC;
    signal data_l1_2_t_empty_n : STD_LOGIC;
    signal data_l1_3_i_full_n : STD_LOGIC;
    signal data_l1_3_t_empty_n : STD_LOGIC;
    signal output_l1_0_i_full_n : STD_LOGIC;
    signal output_l1_0_t_empty_n : STD_LOGIC;
    signal output_l1_1_i_full_n : STD_LOGIC;
    signal output_l1_1_t_empty_n : STD_LOGIC;
    signal output_l1_2_i_full_n : STD_LOGIC;
    signal output_l1_2_t_empty_n : STD_LOGIC;
    signal output_l1_3_i_full_n : STD_LOGIC;
    signal output_l1_3_t_empty_n : STD_LOGIC;
    signal param_c_full_n : STD_LOGIC;
    signal param_c_dout : STD_LOGIC_VECTOR (1183 downto 0);
    signal param_c_empty_n : STD_LOGIC;
    signal param_c1_full_n : STD_LOGIC;
    signal param_c1_dout : STD_LOGIC_VECTOR (1119 downto 0);
    signal param_c1_empty_n : STD_LOGIC;
    signal ko_1_c_full_n : STD_LOGIC;
    signal ko_1_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal ko_1_c_empty_n : STD_LOGIC;
    signal co_c_full_n : STD_LOGIC;
    signal co_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal co_c_empty_n : STD_LOGIC;
    signal co_c2_full_n : STD_LOGIC;
    signal co_c2_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal co_c2_empty_n : STD_LOGIC;
    signal ro_c_full_n : STD_LOGIC;
    signal ro_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ro_c_empty_n : STD_LOGIC;
    signal ro_c3_full_n : STD_LOGIC;
    signal ro_c3_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal ro_c3_empty_n : STD_LOGIC;
    signal so_c_full_n : STD_LOGIC;
    signal so_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal so_c_empty_n : STD_LOGIC;
    signal so_c4_full_n : STD_LOGIC;
    signal so_c4_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal so_c4_empty_n : STD_LOGIC;
    signal ho_c_full_n : STD_LOGIC;
    signal ho_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal ho_c_empty_n : STD_LOGIC;
    signal ho_c5_full_n : STD_LOGIC;
    signal ho_c5_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal ho_c5_empty_n : STD_LOGIC;
    signal wo_c_full_n : STD_LOGIC;
    signal wo_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal wo_c_empty_n : STD_LOGIC;
    signal wo_c6_full_n : STD_LOGIC;
    signal wo_c6_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal wo_c6_empty_n : STD_LOGIC;
    signal param_c7_full_n : STD_LOGIC;
    signal param_c7_dout : STD_LOGIC_VECTOR (1183 downto 0);
    signal param_c7_empty_n : STD_LOGIC;
    signal ko_1_c8_full_n : STD_LOGIC;
    signal ko_1_c8_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal ko_1_c8_empty_n : STD_LOGIC;
    signal co_c9_full_n : STD_LOGIC;
    signal co_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal co_c9_empty_n : STD_LOGIC;
    signal ro_c10_full_n : STD_LOGIC;
    signal ro_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ro_c10_empty_n : STD_LOGIC;
    signal so_c11_full_n : STD_LOGIC;
    signal so_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal so_c11_empty_n : STD_LOGIC;
    signal weight_regfile_0_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_0_empty_n : STD_LOGIC;
    signal weight_regfile_0_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_1_empty_n : STD_LOGIC;
    signal weight_regfile_0_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_2_empty_n : STD_LOGIC;
    signal weight_regfile_0_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_3_empty_n : STD_LOGIC;
    signal weight_regfile_1_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_0_empty_n : STD_LOGIC;
    signal weight_regfile_1_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_1_empty_n : STD_LOGIC;
    signal weight_regfile_1_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_2_empty_n : STD_LOGIC;
    signal weight_regfile_1_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_3_empty_n : STD_LOGIC;
    signal weight_regfile_2_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_0_empty_n : STD_LOGIC;
    signal weight_regfile_2_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_1_empty_n : STD_LOGIC;
    signal weight_regfile_2_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_2_empty_n : STD_LOGIC;
    signal weight_regfile_2_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_3_empty_n : STD_LOGIC;
    signal weight_regfile_3_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_0_empty_n : STD_LOGIC;
    signal weight_regfile_3_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_1_empty_n : STD_LOGIC;
    signal weight_regfile_3_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_2_empty_n : STD_LOGIC;
    signal weight_regfile_3_3_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_3_empty_n : STD_LOGIC;
    signal param_c12_full_n : STD_LOGIC;
    signal param_c12_dout : STD_LOGIC_VECTOR (1119 downto 0);
    signal param_c12_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_runWeight2Reg_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_runWeight2Reg_U0_ap_ready : STD_LOGIC;
    signal runWeight2Reg_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_runDataL2toL1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_runDataL2toL1_U0_ap_ready : STD_LOGIC;
    signal runDataL2toL1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_LOOP_S_OUTER_entry28_U0_start_write : STD_LOGIC;
    signal runWeight2Reg_U0_start_full_n : STD_LOGIC;
    signal runWeight2Reg_U0_start_write : STD_LOGIC;
    signal runDataL2toL1_U0_start_full_n : STD_LOGIC;
    signal runDataL2toL1_U0_start_write : STD_LOGIC;
    signal runSysArr_U0_start_full_n : STD_LOGIC;
    signal runSysArr_U0_start_write : STD_LOGIC;
    signal runOutputL1toL2_U0_start_full_n : STD_LOGIC;
    signal runOutputL1toL2_U0_start_write : STD_LOGIC;

    component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_entry28 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        param : IN STD_LOGIC_VECTOR (1183 downto 0);
        ko_1 : IN STD_LOGIC_VECTOR (11 downto 0);
        co : IN STD_LOGIC_VECTOR (31 downto 0);
        ro : IN STD_LOGIC_VECTOR (31 downto 0);
        so : IN STD_LOGIC_VECTOR (31 downto 0);
        ho : IN STD_LOGIC_VECTOR (10 downto 0);
        wo : IN STD_LOGIC_VECTOR (10 downto 0);
        param_out_din : OUT STD_LOGIC_VECTOR (1183 downto 0);
        param_out_full_n : IN STD_LOGIC;
        param_out_write : OUT STD_LOGIC;
        param_out1_din : OUT STD_LOGIC_VECTOR (1119 downto 0);
        param_out1_full_n : IN STD_LOGIC;
        param_out1_write : OUT STD_LOGIC;
        ko_1_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        ko_1_out_full_n : IN STD_LOGIC;
        ko_1_out_write : OUT STD_LOGIC;
        co_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        co_out_full_n : IN STD_LOGIC;
        co_out_write : OUT STD_LOGIC;
        co_out2_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        co_out2_full_n : IN STD_LOGIC;
        co_out2_write : OUT STD_LOGIC;
        ro_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ro_out_full_n : IN STD_LOGIC;
        ro_out_write : OUT STD_LOGIC;
        ro_out3_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        ro_out3_full_n : IN STD_LOGIC;
        ro_out3_write : OUT STD_LOGIC;
        so_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        so_out_full_n : IN STD_LOGIC;
        so_out_write : OUT STD_LOGIC;
        so_out4_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        so_out4_full_n : IN STD_LOGIC;
        so_out4_write : OUT STD_LOGIC;
        ho_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        ho_out_full_n : IN STD_LOGIC;
        ho_out_write : OUT STD_LOGIC;
        ho_out5_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        ho_out5_full_n : IN STD_LOGIC;
        ho_out5_write : OUT STD_LOGIC;
        wo_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        wo_out_full_n : IN STD_LOGIC;
        wo_out_write : OUT STD_LOGIC;
        wo_out6_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        wo_out6_full_n : IN STD_LOGIC;
        wo_out6_write : OUT STD_LOGIC );
    end component;


    component Conv_sysarr_runWeight2Reg IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        param_dout : IN STD_LOGIC_VECTOR (1183 downto 0);
        param_empty_n : IN STD_LOGIC;
        param_read : OUT STD_LOGIC;
        ko_1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        ko_1_empty_n : IN STD_LOGIC;
        ko_1_read : OUT STD_LOGIC;
        co_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        co_empty_n : IN STD_LOGIC;
        co_read : OUT STD_LOGIC;
        ro_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ro_empty_n : IN STD_LOGIC;
        ro_read : OUT STD_LOGIC;
        so_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        so_empty_n : IN STD_LOGIC;
        so_read : OUT STD_LOGIC;
        weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_l2_0_ce0 : OUT STD_LOGIC;
        weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_l2_1_ce0 : OUT STD_LOGIC;
        weight_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_l2_2_ce0 : OUT STD_LOGIC;
        weight_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_l2_3_ce0 : OUT STD_LOGIC;
        weight_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        param_out_din : OUT STD_LOGIC_VECTOR (1183 downto 0);
        param_out_full_n : IN STD_LOGIC;
        param_out_write : OUT STD_LOGIC;
        ko_1_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        ko_1_out_full_n : IN STD_LOGIC;
        ko_1_out_write : OUT STD_LOGIC;
        co_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        co_out_full_n : IN STD_LOGIC;
        co_out_write : OUT STD_LOGIC;
        ro_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ro_out_full_n : IN STD_LOGIC;
        ro_out_write : OUT STD_LOGIC;
        so_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        so_out_full_n : IN STD_LOGIC;
        so_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_runDataL2toL1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_l1_017_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_017_i_ce0 : OUT STD_LOGIC;
        data_l1_017_i_we0 : OUT STD_LOGIC;
        data_l1_017_i_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l1_118_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_118_i_ce0 : OUT STD_LOGIC;
        data_l1_118_i_we0 : OUT STD_LOGIC;
        data_l1_118_i_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l1_219_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_219_i_ce0 : OUT STD_LOGIC;
        data_l1_219_i_we0 : OUT STD_LOGIC;
        data_l1_219_i_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l1_320_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_320_i_ce0 : OUT STD_LOGIC;
        data_l1_320_i_we0 : OUT STD_LOGIC;
        data_l1_320_i_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        param_dout : IN STD_LOGIC_VECTOR (1119 downto 0);
        param_empty_n : IN STD_LOGIC;
        param_read : OUT STD_LOGIC;
        co_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        co_empty_n : IN STD_LOGIC;
        co_read : OUT STD_LOGIC;
        ho_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        ho_empty_n : IN STD_LOGIC;
        ho_read : OUT STD_LOGIC;
        wo_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        wo_empty_n : IN STD_LOGIC;
        wo_read : OUT STD_LOGIC;
        ro_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        ro_empty_n : IN STD_LOGIC;
        ro_read : OUT STD_LOGIC;
        so_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        so_empty_n : IN STD_LOGIC;
        so_read : OUT STD_LOGIC;
        data_l2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        data_l2_0_ce0 : OUT STD_LOGIC;
        data_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        data_l2_1_ce0 : OUT STD_LOGIC;
        data_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        data_l2_2_ce0 : OUT STD_LOGIC;
        data_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        data_l2_3_ce0 : OUT STD_LOGIC;
        data_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_runSysArr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l1_017_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_017_i_ce0 : OUT STD_LOGIC;
        data_l1_017_i_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l1_118_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_118_i_ce0 : OUT STD_LOGIC;
        data_l1_118_i_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l1_219_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_219_i_ce0 : OUT STD_LOGIC;
        data_l1_219_i_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l1_320_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        data_l1_320_i_ce0 : OUT STD_LOGIC;
        data_l1_320_i_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_l1_021_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_021_i_ce0 : OUT STD_LOGIC;
        output_l1_021_i_we0 : OUT STD_LOGIC;
        output_l1_021_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_122_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_122_i_ce0 : OUT STD_LOGIC;
        output_l1_122_i_we0 : OUT STD_LOGIC;
        output_l1_122_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_223_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_223_i_ce0 : OUT STD_LOGIC;
        output_l1_223_i_we0 : OUT STD_LOGIC;
        output_l1_223_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_324_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_324_i_ce0 : OUT STD_LOGIC;
        output_l1_324_i_we0 : OUT STD_LOGIC;
        output_l1_324_i_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        param_dout : IN STD_LOGIC_VECTOR (1183 downto 0);
        param_empty_n : IN STD_LOGIC;
        param_read : OUT STD_LOGIC;
        param_out_din : OUT STD_LOGIC_VECTOR (1119 downto 0);
        param_out_full_n : IN STD_LOGIC;
        param_out_write : OUT STD_LOGIC );
    end component;


    component Conv_sysarr_runOutputL1toL2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_l1_021_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_021_i_ce0 : OUT STD_LOGIC;
        output_l1_021_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_122_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_122_i_ce0 : OUT STD_LOGIC;
        output_l1_122_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_223_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_223_i_ce0 : OUT STD_LOGIC;
        output_l1_223_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_324_i_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_l1_324_i_ce0 : OUT STD_LOGIC;
        output_l1_324_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        param_dout : IN STD_LOGIC_VECTOR (1119 downto 0);
        param_empty_n : IN STD_LOGIC;
        param_read : OUT STD_LOGIC;
        ko_1_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        ko_1_empty_n : IN STD_LOGIC;
        ko_1_read : OUT STD_LOGIC;
        ho_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        ho_empty_n : IN STD_LOGIC;
        ho_read : OUT STD_LOGIC;
        wo_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        wo_empty_n : IN STD_LOGIC;
        wo_read : OUT STD_LOGIC;
        ro_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ro_empty_n : IN STD_LOGIC;
        ro_read : OUT STD_LOGIC;
        co_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        co_empty_n : IN STD_LOGIC;
        co_read : OUT STD_LOGIC;
        so_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        so_empty_n : IN STD_LOGIC;
        so_read : OUT STD_LOGIC;
        output_l2_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_l2_0_ce0 : OUT STD_LOGIC;
        output_l2_0_we0 : OUT STD_LOGIC;
        output_l2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l2_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_l2_1_ce0 : OUT STD_LOGIC;
        output_l2_1_we0 : OUT STD_LOGIC;
        output_l2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l2_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_l2_2_ce0 : OUT STD_LOGIC;
        output_l2_2_we0 : OUT STD_LOGIC;
        output_l2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l2_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_l2_3_ce0 : OUT STD_LOGIC;
        output_l2_3_we0 : OUT STD_LOGIC;
        output_l2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_data_l1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_output_l1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w1184_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1183 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1183 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w1120_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1119 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1119 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w12_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w11_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w11_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w11_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Conv_sysarr_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    data_l1_0_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_data_l1_0
    generic map (
        DataWidth => 8,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runDataL2toL1_U0_data_l1_017_i_address0,
        i_ce0 => runDataL2toL1_U0_data_l1_017_i_ce0,
        i_we0 => runDataL2toL1_U0_data_l1_017_i_we0,
        i_d0 => runDataL2toL1_U0_data_l1_017_i_d0,
        i_q0 => data_l1_0_i_q0,
        t_address0 => runSysArr_U0_data_l1_017_i_address0,
        t_ce0 => runSysArr_U0_data_l1_017_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => data_l1_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_l1_0_i_full_n,
        i_write => ap_channel_done_data_l1_0,
        t_empty_n => data_l1_0_t_empty_n,
        t_read => runSysArr_U0_ap_ready);

    data_l1_1_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_data_l1_0
    generic map (
        DataWidth => 8,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runDataL2toL1_U0_data_l1_118_i_address0,
        i_ce0 => runDataL2toL1_U0_data_l1_118_i_ce0,
        i_we0 => runDataL2toL1_U0_data_l1_118_i_we0,
        i_d0 => runDataL2toL1_U0_data_l1_118_i_d0,
        i_q0 => data_l1_1_i_q0,
        t_address0 => runSysArr_U0_data_l1_118_i_address0,
        t_ce0 => runSysArr_U0_data_l1_118_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => data_l1_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_l1_1_i_full_n,
        i_write => ap_channel_done_data_l1_1,
        t_empty_n => data_l1_1_t_empty_n,
        t_read => runSysArr_U0_ap_ready);

    data_l1_2_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_data_l1_0
    generic map (
        DataWidth => 8,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runDataL2toL1_U0_data_l1_219_i_address0,
        i_ce0 => runDataL2toL1_U0_data_l1_219_i_ce0,
        i_we0 => runDataL2toL1_U0_data_l1_219_i_we0,
        i_d0 => runDataL2toL1_U0_data_l1_219_i_d0,
        i_q0 => data_l1_2_i_q0,
        t_address0 => runSysArr_U0_data_l1_219_i_address0,
        t_ce0 => runSysArr_U0_data_l1_219_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => data_l1_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_l1_2_i_full_n,
        i_write => ap_channel_done_data_l1_2,
        t_empty_n => data_l1_2_t_empty_n,
        t_read => runSysArr_U0_ap_ready);

    data_l1_3_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_data_l1_0
    generic map (
        DataWidth => 8,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runDataL2toL1_U0_data_l1_320_i_address0,
        i_ce0 => runDataL2toL1_U0_data_l1_320_i_ce0,
        i_we0 => runDataL2toL1_U0_data_l1_320_i_we0,
        i_d0 => runDataL2toL1_U0_data_l1_320_i_d0,
        i_q0 => data_l1_3_i_q0,
        t_address0 => runSysArr_U0_data_l1_320_i_address0,
        t_ce0 => runSysArr_U0_data_l1_320_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => data_l1_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_l1_3_i_full_n,
        i_write => ap_channel_done_data_l1_3,
        t_empty_n => data_l1_3_t_empty_n,
        t_read => runSysArr_U0_ap_ready);

    output_l1_0_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runSysArr_U0_output_l1_021_i_address0,
        i_ce0 => runSysArr_U0_output_l1_021_i_ce0,
        i_we0 => runSysArr_U0_output_l1_021_i_we0,
        i_d0 => runSysArr_U0_output_l1_021_i_d0,
        i_q0 => output_l1_0_i_q0,
        t_address0 => runOutputL1toL2_U0_output_l1_021_i_address0,
        t_ce0 => runOutputL1toL2_U0_output_l1_021_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_l1_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_l1_0_i_full_n,
        i_write => ap_channel_done_output_l1_0,
        t_empty_n => output_l1_0_t_empty_n,
        t_read => runOutputL1toL2_U0_ap_ready);

    output_l1_1_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runSysArr_U0_output_l1_122_i_address0,
        i_ce0 => runSysArr_U0_output_l1_122_i_ce0,
        i_we0 => runSysArr_U0_output_l1_122_i_we0,
        i_d0 => runSysArr_U0_output_l1_122_i_d0,
        i_q0 => output_l1_1_i_q0,
        t_address0 => runOutputL1toL2_U0_output_l1_122_i_address0,
        t_ce0 => runOutputL1toL2_U0_output_l1_122_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_l1_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_l1_1_i_full_n,
        i_write => ap_channel_done_output_l1_1,
        t_empty_n => output_l1_1_t_empty_n,
        t_read => runOutputL1toL2_U0_ap_ready);

    output_l1_2_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runSysArr_U0_output_l1_223_i_address0,
        i_ce0 => runSysArr_U0_output_l1_223_i_ce0,
        i_we0 => runSysArr_U0_output_l1_223_i_we0,
        i_d0 => runSysArr_U0_output_l1_223_i_d0,
        i_q0 => output_l1_2_i_q0,
        t_address0 => runOutputL1toL2_U0_output_l1_223_i_address0,
        t_ce0 => runOutputL1toL2_U0_output_l1_223_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_l1_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_l1_2_i_full_n,
        i_write => ap_channel_done_output_l1_2,
        t_empty_n => output_l1_2_t_empty_n,
        t_read => runOutputL1toL2_U0_ap_ready);

    output_l1_3_U : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => runSysArr_U0_output_l1_324_i_address0,
        i_ce0 => runSysArr_U0_output_l1_324_i_ce0,
        i_we0 => runSysArr_U0_output_l1_324_i_we0,
        i_d0 => runSysArr_U0_output_l1_324_i_d0,
        i_q0 => output_l1_3_i_q0,
        t_address0 => runOutputL1toL2_U0_output_l1_324_i_address0,
        t_ce0 => runOutputL1toL2_U0_output_l1_324_i_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_l1_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_l1_3_i_full_n,
        i_write => ap_channel_done_output_l1_3,
        t_empty_n => output_l1_3_t_empty_n,
        t_read => runOutputL1toL2_U0_ap_ready);

    dataflow_in_loop_LOOP_S_OUTER_entry28_U0 : component Conv_sysarr_dataflow_in_loop_LOOP_S_OUTER_entry28
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_start,
        ap_done => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_done,
        ap_continue => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_continue,
        ap_idle => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_idle,
        ap_ready => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready,
        param => param,
        ko_1 => ko_1,
        co => co,
        ro => ro,
        so => so,
        ho => ho,
        wo => wo,
        param_out_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out_din,
        param_out_full_n => param_c_full_n,
        param_out_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out_write,
        param_out1_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out1_din,
        param_out1_full_n => param_c1_full_n,
        param_out1_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out1_write,
        ko_1_out_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ko_1_out_din,
        ko_1_out_full_n => ko_1_c_full_n,
        ko_1_out_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ko_1_out_write,
        co_out_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out_din,
        co_out_full_n => co_c_full_n,
        co_out_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out_write,
        co_out2_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out2_din,
        co_out2_full_n => co_c2_full_n,
        co_out2_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out2_write,
        ro_out_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out_din,
        ro_out_full_n => ro_c_full_n,
        ro_out_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out_write,
        ro_out3_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out3_din,
        ro_out3_full_n => ro_c3_full_n,
        ro_out3_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out3_write,
        so_out_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out_din,
        so_out_full_n => so_c_full_n,
        so_out_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out_write,
        so_out4_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out4_din,
        so_out4_full_n => so_c4_full_n,
        so_out4_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out4_write,
        ho_out_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out_din,
        ho_out_full_n => ho_c_full_n,
        ho_out_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out_write,
        ho_out5_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out5_din,
        ho_out5_full_n => ho_c5_full_n,
        ho_out5_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out5_write,
        wo_out_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out_din,
        wo_out_full_n => wo_c_full_n,
        wo_out_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out_write,
        wo_out6_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out6_din,
        wo_out6_full_n => wo_c6_full_n,
        wo_out6_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out6_write);

    runWeight2Reg_U0 : component Conv_sysarr_runWeight2Reg
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => runWeight2Reg_U0_ap_start,
        ap_done => runWeight2Reg_U0_ap_done,
        ap_continue => runWeight2Reg_U0_ap_continue,
        ap_idle => runWeight2Reg_U0_ap_idle,
        ap_ready => runWeight2Reg_U0_ap_ready,
        param_dout => param_c_dout,
        param_empty_n => param_c_empty_n,
        param_read => runWeight2Reg_U0_param_read,
        ko_1_dout => ko_1_c_dout,
        ko_1_empty_n => ko_1_c_empty_n,
        ko_1_read => runWeight2Reg_U0_ko_1_read,
        co_dout => co_c_dout,
        co_empty_n => co_c_empty_n,
        co_read => runWeight2Reg_U0_co_read,
        ro_dout => ro_c_dout,
        ro_empty_n => ro_c_empty_n,
        ro_read => runWeight2Reg_U0_ro_read,
        so_dout => so_c_dout,
        so_empty_n => so_c_empty_n,
        so_read => runWeight2Reg_U0_so_read,
        weight_l2_0_address0 => runWeight2Reg_U0_weight_l2_0_address0,
        weight_l2_0_ce0 => runWeight2Reg_U0_weight_l2_0_ce0,
        weight_l2_0_q0 => weight_l2_0_q0,
        weight_l2_1_address0 => runWeight2Reg_U0_weight_l2_1_address0,
        weight_l2_1_ce0 => runWeight2Reg_U0_weight_l2_1_ce0,
        weight_l2_1_q0 => weight_l2_1_q0,
        weight_l2_2_address0 => runWeight2Reg_U0_weight_l2_2_address0,
        weight_l2_2_ce0 => runWeight2Reg_U0_weight_l2_2_ce0,
        weight_l2_2_q0 => weight_l2_2_q0,
        weight_l2_3_address0 => runWeight2Reg_U0_weight_l2_3_address0,
        weight_l2_3_ce0 => runWeight2Reg_U0_weight_l2_3_ce0,
        weight_l2_3_q0 => weight_l2_3_q0,
        param_out_din => runWeight2Reg_U0_param_out_din,
        param_out_full_n => param_c7_full_n,
        param_out_write => runWeight2Reg_U0_param_out_write,
        ko_1_out_din => runWeight2Reg_U0_ko_1_out_din,
        ko_1_out_full_n => ko_1_c8_full_n,
        ko_1_out_write => runWeight2Reg_U0_ko_1_out_write,
        co_out_din => runWeight2Reg_U0_co_out_din,
        co_out_full_n => co_c9_full_n,
        co_out_write => runWeight2Reg_U0_co_out_write,
        ro_out_din => runWeight2Reg_U0_ro_out_din,
        ro_out_full_n => ro_c10_full_n,
        ro_out_write => runWeight2Reg_U0_ro_out_write,
        so_out_din => runWeight2Reg_U0_so_out_din,
        so_out_full_n => so_c11_full_n,
        so_out_write => runWeight2Reg_U0_so_out_write,
        ap_return_0 => runWeight2Reg_U0_ap_return_0,
        ap_return_1 => runWeight2Reg_U0_ap_return_1,
        ap_return_2 => runWeight2Reg_U0_ap_return_2,
        ap_return_3 => runWeight2Reg_U0_ap_return_3,
        ap_return_4 => runWeight2Reg_U0_ap_return_4,
        ap_return_5 => runWeight2Reg_U0_ap_return_5,
        ap_return_6 => runWeight2Reg_U0_ap_return_6,
        ap_return_7 => runWeight2Reg_U0_ap_return_7,
        ap_return_8 => runWeight2Reg_U0_ap_return_8,
        ap_return_9 => runWeight2Reg_U0_ap_return_9,
        ap_return_10 => runWeight2Reg_U0_ap_return_10,
        ap_return_11 => runWeight2Reg_U0_ap_return_11,
        ap_return_12 => runWeight2Reg_U0_ap_return_12,
        ap_return_13 => runWeight2Reg_U0_ap_return_13,
        ap_return_14 => runWeight2Reg_U0_ap_return_14,
        ap_return_15 => runWeight2Reg_U0_ap_return_15);

    runDataL2toL1_U0 : component Conv_sysarr_runDataL2toL1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => runDataL2toL1_U0_ap_start,
        ap_done => runDataL2toL1_U0_ap_done,
        ap_continue => runDataL2toL1_U0_ap_continue,
        ap_idle => runDataL2toL1_U0_ap_idle,
        ap_ready => runDataL2toL1_U0_ap_ready,
        data_l1_017_i_address0 => runDataL2toL1_U0_data_l1_017_i_address0,
        data_l1_017_i_ce0 => runDataL2toL1_U0_data_l1_017_i_ce0,
        data_l1_017_i_we0 => runDataL2toL1_U0_data_l1_017_i_we0,
        data_l1_017_i_d0 => runDataL2toL1_U0_data_l1_017_i_d0,
        data_l1_118_i_address0 => runDataL2toL1_U0_data_l1_118_i_address0,
        data_l1_118_i_ce0 => runDataL2toL1_U0_data_l1_118_i_ce0,
        data_l1_118_i_we0 => runDataL2toL1_U0_data_l1_118_i_we0,
        data_l1_118_i_d0 => runDataL2toL1_U0_data_l1_118_i_d0,
        data_l1_219_i_address0 => runDataL2toL1_U0_data_l1_219_i_address0,
        data_l1_219_i_ce0 => runDataL2toL1_U0_data_l1_219_i_ce0,
        data_l1_219_i_we0 => runDataL2toL1_U0_data_l1_219_i_we0,
        data_l1_219_i_d0 => runDataL2toL1_U0_data_l1_219_i_d0,
        data_l1_320_i_address0 => runDataL2toL1_U0_data_l1_320_i_address0,
        data_l1_320_i_ce0 => runDataL2toL1_U0_data_l1_320_i_ce0,
        data_l1_320_i_we0 => runDataL2toL1_U0_data_l1_320_i_we0,
        data_l1_320_i_d0 => runDataL2toL1_U0_data_l1_320_i_d0,
        param_dout => param_c1_dout,
        param_empty_n => param_c1_empty_n,
        param_read => runDataL2toL1_U0_param_read,
        co_dout => co_c2_dout,
        co_empty_n => co_c2_empty_n,
        co_read => runDataL2toL1_U0_co_read,
        ho_dout => ho_c_dout,
        ho_empty_n => ho_c_empty_n,
        ho_read => runDataL2toL1_U0_ho_read,
        wo_dout => wo_c_dout,
        wo_empty_n => wo_c_empty_n,
        wo_read => runDataL2toL1_U0_wo_read,
        ro_dout => ro_c3_dout,
        ro_empty_n => ro_c3_empty_n,
        ro_read => runDataL2toL1_U0_ro_read,
        so_dout => so_c4_dout,
        so_empty_n => so_c4_empty_n,
        so_read => runDataL2toL1_U0_so_read,
        data_l2_0_address0 => runDataL2toL1_U0_data_l2_0_address0,
        data_l2_0_ce0 => runDataL2toL1_U0_data_l2_0_ce0,
        data_l2_0_q0 => data_l2_0_q0,
        data_l2_1_address0 => runDataL2toL1_U0_data_l2_1_address0,
        data_l2_1_ce0 => runDataL2toL1_U0_data_l2_1_ce0,
        data_l2_1_q0 => data_l2_1_q0,
        data_l2_2_address0 => runDataL2toL1_U0_data_l2_2_address0,
        data_l2_2_ce0 => runDataL2toL1_U0_data_l2_2_ce0,
        data_l2_2_q0 => data_l2_2_q0,
        data_l2_3_address0 => runDataL2toL1_U0_data_l2_3_address0,
        data_l2_3_ce0 => runDataL2toL1_U0_data_l2_3_ce0,
        data_l2_3_q0 => data_l2_3_q0);

    runSysArr_U0 : component Conv_sysarr_runSysArr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => runSysArr_U0_ap_start,
        ap_done => runSysArr_U0_ap_done,
        ap_continue => runSysArr_U0_ap_continue,
        ap_idle => runSysArr_U0_ap_idle,
        ap_ready => runSysArr_U0_ap_ready,
        p_read => weight_regfile_0_0_dout,
        p_read1 => weight_regfile_0_1_dout,
        p_read2 => weight_regfile_0_2_dout,
        p_read3 => weight_regfile_0_3_dout,
        p_read4 => weight_regfile_1_0_dout,
        p_read5 => weight_regfile_1_1_dout,
        p_read6 => weight_regfile_1_2_dout,
        p_read7 => weight_regfile_1_3_dout,
        p_read8 => weight_regfile_2_0_dout,
        p_read9 => weight_regfile_2_1_dout,
        p_read10 => weight_regfile_2_2_dout,
        p_read11 => weight_regfile_2_3_dout,
        p_read12 => weight_regfile_3_0_dout,
        p_read13 => weight_regfile_3_1_dout,
        p_read14 => weight_regfile_3_2_dout,
        p_read15 => weight_regfile_3_3_dout,
        data_l1_017_i_address0 => runSysArr_U0_data_l1_017_i_address0,
        data_l1_017_i_ce0 => runSysArr_U0_data_l1_017_i_ce0,
        data_l1_017_i_q0 => data_l1_0_t_q0,
        data_l1_118_i_address0 => runSysArr_U0_data_l1_118_i_address0,
        data_l1_118_i_ce0 => runSysArr_U0_data_l1_118_i_ce0,
        data_l1_118_i_q0 => data_l1_1_t_q0,
        data_l1_219_i_address0 => runSysArr_U0_data_l1_219_i_address0,
        data_l1_219_i_ce0 => runSysArr_U0_data_l1_219_i_ce0,
        data_l1_219_i_q0 => data_l1_2_t_q0,
        data_l1_320_i_address0 => runSysArr_U0_data_l1_320_i_address0,
        data_l1_320_i_ce0 => runSysArr_U0_data_l1_320_i_ce0,
        data_l1_320_i_q0 => data_l1_3_t_q0,
        output_l1_021_i_address0 => runSysArr_U0_output_l1_021_i_address0,
        output_l1_021_i_ce0 => runSysArr_U0_output_l1_021_i_ce0,
        output_l1_021_i_we0 => runSysArr_U0_output_l1_021_i_we0,
        output_l1_021_i_d0 => runSysArr_U0_output_l1_021_i_d0,
        output_l1_122_i_address0 => runSysArr_U0_output_l1_122_i_address0,
        output_l1_122_i_ce0 => runSysArr_U0_output_l1_122_i_ce0,
        output_l1_122_i_we0 => runSysArr_U0_output_l1_122_i_we0,
        output_l1_122_i_d0 => runSysArr_U0_output_l1_122_i_d0,
        output_l1_223_i_address0 => runSysArr_U0_output_l1_223_i_address0,
        output_l1_223_i_ce0 => runSysArr_U0_output_l1_223_i_ce0,
        output_l1_223_i_we0 => runSysArr_U0_output_l1_223_i_we0,
        output_l1_223_i_d0 => runSysArr_U0_output_l1_223_i_d0,
        output_l1_324_i_address0 => runSysArr_U0_output_l1_324_i_address0,
        output_l1_324_i_ce0 => runSysArr_U0_output_l1_324_i_ce0,
        output_l1_324_i_we0 => runSysArr_U0_output_l1_324_i_we0,
        output_l1_324_i_d0 => runSysArr_U0_output_l1_324_i_d0,
        param_dout => param_c7_dout,
        param_empty_n => param_c7_empty_n,
        param_read => runSysArr_U0_param_read,
        param_out_din => runSysArr_U0_param_out_din,
        param_out_full_n => param_c12_full_n,
        param_out_write => runSysArr_U0_param_out_write);

    runOutputL1toL2_U0 : component Conv_sysarr_runOutputL1toL2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => runOutputL1toL2_U0_ap_start,
        ap_done => runOutputL1toL2_U0_ap_done,
        ap_continue => runOutputL1toL2_U0_ap_continue,
        ap_idle => runOutputL1toL2_U0_ap_idle,
        ap_ready => runOutputL1toL2_U0_ap_ready,
        output_l1_021_i_address0 => runOutputL1toL2_U0_output_l1_021_i_address0,
        output_l1_021_i_ce0 => runOutputL1toL2_U0_output_l1_021_i_ce0,
        output_l1_021_i_q0 => output_l1_0_t_q0,
        output_l1_122_i_address0 => runOutputL1toL2_U0_output_l1_122_i_address0,
        output_l1_122_i_ce0 => runOutputL1toL2_U0_output_l1_122_i_ce0,
        output_l1_122_i_q0 => output_l1_1_t_q0,
        output_l1_223_i_address0 => runOutputL1toL2_U0_output_l1_223_i_address0,
        output_l1_223_i_ce0 => runOutputL1toL2_U0_output_l1_223_i_ce0,
        output_l1_223_i_q0 => output_l1_2_t_q0,
        output_l1_324_i_address0 => runOutputL1toL2_U0_output_l1_324_i_address0,
        output_l1_324_i_ce0 => runOutputL1toL2_U0_output_l1_324_i_ce0,
        output_l1_324_i_q0 => output_l1_3_t_q0,
        param_dout => param_c12_dout,
        param_empty_n => param_c12_empty_n,
        param_read => runOutputL1toL2_U0_param_read,
        ko_1_dout => ko_1_c8_dout,
        ko_1_empty_n => ko_1_c8_empty_n,
        ko_1_read => runOutputL1toL2_U0_ko_1_read,
        ho_dout => ho_c5_dout,
        ho_empty_n => ho_c5_empty_n,
        ho_read => runOutputL1toL2_U0_ho_read,
        wo_dout => wo_c6_dout,
        wo_empty_n => wo_c6_empty_n,
        wo_read => runOutputL1toL2_U0_wo_read,
        ro_dout => ro_c10_dout,
        ro_empty_n => ro_c10_empty_n,
        ro_read => runOutputL1toL2_U0_ro_read,
        co_dout => co_c9_dout,
        co_empty_n => co_c9_empty_n,
        co_read => runOutputL1toL2_U0_co_read,
        so_dout => so_c11_dout,
        so_empty_n => so_c11_empty_n,
        so_read => runOutputL1toL2_U0_so_read,
        output_l2_0_address0 => runOutputL1toL2_U0_output_l2_0_address0,
        output_l2_0_ce0 => runOutputL1toL2_U0_output_l2_0_ce0,
        output_l2_0_we0 => runOutputL1toL2_U0_output_l2_0_we0,
        output_l2_0_d0 => runOutputL1toL2_U0_output_l2_0_d0,
        output_l2_1_address0 => runOutputL1toL2_U0_output_l2_1_address0,
        output_l2_1_ce0 => runOutputL1toL2_U0_output_l2_1_ce0,
        output_l2_1_we0 => runOutputL1toL2_U0_output_l2_1_we0,
        output_l2_1_d0 => runOutputL1toL2_U0_output_l2_1_d0,
        output_l2_2_address0 => runOutputL1toL2_U0_output_l2_2_address0,
        output_l2_2_ce0 => runOutputL1toL2_U0_output_l2_2_ce0,
        output_l2_2_we0 => runOutputL1toL2_U0_output_l2_2_we0,
        output_l2_2_d0 => runOutputL1toL2_U0_output_l2_2_d0,
        output_l2_3_address0 => runOutputL1toL2_U0_output_l2_3_address0,
        output_l2_3_ce0 => runOutputL1toL2_U0_output_l2_3_ce0,
        output_l2_3_we0 => runOutputL1toL2_U0_output_l2_3_we0,
        output_l2_3_d0 => runOutputL1toL2_U0_output_l2_3_d0);

    param_c_U : component Conv_sysarr_fifo_w1184_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out_din,
        if_full_n => param_c_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out_write,
        if_dout => param_c_dout,
        if_empty_n => param_c_empty_n,
        if_read => runWeight2Reg_U0_param_read);

    param_c1_U : component Conv_sysarr_fifo_w1120_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out1_din,
        if_full_n => param_c1_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_param_out1_write,
        if_dout => param_c1_dout,
        if_empty_n => param_c1_empty_n,
        if_read => runDataL2toL1_U0_param_read);

    ko_1_c_U : component Conv_sysarr_fifo_w12_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ko_1_out_din,
        if_full_n => ko_1_c_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ko_1_out_write,
        if_dout => ko_1_c_dout,
        if_empty_n => ko_1_c_empty_n,
        if_read => runWeight2Reg_U0_ko_1_read);

    co_c_U : component Conv_sysarr_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out_din,
        if_full_n => co_c_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out_write,
        if_dout => co_c_dout,
        if_empty_n => co_c_empty_n,
        if_read => runWeight2Reg_U0_co_read);

    co_c2_U : component Conv_sysarr_fifo_w11_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out2_din,
        if_full_n => co_c2_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_co_out2_write,
        if_dout => co_c2_dout,
        if_empty_n => co_c2_empty_n,
        if_read => runDataL2toL1_U0_co_read);

    ro_c_U : component Conv_sysarr_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out_din,
        if_full_n => ro_c_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out_write,
        if_dout => ro_c_dout,
        if_empty_n => ro_c_empty_n,
        if_read => runWeight2Reg_U0_ro_read);

    ro_c3_U : component Conv_sysarr_fifo_w11_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out3_din,
        if_full_n => ro_c3_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ro_out3_write,
        if_dout => ro_c3_dout,
        if_empty_n => ro_c3_empty_n,
        if_read => runDataL2toL1_U0_ro_read);

    so_c_U : component Conv_sysarr_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out_din,
        if_full_n => so_c_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out_write,
        if_dout => so_c_dout,
        if_empty_n => so_c_empty_n,
        if_read => runWeight2Reg_U0_so_read);

    so_c4_U : component Conv_sysarr_fifo_w11_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out4_din,
        if_full_n => so_c4_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_so_out4_write,
        if_dout => so_c4_dout,
        if_empty_n => so_c4_empty_n,
        if_read => runDataL2toL1_U0_so_read);

    ho_c_U : component Conv_sysarr_fifo_w11_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out_din,
        if_full_n => ho_c_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out_write,
        if_dout => ho_c_dout,
        if_empty_n => ho_c_empty_n,
        if_read => runDataL2toL1_U0_ho_read);

    ho_c5_U : component Conv_sysarr_fifo_w11_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out5_din,
        if_full_n => ho_c5_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ho_out5_write,
        if_dout => ho_c5_dout,
        if_empty_n => ho_c5_empty_n,
        if_read => runOutputL1toL2_U0_ho_read);

    wo_c_U : component Conv_sysarr_fifo_w11_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out_din,
        if_full_n => wo_c_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out_write,
        if_dout => wo_c_dout,
        if_empty_n => wo_c_empty_n,
        if_read => runDataL2toL1_U0_wo_read);

    wo_c6_U : component Conv_sysarr_fifo_w11_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out6_din,
        if_full_n => wo_c6_full_n,
        if_write => dataflow_in_loop_LOOP_S_OUTER_entry28_U0_wo_out6_write,
        if_dout => wo_c6_dout,
        if_empty_n => wo_c6_empty_n,
        if_read => runOutputL1toL2_U0_wo_read);

    param_c7_U : component Conv_sysarr_fifo_w1184_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_param_out_din,
        if_full_n => param_c7_full_n,
        if_write => runWeight2Reg_U0_param_out_write,
        if_dout => param_c7_dout,
        if_empty_n => param_c7_empty_n,
        if_read => runSysArr_U0_param_read);

    ko_1_c8_U : component Conv_sysarr_fifo_w11_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ko_1_out_din,
        if_full_n => ko_1_c8_full_n,
        if_write => runWeight2Reg_U0_ko_1_out_write,
        if_dout => ko_1_c8_dout,
        if_empty_n => ko_1_c8_empty_n,
        if_read => runOutputL1toL2_U0_ko_1_read);

    co_c9_U : component Conv_sysarr_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_co_out_din,
        if_full_n => co_c9_full_n,
        if_write => runWeight2Reg_U0_co_out_write,
        if_dout => co_c9_dout,
        if_empty_n => co_c9_empty_n,
        if_read => runOutputL1toL2_U0_co_read);

    ro_c10_U : component Conv_sysarr_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ro_out_din,
        if_full_n => ro_c10_full_n,
        if_write => runWeight2Reg_U0_ro_out_write,
        if_dout => ro_c10_dout,
        if_empty_n => ro_c10_empty_n,
        if_read => runOutputL1toL2_U0_ro_read);

    so_c11_U : component Conv_sysarr_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_so_out_din,
        if_full_n => so_c11_full_n,
        if_write => runWeight2Reg_U0_so_out_write,
        if_dout => so_c11_dout,
        if_empty_n => so_c11_empty_n,
        if_read => runOutputL1toL2_U0_so_read);

    weight_regfile_0_0_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_0,
        if_full_n => weight_regfile_0_0_full_n,
        if_write => ap_channel_done_weight_regfile_0_0,
        if_dout => weight_regfile_0_0_dout,
        if_empty_n => weight_regfile_0_0_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_0_1_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_1,
        if_full_n => weight_regfile_0_1_full_n,
        if_write => ap_channel_done_weight_regfile_0_1,
        if_dout => weight_regfile_0_1_dout,
        if_empty_n => weight_regfile_0_1_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_0_2_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_2,
        if_full_n => weight_regfile_0_2_full_n,
        if_write => ap_channel_done_weight_regfile_0_2,
        if_dout => weight_regfile_0_2_dout,
        if_empty_n => weight_regfile_0_2_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_0_3_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_3,
        if_full_n => weight_regfile_0_3_full_n,
        if_write => ap_channel_done_weight_regfile_0_3,
        if_dout => weight_regfile_0_3_dout,
        if_empty_n => weight_regfile_0_3_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_1_0_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_4,
        if_full_n => weight_regfile_1_0_full_n,
        if_write => ap_channel_done_weight_regfile_1_0,
        if_dout => weight_regfile_1_0_dout,
        if_empty_n => weight_regfile_1_0_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_1_1_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_5,
        if_full_n => weight_regfile_1_1_full_n,
        if_write => ap_channel_done_weight_regfile_1_1,
        if_dout => weight_regfile_1_1_dout,
        if_empty_n => weight_regfile_1_1_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_1_2_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_6,
        if_full_n => weight_regfile_1_2_full_n,
        if_write => ap_channel_done_weight_regfile_1_2,
        if_dout => weight_regfile_1_2_dout,
        if_empty_n => weight_regfile_1_2_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_1_3_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_7,
        if_full_n => weight_regfile_1_3_full_n,
        if_write => ap_channel_done_weight_regfile_1_3,
        if_dout => weight_regfile_1_3_dout,
        if_empty_n => weight_regfile_1_3_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_2_0_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_8,
        if_full_n => weight_regfile_2_0_full_n,
        if_write => ap_channel_done_weight_regfile_2_0,
        if_dout => weight_regfile_2_0_dout,
        if_empty_n => weight_regfile_2_0_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_2_1_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_9,
        if_full_n => weight_regfile_2_1_full_n,
        if_write => ap_channel_done_weight_regfile_2_1,
        if_dout => weight_regfile_2_1_dout,
        if_empty_n => weight_regfile_2_1_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_2_2_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_10,
        if_full_n => weight_regfile_2_2_full_n,
        if_write => ap_channel_done_weight_regfile_2_2,
        if_dout => weight_regfile_2_2_dout,
        if_empty_n => weight_regfile_2_2_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_2_3_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_11,
        if_full_n => weight_regfile_2_3_full_n,
        if_write => ap_channel_done_weight_regfile_2_3,
        if_dout => weight_regfile_2_3_dout,
        if_empty_n => weight_regfile_2_3_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_3_0_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_12,
        if_full_n => weight_regfile_3_0_full_n,
        if_write => ap_channel_done_weight_regfile_3_0,
        if_dout => weight_regfile_3_0_dout,
        if_empty_n => weight_regfile_3_0_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_3_1_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_13,
        if_full_n => weight_regfile_3_1_full_n,
        if_write => ap_channel_done_weight_regfile_3_1,
        if_dout => weight_regfile_3_1_dout,
        if_empty_n => weight_regfile_3_1_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_3_2_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_14,
        if_full_n => weight_regfile_3_2_full_n,
        if_write => ap_channel_done_weight_regfile_3_2,
        if_dout => weight_regfile_3_2_dout,
        if_empty_n => weight_regfile_3_2_empty_n,
        if_read => runSysArr_U0_ap_ready);

    weight_regfile_3_3_U : component Conv_sysarr_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runWeight2Reg_U0_ap_return_15,
        if_full_n => weight_regfile_3_3_full_n,
        if_write => ap_channel_done_weight_regfile_3_3,
        if_dout => weight_regfile_3_3_dout,
        if_empty_n => weight_regfile_3_3_empty_n,
        if_read => runSysArr_U0_ap_ready);

    param_c12_U : component Conv_sysarr_fifo_w1120_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => runSysArr_U0_param_out_din,
        if_full_n => param_c12_full_n,
        if_write => runSysArr_U0_param_out_write,
        if_dout => param_c12_dout,
        if_empty_n => param_c12_empty_n,
        if_read => runOutputL1toL2_U0_param_read);





    ap_sync_reg_channel_write_data_l1_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_l1_0 <= ap_const_logic_0;
            else
                if (((runDataL2toL1_U0_ap_done and runDataL2toL1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_l1_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_l1_0 <= ap_sync_channel_write_data_l1_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_l1_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_l1_1 <= ap_const_logic_0;
            else
                if (((runDataL2toL1_U0_ap_done and runDataL2toL1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_l1_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_l1_1 <= ap_sync_channel_write_data_l1_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_l1_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_l1_2 <= ap_const_logic_0;
            else
                if (((runDataL2toL1_U0_ap_done and runDataL2toL1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_l1_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_l1_2 <= ap_sync_channel_write_data_l1_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_l1_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_l1_3 <= ap_const_logic_0;
            else
                if (((runDataL2toL1_U0_ap_done and runDataL2toL1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_l1_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_l1_3 <= ap_sync_channel_write_data_l1_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_l1_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_output_l1_0 <= ap_const_logic_0;
            else
                if (((runSysArr_U0_ap_done and runSysArr_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_l1_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_l1_0 <= ap_sync_channel_write_output_l1_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_l1_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_output_l1_1 <= ap_const_logic_0;
            else
                if (((runSysArr_U0_ap_done and runSysArr_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_l1_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_l1_1 <= ap_sync_channel_write_output_l1_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_l1_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_output_l1_2 <= ap_const_logic_0;
            else
                if (((runSysArr_U0_ap_done and runSysArr_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_l1_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_l1_2 <= ap_sync_channel_write_output_l1_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_output_l1_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_output_l1_3 <= ap_const_logic_0;
            else
                if (((runSysArr_U0_ap_done and runSysArr_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_output_l1_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_output_l1_3 <= ap_sync_channel_write_output_l1_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_0_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_0_0 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_0_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_0_0 <= ap_sync_channel_write_weight_regfile_0_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_0_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_0_1 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_0_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_0_1 <= ap_sync_channel_write_weight_regfile_0_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_0_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_0_2 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_0_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_0_2 <= ap_sync_channel_write_weight_regfile_0_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_0_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_0_3 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_0_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_0_3 <= ap_sync_channel_write_weight_regfile_0_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_1_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_1_0 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_1_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_1_0 <= ap_sync_channel_write_weight_regfile_1_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_1_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_1_1 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_1_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_1_1 <= ap_sync_channel_write_weight_regfile_1_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_1_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_1_2 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_1_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_1_2 <= ap_sync_channel_write_weight_regfile_1_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_1_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_1_3 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_1_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_1_3 <= ap_sync_channel_write_weight_regfile_1_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_2_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_2_0 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_2_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_2_0 <= ap_sync_channel_write_weight_regfile_2_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_2_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_2_1 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_2_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_2_1 <= ap_sync_channel_write_weight_regfile_2_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_2_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_2_2 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_2_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_2_2 <= ap_sync_channel_write_weight_regfile_2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_2_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_2_3 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_2_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_2_3 <= ap_sync_channel_write_weight_regfile_2_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_3_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_3_0 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_3_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_3_0 <= ap_sync_channel_write_weight_regfile_3_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_3_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_3_1 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_3_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_3_1 <= ap_sync_channel_write_weight_regfile_3_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_3_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_3_2 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_3_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_3_2 <= ap_sync_channel_write_weight_regfile_3_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_weight_regfile_3_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_weight_regfile_3_3 <= ap_const_logic_0;
            else
                if (((runWeight2Reg_U0_ap_done and runWeight2Reg_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_weight_regfile_3_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_weight_regfile_3_3 <= ap_sync_channel_write_weight_regfile_3_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready <= ap_sync_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_runDataL2toL1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_runDataL2toL1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_runDataL2toL1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_runDataL2toL1_U0_ap_ready <= ap_sync_runDataL2toL1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_runWeight2Reg_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_runWeight2Reg_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_runWeight2Reg_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_runWeight2Reg_U0_ap_ready <= ap_sync_runWeight2Reg_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready_count <= std_logic_vector(unsigned(dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready_count <= std_logic_vector(unsigned(dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    runDataL2toL1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((runDataL2toL1_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                runDataL2toL1_U0_ap_ready_count <= std_logic_vector(unsigned(runDataL2toL1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((runDataL2toL1_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                runDataL2toL1_U0_ap_ready_count <= std_logic_vector(unsigned(runDataL2toL1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    runWeight2Reg_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((runWeight2Reg_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                runWeight2Reg_U0_ap_ready_count <= std_logic_vector(unsigned(runWeight2Reg_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((runWeight2Reg_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                runWeight2Reg_U0_ap_ready_count <= std_logic_vector(unsigned(runWeight2Reg_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_channel_done_data_l1_0 <= (runDataL2toL1_U0_ap_done and (ap_sync_reg_channel_write_data_l1_0 xor ap_const_logic_1));
    ap_channel_done_data_l1_1 <= (runDataL2toL1_U0_ap_done and (ap_sync_reg_channel_write_data_l1_1 xor ap_const_logic_1));
    ap_channel_done_data_l1_2 <= (runDataL2toL1_U0_ap_done and (ap_sync_reg_channel_write_data_l1_2 xor ap_const_logic_1));
    ap_channel_done_data_l1_3 <= (runDataL2toL1_U0_ap_done and (ap_sync_reg_channel_write_data_l1_3 xor ap_const_logic_1));
    ap_channel_done_output_l1_0 <= (runSysArr_U0_ap_done and (ap_sync_reg_channel_write_output_l1_0 xor ap_const_logic_1));
    ap_channel_done_output_l1_1 <= (runSysArr_U0_ap_done and (ap_sync_reg_channel_write_output_l1_1 xor ap_const_logic_1));
    ap_channel_done_output_l1_2 <= (runSysArr_U0_ap_done and (ap_sync_reg_channel_write_output_l1_2 xor ap_const_logic_1));
    ap_channel_done_output_l1_3 <= (runSysArr_U0_ap_done and (ap_sync_reg_channel_write_output_l1_3 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_0_0 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_0_0 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_0_1 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_0_1 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_0_2 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_0_2 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_0_3 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_0_3 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_1_0 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_1_0 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_1_1 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_1_1 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_1_2 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_1_2 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_1_3 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_1_3 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_2_0 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_2_0 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_2_1 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_2_1 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_2_2 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_2_2 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_2_3 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_2_3 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_3_0 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_3_0 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_3_1 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_3_1 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_3_2 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_3_2 xor ap_const_logic_1));
    ap_channel_done_weight_regfile_3_3 <= (runWeight2Reg_U0_ap_done and (ap_sync_reg_channel_write_weight_regfile_3_3 xor ap_const_logic_1));
    ap_done <= runOutputL1toL2_U0_ap_done;
    ap_idle <= (runWeight2Reg_U0_ap_idle and runSysArr_U0_ap_idle and runOutputL1toL2_U0_ap_idle and runDataL2toL1_U0_ap_idle and (output_l1_3_t_empty_n xor ap_const_logic_1) and (output_l1_2_t_empty_n xor ap_const_logic_1) and (output_l1_1_t_empty_n xor ap_const_logic_1) and (output_l1_0_t_empty_n xor ap_const_logic_1) and (data_l1_3_t_empty_n xor ap_const_logic_1) and (data_l1_2_t_empty_n xor ap_const_logic_1) and (data_l1_1_t_empty_n xor ap_const_logic_1) and (data_l1_0_t_empty_n xor ap_const_logic_1) and (weight_regfile_3_3_empty_n xor ap_const_logic_1) and (weight_regfile_3_2_empty_n xor ap_const_logic_1) and (weight_regfile_3_1_empty_n xor ap_const_logic_1) and (weight_regfile_3_0_empty_n xor ap_const_logic_1) and (weight_regfile_2_3_empty_n xor ap_const_logic_1) and (weight_regfile_2_2_empty_n xor ap_const_logic_1) and (weight_regfile_2_1_empty_n xor ap_const_logic_1) and (weight_regfile_2_0_empty_n xor ap_const_logic_1) and (weight_regfile_1_3_empty_n xor ap_const_logic_1) and (weight_regfile_1_2_empty_n xor ap_const_logic_1) and (weight_regfile_1_1_empty_n xor ap_const_logic_1) and (weight_regfile_1_0_empty_n xor ap_const_logic_1) and (weight_regfile_0_3_empty_n xor ap_const_logic_1) and (weight_regfile_0_2_empty_n xor ap_const_logic_1) and (weight_regfile_0_1_empty_n xor ap_const_logic_1) and (weight_regfile_0_0_empty_n xor ap_const_logic_1) and dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_data_l1_0 <= ((runDataL2toL1_U0_data_l1_017_i_full_n and ap_channel_done_data_l1_0) or ap_sync_reg_channel_write_data_l1_0);
    ap_sync_channel_write_data_l1_1 <= ((runDataL2toL1_U0_data_l1_118_i_full_n and ap_channel_done_data_l1_1) or ap_sync_reg_channel_write_data_l1_1);
    ap_sync_channel_write_data_l1_2 <= ((runDataL2toL1_U0_data_l1_219_i_full_n and ap_channel_done_data_l1_2) or ap_sync_reg_channel_write_data_l1_2);
    ap_sync_channel_write_data_l1_3 <= ((runDataL2toL1_U0_data_l1_320_i_full_n and ap_channel_done_data_l1_3) or ap_sync_reg_channel_write_data_l1_3);
    ap_sync_channel_write_output_l1_0 <= ((runSysArr_U0_output_l1_021_i_full_n and ap_channel_done_output_l1_0) or ap_sync_reg_channel_write_output_l1_0);
    ap_sync_channel_write_output_l1_1 <= ((runSysArr_U0_output_l1_122_i_full_n and ap_channel_done_output_l1_1) or ap_sync_reg_channel_write_output_l1_1);
    ap_sync_channel_write_output_l1_2 <= ((runSysArr_U0_output_l1_223_i_full_n and ap_channel_done_output_l1_2) or ap_sync_reg_channel_write_output_l1_2);
    ap_sync_channel_write_output_l1_3 <= ((runSysArr_U0_output_l1_324_i_full_n and ap_channel_done_output_l1_3) or ap_sync_reg_channel_write_output_l1_3);
    ap_sync_channel_write_weight_regfile_0_0 <= ((weight_regfile_0_0_full_n and ap_channel_done_weight_regfile_0_0) or ap_sync_reg_channel_write_weight_regfile_0_0);
    ap_sync_channel_write_weight_regfile_0_1 <= ((weight_regfile_0_1_full_n and ap_channel_done_weight_regfile_0_1) or ap_sync_reg_channel_write_weight_regfile_0_1);
    ap_sync_channel_write_weight_regfile_0_2 <= ((weight_regfile_0_2_full_n and ap_channel_done_weight_regfile_0_2) or ap_sync_reg_channel_write_weight_regfile_0_2);
    ap_sync_channel_write_weight_regfile_0_3 <= ((weight_regfile_0_3_full_n and ap_channel_done_weight_regfile_0_3) or ap_sync_reg_channel_write_weight_regfile_0_3);
    ap_sync_channel_write_weight_regfile_1_0 <= ((weight_regfile_1_0_full_n and ap_channel_done_weight_regfile_1_0) or ap_sync_reg_channel_write_weight_regfile_1_0);
    ap_sync_channel_write_weight_regfile_1_1 <= ((weight_regfile_1_1_full_n and ap_channel_done_weight_regfile_1_1) or ap_sync_reg_channel_write_weight_regfile_1_1);
    ap_sync_channel_write_weight_regfile_1_2 <= ((weight_regfile_1_2_full_n and ap_channel_done_weight_regfile_1_2) or ap_sync_reg_channel_write_weight_regfile_1_2);
    ap_sync_channel_write_weight_regfile_1_3 <= ((weight_regfile_1_3_full_n and ap_channel_done_weight_regfile_1_3) or ap_sync_reg_channel_write_weight_regfile_1_3);
    ap_sync_channel_write_weight_regfile_2_0 <= ((weight_regfile_2_0_full_n and ap_channel_done_weight_regfile_2_0) or ap_sync_reg_channel_write_weight_regfile_2_0);
    ap_sync_channel_write_weight_regfile_2_1 <= ((weight_regfile_2_1_full_n and ap_channel_done_weight_regfile_2_1) or ap_sync_reg_channel_write_weight_regfile_2_1);
    ap_sync_channel_write_weight_regfile_2_2 <= ((weight_regfile_2_2_full_n and ap_channel_done_weight_regfile_2_2) or ap_sync_reg_channel_write_weight_regfile_2_2);
    ap_sync_channel_write_weight_regfile_2_3 <= ((weight_regfile_2_3_full_n and ap_channel_done_weight_regfile_2_3) or ap_sync_reg_channel_write_weight_regfile_2_3);
    ap_sync_channel_write_weight_regfile_3_0 <= ((weight_regfile_3_0_full_n and ap_channel_done_weight_regfile_3_0) or ap_sync_reg_channel_write_weight_regfile_3_0);
    ap_sync_channel_write_weight_regfile_3_1 <= ((weight_regfile_3_1_full_n and ap_channel_done_weight_regfile_3_1) or ap_sync_reg_channel_write_weight_regfile_3_1);
    ap_sync_channel_write_weight_regfile_3_2 <= ((weight_regfile_3_2_full_n and ap_channel_done_weight_regfile_3_2) or ap_sync_reg_channel_write_weight_regfile_3_2);
    ap_sync_channel_write_weight_regfile_3_3 <= ((weight_regfile_3_3_full_n and ap_channel_done_weight_regfile_3_3) or ap_sync_reg_channel_write_weight_regfile_3_3);
    ap_sync_continue <= ap_continue;
    ap_sync_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready <= (dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready or ap_sync_reg_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready);
    ap_sync_done <= runOutputL1toL2_U0_ap_done;
    ap_sync_ready <= (ap_sync_runWeight2Reg_U0_ap_ready and ap_sync_runDataL2toL1_U0_ap_ready and ap_sync_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready);
    ap_sync_runDataL2toL1_U0_ap_ready <= (runDataL2toL1_U0_ap_ready or ap_sync_reg_runDataL2toL1_U0_ap_ready);
    ap_sync_runWeight2Reg_U0_ap_ready <= (runWeight2Reg_U0_ap_ready or ap_sync_reg_runWeight2Reg_U0_ap_ready);
    data_l2_0_address0 <= runDataL2toL1_U0_data_l2_0_address0;
    data_l2_0_address1 <= ap_const_lv11_0;
    data_l2_0_ce0 <= runDataL2toL1_U0_data_l2_0_ce0;
    data_l2_0_ce1 <= ap_const_logic_0;
    data_l2_0_d0 <= ap_const_lv8_0;
    data_l2_0_d1 <= ap_const_lv8_0;
    data_l2_0_read <= runDataL2toL1_U0_data_l2_0_write;
    data_l2_0_we0 <= ap_const_logic_0;
    data_l2_0_we1 <= ap_const_logic_0;
    data_l2_1_address0 <= runDataL2toL1_U0_data_l2_1_address0;
    data_l2_1_address1 <= ap_const_lv11_0;
    data_l2_1_ce0 <= runDataL2toL1_U0_data_l2_1_ce0;
    data_l2_1_ce1 <= ap_const_logic_0;
    data_l2_1_d0 <= ap_const_lv8_0;
    data_l2_1_d1 <= ap_const_lv8_0;
    data_l2_1_read <= runDataL2toL1_U0_data_l2_1_write;
    data_l2_1_we0 <= ap_const_logic_0;
    data_l2_1_we1 <= ap_const_logic_0;
    data_l2_2_address0 <= runDataL2toL1_U0_data_l2_2_address0;
    data_l2_2_address1 <= ap_const_lv11_0;
    data_l2_2_ce0 <= runDataL2toL1_U0_data_l2_2_ce0;
    data_l2_2_ce1 <= ap_const_logic_0;
    data_l2_2_d0 <= ap_const_lv8_0;
    data_l2_2_d1 <= ap_const_lv8_0;
    data_l2_2_read <= runDataL2toL1_U0_data_l2_2_write;
    data_l2_2_we0 <= ap_const_logic_0;
    data_l2_2_we1 <= ap_const_logic_0;
    data_l2_3_address0 <= runDataL2toL1_U0_data_l2_3_address0;
    data_l2_3_address1 <= ap_const_lv11_0;
    data_l2_3_ce0 <= runDataL2toL1_U0_data_l2_3_ce0;
    data_l2_3_ce1 <= ap_const_logic_0;
    data_l2_3_d0 <= ap_const_lv8_0;
    data_l2_3_d1 <= ap_const_lv8_0;
    data_l2_3_read <= runDataL2toL1_U0_data_l2_3_write;
    data_l2_3_we0 <= ap_const_logic_0;
    data_l2_3_we1 <= ap_const_logic_0;
    dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_start <= ((ap_sync_reg_dataflow_in_loop_LOOP_S_OUTER_entry28_U0_ap_ready xor ap_const_logic_1) and ap_start);
    dataflow_in_loop_LOOP_S_OUTER_entry28_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_LOOP_S_OUTER_entry28_U0_start_write <= ap_const_logic_0;
    output_l2_0_address0 <= runOutputL1toL2_U0_output_l2_0_address0;
    output_l2_0_address1 <= ap_const_lv11_0;
    output_l2_0_ce0 <= runOutputL1toL2_U0_output_l2_0_ce0;
    output_l2_0_ce1 <= ap_const_logic_0;
    output_l2_0_d0 <= runOutputL1toL2_U0_output_l2_0_d0;
    output_l2_0_d1 <= ap_const_lv32_0;
    output_l2_0_we0 <= runOutputL1toL2_U0_output_l2_0_we0;
    output_l2_0_we1 <= ap_const_logic_0;
    output_l2_0_write <= runOutputL1toL2_U0_output_l2_0_write;
    output_l2_1_address0 <= runOutputL1toL2_U0_output_l2_1_address0;
    output_l2_1_address1 <= ap_const_lv11_0;
    output_l2_1_ce0 <= runOutputL1toL2_U0_output_l2_1_ce0;
    output_l2_1_ce1 <= ap_const_logic_0;
    output_l2_1_d0 <= runOutputL1toL2_U0_output_l2_1_d0;
    output_l2_1_d1 <= ap_const_lv32_0;
    output_l2_1_we0 <= runOutputL1toL2_U0_output_l2_1_we0;
    output_l2_1_we1 <= ap_const_logic_0;
    output_l2_1_write <= runOutputL1toL2_U0_output_l2_1_write;
    output_l2_2_address0 <= runOutputL1toL2_U0_output_l2_2_address0;
    output_l2_2_address1 <= ap_const_lv11_0;
    output_l2_2_ce0 <= runOutputL1toL2_U0_output_l2_2_ce0;
    output_l2_2_ce1 <= ap_const_logic_0;
    output_l2_2_d0 <= runOutputL1toL2_U0_output_l2_2_d0;
    output_l2_2_d1 <= ap_const_lv32_0;
    output_l2_2_we0 <= runOutputL1toL2_U0_output_l2_2_we0;
    output_l2_2_we1 <= ap_const_logic_0;
    output_l2_2_write <= runOutputL1toL2_U0_output_l2_2_write;
    output_l2_3_address0 <= runOutputL1toL2_U0_output_l2_3_address0;
    output_l2_3_address1 <= ap_const_lv11_0;
    output_l2_3_ce0 <= runOutputL1toL2_U0_output_l2_3_ce0;
    output_l2_3_ce1 <= ap_const_logic_0;
    output_l2_3_d0 <= runOutputL1toL2_U0_output_l2_3_d0;
    output_l2_3_d1 <= ap_const_lv32_0;
    output_l2_3_we0 <= runOutputL1toL2_U0_output_l2_3_we0;
    output_l2_3_we1 <= ap_const_logic_0;
    output_l2_3_write <= runOutputL1toL2_U0_output_l2_3_write;
    runDataL2toL1_U0_ap_continue <= (ap_sync_channel_write_data_l1_3 and ap_sync_channel_write_data_l1_2 and ap_sync_channel_write_data_l1_1 and ap_sync_channel_write_data_l1_0);
    runDataL2toL1_U0_ap_start <= ((ap_sync_reg_runDataL2toL1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    runDataL2toL1_U0_data_l1_017_i_full_n <= data_l1_0_i_full_n;
    runDataL2toL1_U0_data_l1_118_i_full_n <= data_l1_1_i_full_n;
    runDataL2toL1_U0_data_l1_219_i_full_n <= data_l1_2_i_full_n;
    runDataL2toL1_U0_data_l1_320_i_full_n <= data_l1_3_i_full_n;
    runDataL2toL1_U0_data_l2_0_full_n <= data_l2_0_empty_n;
    runDataL2toL1_U0_data_l2_0_write <= ap_const_logic_0;
    runDataL2toL1_U0_data_l2_1_full_n <= data_l2_1_empty_n;
    runDataL2toL1_U0_data_l2_1_write <= ap_const_logic_0;
    runDataL2toL1_U0_data_l2_2_full_n <= data_l2_2_empty_n;
    runDataL2toL1_U0_data_l2_2_write <= ap_const_logic_0;
    runDataL2toL1_U0_data_l2_3_full_n <= data_l2_3_empty_n;
    runDataL2toL1_U0_data_l2_3_write <= ap_const_logic_0;
    runDataL2toL1_U0_start_full_n <= ap_const_logic_1;
    runDataL2toL1_U0_start_write <= ap_const_logic_0;
    runOutputL1toL2_U0_ap_continue <= ap_continue;
    runOutputL1toL2_U0_ap_start <= (output_l1_3_t_empty_n and output_l1_2_t_empty_n and output_l1_1_t_empty_n and output_l1_0_t_empty_n);
    runOutputL1toL2_U0_output_l2_0_full_n <= output_l2_0_full_n;
    runOutputL1toL2_U0_output_l2_0_write <= ap_const_logic_0;
    runOutputL1toL2_U0_output_l2_1_full_n <= output_l2_1_full_n;
    runOutputL1toL2_U0_output_l2_1_write <= ap_const_logic_0;
    runOutputL1toL2_U0_output_l2_2_full_n <= output_l2_2_full_n;
    runOutputL1toL2_U0_output_l2_2_write <= ap_const_logic_0;
    runOutputL1toL2_U0_output_l2_3_full_n <= output_l2_3_full_n;
    runOutputL1toL2_U0_output_l2_3_write <= ap_const_logic_0;
    runOutputL1toL2_U0_start_full_n <= ap_const_logic_1;
    runOutputL1toL2_U0_start_write <= ap_const_logic_0;
    runSysArr_U0_ap_continue <= (ap_sync_channel_write_output_l1_3 and ap_sync_channel_write_output_l1_2 and ap_sync_channel_write_output_l1_1 and ap_sync_channel_write_output_l1_0);
    runSysArr_U0_ap_start <= (weight_regfile_3_3_empty_n and weight_regfile_3_2_empty_n and weight_regfile_3_1_empty_n and weight_regfile_3_0_empty_n and weight_regfile_2_3_empty_n and weight_regfile_2_2_empty_n and weight_regfile_2_1_empty_n and weight_regfile_2_0_empty_n and weight_regfile_1_3_empty_n and weight_regfile_1_2_empty_n and weight_regfile_1_1_empty_n and weight_regfile_1_0_empty_n and weight_regfile_0_3_empty_n and weight_regfile_0_2_empty_n and weight_regfile_0_1_empty_n and weight_regfile_0_0_empty_n and data_l1_3_t_empty_n and data_l1_2_t_empty_n and data_l1_1_t_empty_n and data_l1_0_t_empty_n);
    runSysArr_U0_output_l1_021_i_full_n <= output_l1_0_i_full_n;
    runSysArr_U0_output_l1_122_i_full_n <= output_l1_1_i_full_n;
    runSysArr_U0_output_l1_223_i_full_n <= output_l1_2_i_full_n;
    runSysArr_U0_output_l1_324_i_full_n <= output_l1_3_i_full_n;
    runSysArr_U0_start_full_n <= ap_const_logic_1;
    runSysArr_U0_start_write <= ap_const_logic_0;
    runWeight2Reg_U0_ap_continue <= (ap_sync_channel_write_weight_regfile_3_3 and ap_sync_channel_write_weight_regfile_3_2 and ap_sync_channel_write_weight_regfile_3_1 and ap_sync_channel_write_weight_regfile_3_0 and ap_sync_channel_write_weight_regfile_2_3 and ap_sync_channel_write_weight_regfile_2_2 and ap_sync_channel_write_weight_regfile_2_1 and ap_sync_channel_write_weight_regfile_2_0 and ap_sync_channel_write_weight_regfile_1_3 and ap_sync_channel_write_weight_regfile_1_2 and ap_sync_channel_write_weight_regfile_1_1 and ap_sync_channel_write_weight_regfile_1_0 and ap_sync_channel_write_weight_regfile_0_3 and ap_sync_channel_write_weight_regfile_0_2 and ap_sync_channel_write_weight_regfile_0_1 and ap_sync_channel_write_weight_regfile_0_0);
    runWeight2Reg_U0_ap_start <= ((ap_sync_reg_runWeight2Reg_U0_ap_ready xor ap_const_logic_1) and ap_start);
    runWeight2Reg_U0_start_full_n <= ap_const_logic_1;
    runWeight2Reg_U0_start_write <= ap_const_logic_0;
    runWeight2Reg_U0_weight_l2_0_full_n <= weight_l2_0_empty_n;
    runWeight2Reg_U0_weight_l2_0_write <= ap_const_logic_0;
    runWeight2Reg_U0_weight_l2_1_full_n <= weight_l2_1_empty_n;
    runWeight2Reg_U0_weight_l2_1_write <= ap_const_logic_0;
    runWeight2Reg_U0_weight_l2_2_full_n <= weight_l2_2_empty_n;
    runWeight2Reg_U0_weight_l2_2_write <= ap_const_logic_0;
    runWeight2Reg_U0_weight_l2_3_full_n <= weight_l2_3_empty_n;
    runWeight2Reg_U0_weight_l2_3_write <= ap_const_logic_0;
    weight_l2_0_address0 <= runWeight2Reg_U0_weight_l2_0_address0;
    weight_l2_0_address1 <= ap_const_lv12_0;
    weight_l2_0_ce0 <= runWeight2Reg_U0_weight_l2_0_ce0;
    weight_l2_0_ce1 <= ap_const_logic_0;
    weight_l2_0_d0 <= ap_const_lv8_0;
    weight_l2_0_d1 <= ap_const_lv8_0;
    weight_l2_0_read <= runWeight2Reg_U0_weight_l2_0_write;
    weight_l2_0_we0 <= ap_const_logic_0;
    weight_l2_0_we1 <= ap_const_logic_0;
    weight_l2_1_address0 <= runWeight2Reg_U0_weight_l2_1_address0;
    weight_l2_1_address1 <= ap_const_lv12_0;
    weight_l2_1_ce0 <= runWeight2Reg_U0_weight_l2_1_ce0;
    weight_l2_1_ce1 <= ap_const_logic_0;
    weight_l2_1_d0 <= ap_const_lv8_0;
    weight_l2_1_d1 <= ap_const_lv8_0;
    weight_l2_1_read <= runWeight2Reg_U0_weight_l2_1_write;
    weight_l2_1_we0 <= ap_const_logic_0;
    weight_l2_1_we1 <= ap_const_logic_0;
    weight_l2_2_address0 <= runWeight2Reg_U0_weight_l2_2_address0;
    weight_l2_2_address1 <= ap_const_lv12_0;
    weight_l2_2_ce0 <= runWeight2Reg_U0_weight_l2_2_ce0;
    weight_l2_2_ce1 <= ap_const_logic_0;
    weight_l2_2_d0 <= ap_const_lv8_0;
    weight_l2_2_d1 <= ap_const_lv8_0;
    weight_l2_2_read <= runWeight2Reg_U0_weight_l2_2_write;
    weight_l2_2_we0 <= ap_const_logic_0;
    weight_l2_2_we1 <= ap_const_logic_0;
    weight_l2_3_address0 <= runWeight2Reg_U0_weight_l2_3_address0;
    weight_l2_3_address1 <= ap_const_lv12_0;
    weight_l2_3_ce0 <= runWeight2Reg_U0_weight_l2_3_ce0;
    weight_l2_3_ce1 <= ap_const_logic_0;
    weight_l2_3_d0 <= ap_const_lv8_0;
    weight_l2_3_d1 <= ap_const_lv8_0;
    weight_l2_3_read <= runWeight2Reg_U0_weight_l2_3_write;
    weight_l2_3_we0 <= ap_const_logic_0;
    weight_l2_3_we1 <= ap_const_logic_0;
end behav;
