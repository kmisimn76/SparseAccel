-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_dataflow_parent_loop_proc17 is
port (
    lshr_ln334_4_cast : IN STD_LOGIC_VECTOR (31 downto 0);
    param_L2_TILENUM_S : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    bias_in : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_in : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in : IN STD_LOGIC_VECTOR (7 downto 0);
    param : IN STD_LOGIC_VECTOR (1183 downto 0);
    cmo : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    param_L2_TILENUM_S_ap_vld : IN STD_LOGIC;
    conv_out_i_ap_vld : IN STD_LOGIC;
    conv_out_o_ap_vld : OUT STD_LOGIC;
    bias_in_ap_vld : IN STD_LOGIC;
    weight_in_ap_vld : IN STD_LOGIC;
    data_in_ap_vld : IN STD_LOGIC;
    param_ap_vld : IN STD_LOGIC;
    cmo_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of Conv_sysarr_dataflow_parent_loop_proc17 is 
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal dataflow_parent_loop_proc_U0_conv_out_o : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_parent_loop_proc_U0_conv_out_o_ap_vld : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_start : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_done : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_ready : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_idle : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_ap_continue : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_param_L2_TILENUM_S_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_parent_loop_proc_U0_start_full_n : STD_LOGIC;
    signal dataflow_parent_loop_proc_U0_start_write : STD_LOGIC;

    component Conv_sysarr_dataflow_parent_loop_proc IS
    port (
        param_L2_TILENUM_S : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_in : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_in : IN STD_LOGIC_VECTOR (7 downto 0);
        data_in : IN STD_LOGIC_VECTOR (7 downto 0);
        param : IN STD_LOGIC_VECTOR (1183 downto 0);
        rmo : IN STD_LOGIC_VECTOR (31 downto 0);
        cmo : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        bias_in_ap_vld : IN STD_LOGIC;
        param_ap_vld : IN STD_LOGIC;
        weight_in_ap_vld : IN STD_LOGIC;
        data_in_ap_vld : IN STD_LOGIC;
        conv_out_i_ap_vld : IN STD_LOGIC;
        conv_out_o_ap_vld : OUT STD_LOGIC;
        rmo_ap_vld : IN STD_LOGIC;
        cmo_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_parent_loop_proc_U0 : component Conv_sysarr_dataflow_parent_loop_proc
    port map (
        param_L2_TILENUM_S => param_L2_TILENUM_S,
        conv_out_i => conv_out_i,
        conv_out_o => dataflow_parent_loop_proc_U0_conv_out_o,
        bias_in => bias_in,
        weight_in => weight_in,
        data_in => data_in,
        param => param,
        rmo => loop_dataflow_input_count,
        cmo => cmo,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        bias_in_ap_vld => bias_in_ap_vld,
        param_ap_vld => param_ap_vld,
        weight_in_ap_vld => weight_in_ap_vld,
        data_in_ap_vld => data_in_ap_vld,
        conv_out_i_ap_vld => conv_out_i_ap_vld,
        conv_out_o_ap_vld => dataflow_parent_loop_proc_U0_conv_out_o_ap_vld,
        rmo_ap_vld => ap_const_logic_0,
        cmo_ap_vld => cmo_ap_vld,
        ap_start => dataflow_parent_loop_proc_U0_ap_start,
        ap_done => dataflow_parent_loop_proc_U0_ap_done,
        ap_ready => dataflow_parent_loop_proc_U0_ap_ready,
        ap_idle => dataflow_parent_loop_proc_U0_ap_idle,
        ap_continue => dataflow_parent_loop_proc_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_parent_loop_proc_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_proc_U0_ap_continue = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_parent_loop_proc_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_parent_loop_proc_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_parent_loop_proc_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv32_0) and (ap_start = ap_const_logic_0) and (dataflow_parent_loop_proc_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_parent_loop_proc_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_parent_loop_proc_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_continue;
    ap_sync_done <= dataflow_parent_loop_proc_U0_ap_done;
    ap_sync_ready <= dataflow_parent_loop_proc_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(lshr_ln334_4_cast) - unsigned(ap_const_lv32_1));
    conv_out_o <= dataflow_parent_loop_proc_U0_conv_out_o;
    conv_out_o_ap_vld <= dataflow_parent_loop_proc_U0_conv_out_o_ap_vld;

    dataflow_parent_loop_proc_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_parent_loop_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_parent_loop_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_parent_loop_proc_U0_ap_start <= ap_start;
    dataflow_parent_loop_proc_U0_param_L2_TILENUM_S_ap_vld <= param_L2_TILENUM_S_ap_vld;
    dataflow_parent_loop_proc_U0_start_full_n <= ap_const_logic_1;
    dataflow_parent_loop_proc_U0_start_write <= ap_const_logic_0;
end behav;
