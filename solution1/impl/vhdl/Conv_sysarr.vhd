-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    K : IN STD_LOGIC_VECTOR (31 downto 0);
    C : IN STD_LOGIC_VECTOR (31 downto 0);
    WH : IN STD_LOGIC_VECTOR (31 downto 0);
    WH_in : IN STD_LOGIC_VECTOR (31 downto 0);
    RS : IN STD_LOGIC_VECTOR (31 downto 0);
    L2_TILENUM_K : IN STD_LOGIC_VECTOR (31 downto 0);
    L2_TILENUM_C : IN STD_LOGIC_VECTOR (31 downto 0);
    L2_TILENUM_W : IN STD_LOGIC_VECTOR (31 downto 0);
    L2_TILENUM_H : IN STD_LOGIC_VECTOR (31 downto 0);
    L2_TILENUM_R : IN STD_LOGIC_VECTOR (31 downto 0);
    L2_TILENUM_S : IN STD_LOGIC_VECTOR (31 downto 0);
    K_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    H_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_in_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    H_in_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    R_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
    L1_TILENUM_K : IN STD_LOGIC_VECTOR (31 downto 0);
    L1_TILENUM_C : IN STD_LOGIC_VECTOR (31 downto 0);
    L1_TILENUM_W : IN STD_LOGIC_VECTOR (31 downto 0);
    L1_TILENUM_H : IN STD_LOGIC_VECTOR (31 downto 0);
    L1_TILENUM_R : IN STD_LOGIC_VECTOR (31 downto 0);
    L1_TILENUM_S : IN STD_LOGIC_VECTOR (31 downto 0);
    K_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    H_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_in_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    H_in_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    R_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    S_L1 : IN STD_LOGIC_VECTOR (31 downto 0);
    TILESIZE_W : IN STD_LOGIC_VECTOR (31 downto 0);
    TILESIZE_H : IN STD_LOGIC_VECTOR (31 downto 0);
    TILESIZE_R : IN STD_LOGIC_VECTOR (31 downto 0);
    TILESIZE_S : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Conv_sysarr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv_sysarr_Conv_sysarr,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.321000,HLS_SYN_LAT=4998,HLS_SYN_TPT=none,HLS_SYN_MEM=1400,HLS_SYN_DSP=0,HLS_SYN_FF=83690,HLS_SYN_LUT=120668,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv35_1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_in : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_in : STD_LOGIC_VECTOR (63 downto 0);
    signal data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_out : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_l2_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_0_ce0 : STD_LOGIC;
    signal bias_l2_0_we0 : STD_LOGIC;
    signal bias_l2_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l2_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_1_ce0 : STD_LOGIC;
    signal bias_l2_1_we0 : STD_LOGIC;
    signal bias_l2_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l2_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_2_ce0 : STD_LOGIC;
    signal bias_l2_2_we0 : STD_LOGIC;
    signal bias_l2_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l2_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_3_ce0 : STD_LOGIC;
    signal bias_l2_3_we0 : STD_LOGIC;
    signal bias_l2_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l2_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_4_ce0 : STD_LOGIC;
    signal bias_l2_4_we0 : STD_LOGIC;
    signal bias_l2_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l2_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_5_ce0 : STD_LOGIC;
    signal bias_l2_5_we0 : STD_LOGIC;
    signal bias_l2_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l2_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_6_ce0 : STD_LOGIC;
    signal bias_l2_6_we0 : STD_LOGIC;
    signal bias_l2_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l2_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_7_ce0 : STD_LOGIC;
    signal bias_l2_7_we0 : STD_LOGIC;
    signal bias_l2_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln675_reg_2241 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln675_1_reg_2392 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem3_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal gmem3_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln687_reg_2485 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln687_reg_2485_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal cmp2153_reg_2412 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARVALID : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RREADY : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARVALID : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RREADY : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWVALID : STD_LOGIC;
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_WVALID : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem3_WLAST : STD_LOGIC;
    signal gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_ARVALID : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RREADY : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RLAST : STD_LOGIC;
    signal gmem3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BREADY : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ko_reg_1254 : STD_LOGIC_VECTOR (28 downto 0);
    signal indvar_flatten_reg_1277 : STD_LOGIC_VECTOR (34 downto 0);
    signal ki_reg_1288 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_1994 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state14_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state16_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv_out_read_reg_2213 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_in_read_reg_2219 : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_in_read_reg_2224 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_in_read_reg_2229 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_2006_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln_reg_2234 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln675_fu_2016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal empty_fu_2022_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_reg_2371 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_215_fu_2026_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_215_reg_2376 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln675_1_fu_2044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln675_1_reg_2392_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln675_fu_2049_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln675_reg_2396 : STD_LOGIC_VECTOR (28 downto 0);
    signal ko_cast_fu_2055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ko_cast_reg_2401 : STD_LOGIC_VECTOR (63 downto 0);
    signal cmp2153_fu_2064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln687_fu_2070_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln687_reg_2416 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln687_fu_2074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln687_reg_2421 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2080_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_7_reg_2426 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln685_fu_2093_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln685_reg_2434 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal gmem3_addr_reg_2439 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln685_fu_2088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_l2_0_addr_1_reg_2445 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_1_addr_1_reg_2450 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_2_addr_1_reg_2455 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_3_addr_1_reg_2460 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_4_addr_1_reg_2465 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_5_addr_1_reg_2470 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_6_addr_1_reg_2475 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_l2_7_addr_1_reg_2480 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln687_fu_2153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state22_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln687_fu_2158_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal trunc_ln693_fu_2178_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln693_reg_2494 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln689_fu_2182_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_2188_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_2504 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc28_fu_1299_ap_continue : STD_LOGIC;
    signal ap_phi_mux_ko_phi_fu_1258_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal ko_2_reg_1266 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state29 : BOOLEAN;
    signal grp_dataflow_parent_loop_proc28_fu_1299_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_done : STD_LOGIC;
    signal ap_block_state30_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_done : STD_LOGIC := '0';
    signal zext_ln685_fu_2099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln687_fu_2143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln693_fu_2209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal empty_fu_2022_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul20_fu_2060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_217_fu_2111_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_fu_2116_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_cast193_fu_2124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_218_fu_2128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_2133_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln689_fu_2164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln687_fu_2170_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component Conv_sysarr_dataflow_parent_loop_proc28 IS
    port (
        L2_TILENUM_K : IN STD_LOGIC_VECTOR (31 downto 0);
        L2_TILENUM_C : IN STD_LOGIC_VECTOR (31 downto 0);
        L2_TILENUM_H : IN STD_LOGIC_VECTOR (31 downto 0);
        L2_TILENUM_W : IN STD_LOGIC_VECTOR (31 downto 0);
        L2_TILENUM_R : IN STD_LOGIC_VECTOR (31 downto 0);
        L2_TILENUM_S : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weight_in : IN STD_LOGIC_VECTOR (63 downto 0);
        K_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        R_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        data_in : IN STD_LOGIC_VECTOR (63 downto 0);
        H_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        H_in_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_in_L2 : IN STD_LOGIC_VECTOR (31 downto 0);
        WH_in : IN STD_LOGIC_VECTOR (28 downto 0);
        L1_TILENUM_K : IN STD_LOGIC_VECTOR (31 downto 0);
        L1_TILENUM_C : IN STD_LOGIC_VECTOR (31 downto 0);
        L1_TILENUM_H : IN STD_LOGIC_VECTOR (31 downto 0);
        L1_TILENUM_W : IN STD_LOGIC_VECTOR (31 downto 0);
        L1_TILENUM_R : IN STD_LOGIC_VECTOR (31 downto 0);
        L1_TILENUM_S : IN STD_LOGIC_VECTOR (31 downto 0);
        TILESIZE_H : IN STD_LOGIC_VECTOR (31 downto 0);
        TILESIZE_W : IN STD_LOGIC_VECTOR (31 downto 0);
        TILESIZE_R : IN STD_LOGIC_VECTOR (31 downto 0);
        TILESIZE_S : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        conv_out : IN STD_LOGIC_VECTOR (63 downto 0);
        WH : IN STD_LOGIC_VECTOR (28 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        L2_TILENUM_C_ap_vld : IN STD_LOGIC;
        L2_TILENUM_H_ap_vld : IN STD_LOGIC;
        L2_TILENUM_W_ap_vld : IN STD_LOGIC;
        L2_TILENUM_R_ap_vld : IN STD_LOGIC;
        L2_TILENUM_S_ap_vld : IN STD_LOGIC;
        weight_in_ap_vld : IN STD_LOGIC;
        K_L2_ap_vld : IN STD_LOGIC;
        C_L2_ap_vld : IN STD_LOGIC;
        R_L2_ap_vld : IN STD_LOGIC;
        S_L2_ap_vld : IN STD_LOGIC;
        data_in_ap_vld : IN STD_LOGIC;
        H_L2_ap_vld : IN STD_LOGIC;
        W_L2_ap_vld : IN STD_LOGIC;
        H_in_L2_ap_vld : IN STD_LOGIC;
        W_in_L2_ap_vld : IN STD_LOGIC;
        WH_in_ap_vld : IN STD_LOGIC;
        L1_TILENUM_K_ap_vld : IN STD_LOGIC;
        L1_TILENUM_C_ap_vld : IN STD_LOGIC;
        L1_TILENUM_H_ap_vld : IN STD_LOGIC;
        L1_TILENUM_W_ap_vld : IN STD_LOGIC;
        L1_TILENUM_R_ap_vld : IN STD_LOGIC;
        L1_TILENUM_S_ap_vld : IN STD_LOGIC;
        TILESIZE_H_ap_vld : IN STD_LOGIC;
        TILESIZE_W_ap_vld : IN STD_LOGIC;
        TILESIZE_R_ap_vld : IN STD_LOGIC;
        TILESIZE_S_ap_vld : IN STD_LOGIC;
        conv_out_ap_vld : IN STD_LOGIC;
        WH_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Conv_sysarr_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_mul_29s_29s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Conv_sysarr_mux_83_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_bias_l2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        bias_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        weight_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        conv_out : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Conv_sysarr_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sysarr_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sysarr_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sysarr_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bias_l2_0_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_0_address0,
        ce0 => bias_l2_0_ce0,
        we0 => bias_l2_0_we0,
        d0 => reg_1994,
        q0 => bias_l2_0_q0);

    bias_l2_1_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_1_address0,
        ce0 => bias_l2_1_ce0,
        we0 => bias_l2_1_we0,
        d0 => reg_1994,
        q0 => bias_l2_1_q0);

    bias_l2_2_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_2_address0,
        ce0 => bias_l2_2_ce0,
        we0 => bias_l2_2_we0,
        d0 => reg_1994,
        q0 => bias_l2_2_q0);

    bias_l2_3_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_3_address0,
        ce0 => bias_l2_3_ce0,
        we0 => bias_l2_3_we0,
        d0 => reg_1994,
        q0 => bias_l2_3_q0);

    bias_l2_4_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_4_address0,
        ce0 => bias_l2_4_ce0,
        we0 => bias_l2_4_we0,
        d0 => reg_1994,
        q0 => bias_l2_4_q0);

    bias_l2_5_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_5_address0,
        ce0 => bias_l2_5_ce0,
        we0 => bias_l2_5_we0,
        d0 => reg_1994,
        q0 => bias_l2_5_q0);

    bias_l2_6_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_6_address0,
        ce0 => bias_l2_6_ce0,
        we0 => bias_l2_6_we0,
        d0 => reg_1994,
        q0 => bias_l2_6_q0);

    bias_l2_7_U : component Conv_sysarr_bias_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_l2_7_address0,
        ce0 => bias_l2_7_ce0,
        we0 => bias_l2_7_we0,
        d0 => reg_1994,
        q0 => bias_l2_7_q0);

    control_s_axi_U : component Conv_sysarr_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        bias_in => bias_in,
        weight_in => weight_in,
        data_in => data_in,
        conv_out => conv_out);

    gmem0_m_axi_U : component Conv_sysarr_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => bias_in_read_reg_2229,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem0_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gmem1_m_axi_U : component Conv_sysarr_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARADDR,
        I_ARID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARID,
        I_ARLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARLEN,
        I_ARSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARSIZE,
        I_ARLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARLOCK,
        I_ARCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARCACHE,
        I_ARQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARQOS,
        I_ARPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARPROT,
        I_ARUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARUSER,
        I_ARBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARBURST,
        I_ARREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    gmem2_m_axi_U : component Conv_sysarr_gmem2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem2_ARVALID,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARADDR,
        I_ARID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARID,
        I_ARLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARLEN,
        I_ARSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARSIZE,
        I_ARLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARLOCK,
        I_ARCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARCACHE,
        I_ARQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARQOS,
        I_ARPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARPROT,
        I_ARUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARUSER,
        I_ARBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARBURST,
        I_ARREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARREGION,
        I_RVALID => gmem2_RVALID,
        I_RREADY => gmem2_RREADY,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem2_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    gmem3_m_axi_U : component Conv_sysarr_gmem3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem3_ARVALID,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARADDR,
        I_ARID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARID,
        I_ARLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARLEN,
        I_ARSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARSIZE,
        I_ARLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARLOCK,
        I_ARCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARCACHE,
        I_ARQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARQOS,
        I_ARPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARPROT,
        I_ARUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARUSER,
        I_ARBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARBURST,
        I_ARREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARREGION,
        I_RVALID => gmem3_RVALID,
        I_RREADY => gmem3_RREADY,
        I_RDATA => gmem3_RDATA,
        I_RID => gmem3_RID,
        I_RUSER => gmem3_RUSER,
        I_RRESP => gmem3_RRESP,
        I_RLAST => gmem3_RLAST,
        I_AWVALID => gmem3_AWVALID,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => gmem3_AWADDR,
        I_AWID => gmem3_AWID,
        I_AWLEN => gmem3_AWLEN,
        I_AWSIZE => gmem3_AWSIZE,
        I_AWLOCK => gmem3_AWLOCK,
        I_AWCACHE => gmem3_AWCACHE,
        I_AWQOS => gmem3_AWQOS,
        I_AWPROT => gmem3_AWPROT,
        I_AWUSER => gmem3_AWUSER,
        I_AWBURST => gmem3_AWBURST,
        I_AWREGION => gmem3_AWREGION,
        I_WVALID => gmem3_WVALID,
        I_WREADY => gmem3_WREADY,
        I_WDATA => gmem3_WDATA,
        I_WID => gmem3_WID,
        I_WUSER => gmem3_WUSER,
        I_WLAST => gmem3_WLAST,
        I_WSTRB => gmem3_WSTRB,
        I_BVALID => gmem3_BVALID,
        I_BREADY => gmem3_BREADY,
        I_BRESP => gmem3_BRESP,
        I_BID => gmem3_BID,
        I_BUSER => gmem3_BUSER);

    grp_dataflow_parent_loop_proc28_fu_1299 : component Conv_sysarr_dataflow_parent_loop_proc28
    port map (
        L2_TILENUM_K => L2_TILENUM_K,
        L2_TILENUM_C => L2_TILENUM_C,
        L2_TILENUM_H => L2_TILENUM_H,
        L2_TILENUM_W => L2_TILENUM_W,
        L2_TILENUM_R => L2_TILENUM_R,
        L2_TILENUM_S => L2_TILENUM_S,
        m_axi_gmem1_AWVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => gmem1_RLAST,
        m_axi_gmem1_RID => gmem1_RID,
        m_axi_gmem1_RUSER => gmem1_RUSER,
        m_axi_gmem1_RRESP => gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        weight_in => weight_in_read_reg_2224,
        K_L2 => K_L2,
        C_L2 => C_L2,
        R_L2 => R_L2,
        S_L2 => S_L2,
        m_axi_gmem2_AWVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => ap_const_logic_0,
        m_axi_gmem2_AWADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => ap_const_logic_0,
        m_axi_gmem2_WDATA => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => gmem2_ARREADY,
        m_axi_gmem2_ARADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => gmem2_RVALID,
        m_axi_gmem2_RREADY => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => gmem2_RDATA,
        m_axi_gmem2_RLAST => gmem2_RLAST,
        m_axi_gmem2_RID => gmem2_RID,
        m_axi_gmem2_RUSER => gmem2_RUSER,
        m_axi_gmem2_RRESP => gmem2_RRESP,
        m_axi_gmem2_BVALID => ap_const_logic_0,
        m_axi_gmem2_BREADY => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => ap_const_lv2_0,
        m_axi_gmem2_BID => ap_const_lv1_0,
        m_axi_gmem2_BUSER => ap_const_lv1_0,
        data_in => data_in_read_reg_2219,
        H_L2 => H_L2,
        W_L2 => W_L2,
        H_in_L2 => H_in_L2,
        W_in_L2 => W_in_L2,
        WH_in => empty_215_reg_2376,
        L1_TILENUM_K => L1_TILENUM_K,
        L1_TILENUM_C => L1_TILENUM_C,
        L1_TILENUM_H => L1_TILENUM_H,
        L1_TILENUM_W => L1_TILENUM_W,
        L1_TILENUM_R => L1_TILENUM_R,
        L1_TILENUM_S => L1_TILENUM_S,
        TILESIZE_H => TILESIZE_H,
        TILESIZE_W => TILESIZE_W,
        TILESIZE_R => TILESIZE_R,
        TILESIZE_S => TILESIZE_S,
        m_axi_gmem3_AWVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => gmem3_AWREADY,
        m_axi_gmem3_AWADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => gmem3_WREADY,
        m_axi_gmem3_WDATA => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => gmem3_ARREADY,
        m_axi_gmem3_ARADDR => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => gmem3_RVALID,
        m_axi_gmem3_RREADY => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => gmem3_RDATA,
        m_axi_gmem3_RLAST => gmem3_RLAST,
        m_axi_gmem3_RID => gmem3_RID,
        m_axi_gmem3_RUSER => gmem3_RUSER,
        m_axi_gmem3_RRESP => gmem3_RRESP,
        m_axi_gmem3_BVALID => gmem3_BVALID,
        m_axi_gmem3_BREADY => grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => gmem3_BRESP,
        m_axi_gmem3_BID => gmem3_BID,
        m_axi_gmem3_BUSER => gmem3_BUSER,
        conv_out => conv_out_read_reg_2213,
        WH => empty_reg_2371,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        L2_TILENUM_C_ap_vld => ap_const_logic_1,
        L2_TILENUM_H_ap_vld => ap_const_logic_1,
        L2_TILENUM_W_ap_vld => ap_const_logic_1,
        L2_TILENUM_R_ap_vld => ap_const_logic_1,
        L2_TILENUM_S_ap_vld => ap_const_logic_1,
        weight_in_ap_vld => ap_const_logic_1,
        K_L2_ap_vld => ap_const_logic_1,
        C_L2_ap_vld => ap_const_logic_1,
        R_L2_ap_vld => ap_const_logic_1,
        S_L2_ap_vld => ap_const_logic_1,
        data_in_ap_vld => ap_const_logic_1,
        H_L2_ap_vld => ap_const_logic_1,
        W_L2_ap_vld => ap_const_logic_1,
        H_in_L2_ap_vld => ap_const_logic_1,
        W_in_L2_ap_vld => ap_const_logic_1,
        WH_in_ap_vld => ap_const_logic_1,
        L1_TILENUM_K_ap_vld => ap_const_logic_1,
        L1_TILENUM_C_ap_vld => ap_const_logic_1,
        L1_TILENUM_H_ap_vld => ap_const_logic_1,
        L1_TILENUM_W_ap_vld => ap_const_logic_1,
        L1_TILENUM_R_ap_vld => ap_const_logic_1,
        L1_TILENUM_S_ap_vld => ap_const_logic_1,
        TILESIZE_H_ap_vld => ap_const_logic_1,
        TILESIZE_W_ap_vld => ap_const_logic_1,
        TILESIZE_R_ap_vld => ap_const_logic_1,
        TILESIZE_S_ap_vld => ap_const_logic_1,
        conv_out_ap_vld => ap_const_logic_1,
        WH_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc28_fu_1299_ap_start,
        ap_done => grp_dataflow_parent_loop_proc28_fu_1299_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc28_fu_1299_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc28_fu_1299_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc28_fu_1299_ap_continue);

    mul_32s_32s_32_1_1_U2937 : component Conv_sysarr_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => WH,
        din1 => WH,
        dout => mul20_fu_2060_p2);

    mul_29s_29s_29_1_1_U2938 : component Conv_sysarr_mul_29s_29s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 29,
        din1_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => trunc_ln687_reg_2416,
        din1 => ko_2_reg_1266,
        dout => empty_217_fu_2111_p2);

    mux_83_8_1_1_U2939 : component Conv_sysarr_mux_83_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => bias_l2_0_q0,
        din1 => bias_l2_1_q0,
        din2 => bias_l2_2_q0,
        din3 => bias_l2_3_q0,
        din4 => bias_l2_4_q0,
        din5 => bias_l2_5_q0,
        din6 => bias_l2_6_q0,
        din7 => bias_l2_7_q0,
        din8 => trunc_ln693_reg_2494,
        dout => tmp_fu_2188_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc28_fu_1299_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc28_fu_1299_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc28_fu_1299_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dataflow_parent_loop_proc28_fu_1299_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready = ap_const_logic_0)))) then 
                    grp_dataflow_parent_loop_proc28_fu_1299_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc28_fu_1299_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc28_fu_1299_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_1277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln687_fu_2153_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_1277 <= add_ln687_fu_2158_p2;
            elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                indvar_flatten_reg_1277 <= ap_const_lv35_0;
            end if; 
        end if;
    end process;

    ki_reg_1288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln687_fu_2153_p2 = ap_const_lv1_0))) then 
                ki_reg_1288 <= add_ln689_fu_2182_p2;
            elsif (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                ki_reg_1288 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ko_2_reg_1266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ko_2_reg_1266 <= ap_const_lv29_0;
            elsif ((not(((gmem3_BVALID = ap_const_logic_0) and (cmp2153_reg_2412 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                ko_2_reg_1266 <= add_ln685_reg_2434;
            end if; 
        end if;
    end process;

    ko_reg_1254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ko_reg_1254 <= add_ln675_reg_2396;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ko_reg_1254 <= ap_const_lv29_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln675_reg_2396 <= add_ln675_fu_2049_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln675_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                add_ln685_reg_2434 <= add_ln685_fu_2093_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bias_in_read_reg_2229 <= bias_in;
                conv_out_read_reg_2213 <= conv_out;
                data_in_read_reg_2219 <= data_in;
                icmp_ln675_reg_2241 <= icmp_ln675_fu_2016_p2;
                trunc_ln_reg_2234 <= K(31 downto 3);
                weight_in_read_reg_2224 <= weight_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln685_fu_2088_p2 = ap_const_lv1_0) and (cmp2153_reg_2412 = ap_const_lv1_0) and (icmp_ln675_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                bias_l2_0_addr_1_reg_2445 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                bias_l2_1_addr_1_reg_2450 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                bias_l2_2_addr_1_reg_2455 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                bias_l2_3_addr_1_reg_2460 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                bias_l2_4_addr_1_reg_2465 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                bias_l2_5_addr_1_reg_2470 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                bias_l2_6_addr_1_reg_2475 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                bias_l2_7_addr_1_reg_2480 <= zext_ln685_fu_2099_p1(7 - 1 downto 0);
                gmem3_addr_reg_2439 <= sext_ln687_fu_2143_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                cmp2153_reg_2412 <= cmp2153_fu_2064_p2;
                    shl_ln687_reg_2421(31 downto 3) <= shl_ln687_fu_2074_p2(31 downto 3);
                    tmp_7_reg_2426(34 downto 3) <= tmp_7_fu_2080_p3(34 downto 3);
                trunc_ln687_reg_2416 <= trunc_ln687_fu_2070_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_215_reg_2376 <= empty_215_fu_2026_p1;
                empty_reg_2371 <= empty_fu_2022_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln675_1_reg_2392 <= icmp_ln675_1_fu_2044_p2;
                icmp_ln675_1_reg_2392_pp0_iter1_reg <= icmp_ln675_1_reg_2392;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln687_reg_2485 <= icmp_ln687_fu_2153_p2;
                icmp_ln687_reg_2485_pp1_iter1_reg <= icmp_ln687_reg_2485;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ko_cast_reg_2401(28 downto 0) <= ko_cast_fu_2055_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_1994 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln687_reg_2485 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_reg_2504 <= tmp_fu_2188_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln687_fu_2153_p2 = ap_const_lv1_0))) then
                trunc_ln693_reg_2494 <= trunc_ln693_fu_2178_p1;
            end if;
        end if;
    end process;
    ko_cast_reg_2401(63 downto 29) <= "00000000000000000000000000000000000";
    shl_ln687_reg_2421(2 downto 0) <= "000";
    tmp_7_reg_2426(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln675_reg_2241, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state21, ap_enable_reg_pp1_iter2, ap_CS_fsm_state29, cmp2153_reg_2412, gmem3_AWREADY, gmem3_BVALID, ap_block_state2_io, icmp_ln675_1_fu_2044_p2, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, icmp_ln687_fu_2153_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_CS_fsm_state30, ap_block_state30_on_subcall_done, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln675_reg_2241 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln675_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln675_1_fu_2044_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln675_1_fu_2044_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                elsif (((icmp_ln685_fu_2088_p2 = ap_const_lv1_0) and (cmp2153_reg_2412 = ap_const_lv1_1) and (icmp_ln675_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln687_fu_2153_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln687_fu_2153_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if ((not(((gmem3_BVALID = ap_const_logic_0) and (cmp2153_reg_2412 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln675_fu_2049_p2 <= std_logic_vector(unsigned(ap_phi_mux_ko_phi_fu_1258_p4) + unsigned(ap_const_lv29_1));
    add_ln685_fu_2093_p2 <= std_logic_vector(signed(ko_2_reg_1266) + signed(ap_const_lv29_1));
    add_ln687_fu_2158_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_1277) + unsigned(ap_const_lv35_1));
    add_ln689_fu_2182_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln687_fu_2170_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(15);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state29 <= ap_CS_fsm(24);
    ap_CS_fsm_state30 <= ap_CS_fsm(25);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(icmp_ln675_1_reg_2392, ap_enable_reg_pp0_iter1, gmem0_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(icmp_ln675_1_reg_2392, ap_enable_reg_pp0_iter1, gmem0_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage2_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage2_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage3_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage3_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage4_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage4_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage5_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage5_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage6_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage6_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage7_11001 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_pp0_stage7_subdone <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state24_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state24_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io));
    end process;


    ap_block_state10_pp0_stage1_iter0_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state10_pp0_stage1_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_state11_pp0_stage2_iter0_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state11_pp0_stage2_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_state12_pp0_stage3_iter0_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state12_pp0_stage3_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_state13_pp0_stage4_iter0_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state13_pp0_stage4_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_state14_pp0_stage5_iter0_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state14_pp0_stage5_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_state15_pp0_stage6_iter0_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state15_pp0_stage6_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_state16_pp0_stage7_iter0_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state16_pp0_stage7_iter0 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;


    ap_block_state17_pp0_stage0_iter1_assign_proc : process(icmp_ln675_1_reg_2392, gmem0_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter1 <= ((gmem0_RVALID = ap_const_logic_0) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0));
    end process;

        ap_block_state18_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(icmp_ln687_reg_2485_pp1_iter1_reg, gmem3_WREADY)
    begin
                ap_block_state24_io <= ((gmem3_WREADY = ap_const_logic_0) and (icmp_ln687_reg_2485_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state24_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_assign_proc : process(cmp2153_reg_2412, gmem3_BVALID)
    begin
                ap_block_state29 <= ((gmem3_BVALID = ap_const_logic_0) and (cmp2153_reg_2412 = ap_const_lv1_0));
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln675_reg_2241, gmem0_ARREADY)
    begin
                ap_block_state2_io <= ((gmem0_ARREADY = ap_const_logic_0) and (icmp_ln675_reg_2241 = ap_const_lv1_0));
    end process;


    ap_block_state30_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready, ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_done)
    begin
                ap_block_state30_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready and ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln675_1_fu_2044_p2)
    begin
        if ((icmp_ln675_1_fu_2044_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state22_assign_proc : process(icmp_ln687_fu_2153_p2)
    begin
        if ((icmp_ln687_fu_2153_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state30, ap_block_state30_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ko_phi_fu_1258_p4_assign_proc : process(icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ko_reg_1254, add_ln675_reg_2396)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ko_phi_fu_1258_p4 <= add_ln675_reg_2396;
        else 
            ap_phi_mux_ko_phi_fu_1258_p4 <= ko_reg_1254;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, ap_block_state30_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_done <= (grp_dataflow_parent_loop_proc28_fu_1299_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready <= (grp_dataflow_parent_loop_proc28_fu_1299_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc28_fu_1299_ap_ready);

    bias_l2_0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp1_stage0, ko_cast_fu_2055_p1, bias_l2_0_addr_1_reg_2445, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_0_address0 <= bias_l2_0_addr_1_reg_2445;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            bias_l2_0_address0 <= ko_cast_fu_2055_p1(7 - 1 downto 0);
        else 
            bias_l2_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_0_ce0 <= ap_const_logic_1;
        else 
            bias_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_0_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            bias_l2_0_we0 <= ap_const_logic_1;
        else 
            bias_l2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp1_stage0, ko_cast_reg_2401, bias_l2_1_addr_1_reg_2450, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_1_address0 <= bias_l2_1_addr_1_reg_2450;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            bias_l2_1_address0 <= ko_cast_reg_2401(7 - 1 downto 0);
        else 
            bias_l2_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_1_ce0 <= ap_const_logic_1;
        else 
            bias_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            bias_l2_1_we0 <= ap_const_logic_1;
        else 
            bias_l2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_block_pp1_stage0, ko_cast_reg_2401, bias_l2_2_addr_1_reg_2455, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_2_address0 <= bias_l2_2_addr_1_reg_2455;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            bias_l2_2_address0 <= ko_cast_reg_2401(7 - 1 downto 0);
        else 
            bias_l2_2_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_2_ce0 <= ap_const_logic_1;
        else 
            bias_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_2_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            bias_l2_2_we0 <= ap_const_logic_1;
        else 
            bias_l2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_3_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_block_pp1_stage0, ko_cast_reg_2401, bias_l2_3_addr_1_reg_2460, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_3_address0 <= bias_l2_3_addr_1_reg_2460;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            bias_l2_3_address0 <= ko_cast_reg_2401(7 - 1 downto 0);
        else 
            bias_l2_3_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_3_ce0 <= ap_const_logic_1;
        else 
            bias_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_3_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            bias_l2_3_we0 <= ap_const_logic_1;
        else 
            bias_l2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_4_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp1_stage0, ko_cast_reg_2401, bias_l2_4_addr_1_reg_2465, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_4_address0 <= bias_l2_4_addr_1_reg_2465;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            bias_l2_4_address0 <= ko_cast_reg_2401(7 - 1 downto 0);
        else 
            bias_l2_4_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_4_ce0 <= ap_const_logic_1;
        else 
            bias_l2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_4_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            bias_l2_4_we0 <= ap_const_logic_1;
        else 
            bias_l2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_5_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp1_stage0, ko_cast_reg_2401, bias_l2_5_addr_1_reg_2470, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_5_address0 <= bias_l2_5_addr_1_reg_2470;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            bias_l2_5_address0 <= ko_cast_reg_2401(7 - 1 downto 0);
        else 
            bias_l2_5_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_5_ce0 <= ap_const_logic_1;
        else 
            bias_l2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_5_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if (((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            bias_l2_5_we0 <= ap_const_logic_1;
        else 
            bias_l2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ko_cast_reg_2401, bias_l2_6_addr_1_reg_2475, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_6_address0 <= bias_l2_6_addr_1_reg_2475;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l2_6_address0 <= ko_cast_reg_2401(7 - 1 downto 0);
        else 
            bias_l2_6_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_6_ce0 <= ap_const_logic_1;
        else 
            bias_l2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_6_we0_assign_proc : process(icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l2_6_we0 <= ap_const_logic_1;
        else 
            bias_l2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ko_cast_reg_2401, bias_l2_7_addr_1_reg_2480, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            bias_l2_7_address0 <= bias_l2_7_addr_1_reg_2480;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bias_l2_7_address0 <= ko_cast_reg_2401(7 - 1 downto 0);
        else 
            bias_l2_7_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_l2_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            bias_l2_7_ce0 <= ap_const_logic_1;
        else 
            bias_l2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l2_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, icmp_ln675_1_reg_2392_pp0_iter1_reg)
    begin
        if (((icmp_ln675_1_reg_2392_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bias_l2_7_we0 <= ap_const_logic_1;
        else 
            bias_l2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp2153_fu_2064_p2 <= "1" when (mul20_fu_2060_p2 = ap_const_lv32_0) else "0";
    empty_215_fu_2026_p1 <= WH_in(29 - 1 downto 0);
    empty_218_fu_2128_p2 <= std_logic_vector(unsigned(p_cast193_fu_2124_p1) + unsigned(conv_out_read_reg_2213));
    empty_fu_2022_p0 <= WH;
    empty_fu_2022_p1 <= empty_fu_2022_p0(29 - 1 downto 0);
    gmem0_ARLEN <= (trunc_ln_reg_2234 & ap_const_lv3_0);

    gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln675_reg_2241, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln675_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem0_RREADY <= ap_const_logic_1;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state2, icmp_ln675_reg_2241)
    begin
        if (((icmp_ln675_reg_2241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln675_1_reg_2392, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln675_1_reg_2392 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_ARVALID_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARVALID, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem1_ARVALID <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_ARVALID;
        else 
            gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_RREADY_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_RREADY, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem1_RREADY <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem1_RREADY;
        else 
            gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_ARVALID_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARVALID, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem2_ARVALID <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_ARVALID;
        else 
            gmem2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_RREADY_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_RREADY, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem2_RREADY <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem2_RREADY;
        else 
            gmem2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_ARVALID_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARVALID, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_ARVALID <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_ARVALID;
        else 
            gmem3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_AWADDR_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state21, gmem3_AWREADY, ap_CS_fsm_state20, gmem3_addr_reg_2439, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWADDR, ap_CS_fsm_state30)
    begin
        if (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            gmem3_AWADDR <= gmem3_addr_reg_2439;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWADDR <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWADDR;
        else 
            gmem3_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_AWBURST_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWBURST, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWBURST <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWBURST;
        else 
            gmem3_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem3_AWCACHE_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWCACHE, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWCACHE <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWCACHE;
        else 
            gmem3_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem3_AWID_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWID, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWID <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWID;
        else 
            gmem3_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem3_AWLEN_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state21, gmem3_AWREADY, shl_ln687_reg_2421, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLEN, ap_CS_fsm_state30)
    begin
        if (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            gmem3_AWLEN <= shl_ln687_reg_2421;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWLEN <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLEN;
        else 
            gmem3_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_AWLOCK_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLOCK, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWLOCK <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWLOCK;
        else 
            gmem3_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem3_AWPROT_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWPROT, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWPROT <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWPROT;
        else 
            gmem3_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem3_AWQOS_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWQOS, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWQOS <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWQOS;
        else 
            gmem3_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem3_AWREGION_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWREGION, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWREGION <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWREGION;
        else 
            gmem3_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem3_AWSIZE_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWSIZE, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWSIZE <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWSIZE;
        else 
            gmem3_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem3_AWUSER_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWUSER, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWUSER <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWUSER;
        else 
            gmem3_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem3_AWVALID_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state21, gmem3_AWREADY, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWVALID, ap_CS_fsm_state30)
    begin
        if (((gmem3_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            gmem3_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_AWVALID <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_AWVALID;
        else 
            gmem3_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_BREADY_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state29, cmp2153_reg_2412, gmem3_BVALID, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_BREADY, ap_CS_fsm_state30)
    begin
        if ((not(((gmem3_BVALID = ap_const_logic_0) and (cmp2153_reg_2412 = ap_const_lv1_0))) and (cmp2153_reg_2412 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            gmem3_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_BREADY <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_BREADY;
        else 
            gmem3_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_RREADY_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_RREADY, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_RREADY <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_RREADY;
        else 
            gmem3_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_WDATA_assign_proc : process(icmp_ln675_reg_2241, ap_enable_reg_pp1_iter2, icmp_ln687_reg_2485_pp1_iter1_reg, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WDATA, ap_CS_fsm_state30, sext_ln693_fu_2209_p1, ap_block_pp1_stage0_01001)
    begin
        if (((icmp_ln687_reg_2485_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
            gmem3_WDATA <= sext_ln693_fu_2209_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_WDATA <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WDATA;
        else 
            gmem3_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem3_WID_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WID, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_WID <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WID;
        else 
            gmem3_WID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem3_WLAST_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WLAST, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_WLAST <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WLAST;
        else 
            gmem3_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_WSTRB_assign_proc : process(icmp_ln675_reg_2241, ap_enable_reg_pp1_iter2, icmp_ln687_reg_2485_pp1_iter1_reg, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WSTRB, ap_CS_fsm_state30, ap_block_pp1_stage0_01001)
    begin
        if (((icmp_ln687_reg_2485_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
            gmem3_WSTRB <= ap_const_lv4_F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_WSTRB <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WSTRB;
        else 
            gmem3_WSTRB <= "XXXX";
        end if; 
    end process;


    gmem3_WUSER_assign_proc : process(icmp_ln675_reg_2241, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WUSER, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_WUSER <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WUSER;
        else 
            gmem3_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem3_WVALID_assign_proc : process(icmp_ln675_reg_2241, ap_enable_reg_pp1_iter2, icmp_ln687_reg_2485_pp1_iter1_reg, ap_CS_fsm_state20, icmp_ln685_fu_2088_p2, ap_block_pp1_stage0_11001, grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WVALID, ap_CS_fsm_state30)
    begin
        if (((icmp_ln687_reg_2485_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            gmem3_WVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state20) and ((icmp_ln685_fu_2088_p2 = ap_const_lv1_1) or (icmp_ln675_reg_2241 = ap_const_lv1_1))))) then 
            gmem3_WVALID <= grp_dataflow_parent_loop_proc28_fu_1299_m_axi_gmem3_WVALID;
        else 
            gmem3_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_blk_n_AW_assign_proc : process(m_axi_gmem3_AWREADY, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            gmem3_blk_n_AW <= m_axi_gmem3_AWREADY;
        else 
            gmem3_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_B_assign_proc : process(m_axi_gmem3_BVALID, ap_CS_fsm_state29, cmp2153_reg_2412)
    begin
        if (((cmp2153_reg_2412 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            gmem3_blk_n_B <= m_axi_gmem3_BVALID;
        else 
            gmem3_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_W_assign_proc : process(m_axi_gmem3_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln687_reg_2485_pp1_iter1_reg)
    begin
        if (((icmp_ln687_reg_2485_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            gmem3_blk_n_W <= m_axi_gmem3_WREADY;
        else 
            gmem3_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_dataflow_parent_loop_proc28_fu_1299_ap_continue_assign_proc : process(ap_CS_fsm_state30, ap_block_state30_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_dataflow_parent_loop_proc28_fu_1299_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc28_fu_1299_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc28_fu_1299_ap_start <= grp_dataflow_parent_loop_proc28_fu_1299_ap_start_reg;
    icmp_ln675_1_fu_2044_p2 <= "1" when (ap_phi_mux_ko_phi_fu_1258_p4 = trunc_ln_reg_2234) else "0";
    icmp_ln675_fu_2016_p2 <= "1" when (trunc_ln_fu_2006_p4 = ap_const_lv29_0) else "0";
    icmp_ln685_fu_2088_p2 <= "1" when (ko_2_reg_1266 = trunc_ln_reg_2234) else "0";
    icmp_ln687_fu_2153_p2 <= "1" when (indvar_flatten_reg_1277 = tmp_7_reg_2426) else "0";
    icmp_ln689_fu_2164_p2 <= "1" when (ki_reg_1288 = ap_const_lv4_8) else "0";
    ko_cast_fu_2055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ko_reg_1254),64));
    p_cast193_fu_2124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_2116_p3),64));
    select_ln687_fu_2170_p3 <= 
        ap_const_lv4_0 when (icmp_ln689_fu_2164_p2(0) = '1') else 
        ki_reg_1288;
        sext_ln687_fu_2143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_2133_p4),64));

        sext_ln693_fu_2209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_2504),32));

    shl_ln687_fu_2074_p2 <= std_logic_vector(shift_left(unsigned(mul20_fu_2060_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_7_fu_2080_p3 <= (mul20_fu_2060_p2 & ap_const_lv3_0);
    tmp_8_fu_2116_p3 <= (empty_217_fu_2111_p2 & ap_const_lv5_0);
    trunc_ln687_fu_2070_p1 <= mul20_fu_2060_p2(29 - 1 downto 0);
    trunc_ln693_fu_2178_p1 <= select_ln687_fu_2170_p3(3 - 1 downto 0);
    trunc_ln7_fu_2133_p4 <= empty_218_fu_2128_p2(63 downto 2);
    trunc_ln_fu_2006_p4 <= K(31 downto 3);
    zext_ln685_fu_2099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ko_2_reg_1266),64));
end behav;
