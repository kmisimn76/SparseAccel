-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_dbbuf_runSysArr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_018_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_018_ce0 : OUT STD_LOGIC;
    data_l1buf_018_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_119_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_119_ce0 : OUT STD_LOGIC;
    data_l1buf_119_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_220_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_220_ce0 : OUT STD_LOGIC;
    data_l1buf_220_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_321_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_321_ce0 : OUT STD_LOGIC;
    data_l1buf_321_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_l1_pass_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_0_ce0 : OUT STD_LOGIC;
    output_l1_pass_0_we0 : OUT STD_LOGIC;
    output_l1_pass_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_1_ce0 : OUT STD_LOGIC;
    output_l1_pass_1_we0 : OUT STD_LOGIC;
    output_l1_pass_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_2_ce0 : OUT STD_LOGIC;
    output_l1_pass_2_we0 : OUT STD_LOGIC;
    output_l1_pass_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_3_ce0 : OUT STD_LOGIC;
    output_l1_pass_3_we0 : OUT STD_LOGIC;
    output_l1_pass_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_empty_n : IN STD_LOGIC;
    empty_read : OUT STD_LOGIC;
    s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    s_empty_n : IN STD_LOGIC;
    s_read : OUT STD_LOGIC;
    r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    r_empty_n : IN STD_LOGIC;
    r_read : OUT STD_LOGIC );
end;


architecture behav of Conv_sysarr_dbbuf_runSysArr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv32_FFFFFFFA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111010";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv32_FFFFFFFC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111100";
    constant ap_const_lv33_1FFFFFFFE : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv33_1FFFFFFFD : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111101";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_1FFFFFFFA : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111010";
    constant ap_const_lv33_1FFFFFFFB : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111011";
    constant ap_const_lv33_1FFFFFFFC : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_l1_local_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_3_ce0 : STD_LOGIC;
    signal output_l1_local_3_we0 : STD_LOGIC;
    signal output_l1_local_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_3_ce1 : STD_LOGIC;
    signal output_l1_local_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_2_ce0 : STD_LOGIC;
    signal output_l1_local_2_we0 : STD_LOGIC;
    signal output_l1_local_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_2_ce1 : STD_LOGIC;
    signal output_l1_local_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_1_ce0 : STD_LOGIC;
    signal output_l1_local_1_we0 : STD_LOGIC;
    signal output_l1_local_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_1_ce1 : STD_LOGIC;
    signal output_l1_local_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_0_ce0 : STD_LOGIC;
    signal output_l1_local_0_we0 : STD_LOGIC;
    signal output_l1_local_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_0_ce1 : STD_LOGIC;
    signal output_l1_local_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_blk_n : STD_LOGIC;
    signal s_blk_n : STD_LOGIC;
    signal r_blk_n : STD_LOGIC;
    signal i_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_566_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal psum_14_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_13_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_12_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_10_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_9_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_8_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_6_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_5_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_4_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_2_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_1_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln289_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln289_reg_1599 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal add_ln289_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln289_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln368_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln368_reg_1612 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile315_load_cast_i_i_fu_752_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile315_load_cast_i_i_reg_1700 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile314_load_cast_i_i_fu_756_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile314_load_cast_i_i_reg_1705 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile313_load_cast_i_i_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile313_load_cast_i_i_reg_1710 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile312_load_cast_i_i_fu_764_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile312_load_cast_i_i_reg_1715 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile211_load_cast_i_i_fu_768_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile211_load_cast_i_i_reg_1720 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile210_load_cast_i_i_fu_772_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile210_load_cast_i_i_reg_1725 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile29_load_cast_i_i_fu_776_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile29_load_cast_i_i_reg_1730 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile28_load_cast_i_i_fu_780_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile28_load_cast_i_i_reg_1735 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile17_load_cast_i_i_fu_784_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile17_load_cast_i_i_reg_1740 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile16_load_cast_i_i_fu_788_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile16_load_cast_i_i_reg_1745 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile15_load_cast_i_i_fu_792_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile15_load_cast_i_i_reg_1750 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile14_load_cast_i_i_fu_796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile14_load_cast_i_i_reg_1755 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile3_load_cast_i_i_fu_800_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile3_load_cast_i_i_reg_1760 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile2_load_cast_i_i_fu_804_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile2_load_cast_i_i_reg_1765 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile1_load_cast_i_i_fu_808_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile1_load_cast_i_i_reg_1770 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_load_cast_i_i_fu_812_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_load_cast_i_i_reg_1775 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln129_1_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_reg_1780 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_reg_1780_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_reg_1780_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_reg_1780_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_reg_1780_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_reg_1780_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln129_1_reg_1780_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln129_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_reg_1784 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln144_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_reg_1789 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_reg_1789_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln144_fu_854_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln144_reg_1799 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln144_1_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_1_reg_1804 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_fu_912_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln129_reg_1834 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln129_reg_1834_pp0_iter3_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln129_reg_1834_pp0_iter4_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln129_reg_1834_pp0_iter5_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln129_reg_1834_pp0_iter6_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln144_3_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_3_reg_1849 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln189_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_1874 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_1874_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_1874_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_1874_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_reg_1874_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_1_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_1_reg_1879 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_1_reg_1879_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_1_reg_1879_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_1_reg_1879_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_1_reg_1879_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_2_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_2_reg_1884 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_2_reg_1884_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_2_reg_1884_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_2_reg_1884_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_2_reg_1884_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_3_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_3_reg_1889 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln141_3_fu_1054_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln141_3_reg_1914 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln141_3_reg_1914_pp0_iter4_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln141_3_reg_1914_pp0_iter5_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln141_3_reg_1914_pp0_iter6_reg : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_fu_1059_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1919 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_3_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_3_reg_1949 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_3_reg_1949_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_3_reg_1949_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln189_3_reg_1949_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_2_reg_1993 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_1402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_5_reg_1998 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_8_reg_2003 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_11_reg_2008 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_1_reg_2013 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_1430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_4_reg_2018 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_7_reg_2023 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_10_reg_2028 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_reg_2033 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal grp_fu_1458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_3_reg_2038 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1465_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_6_reg_2043 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1472_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln181_9_reg_2048 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_570_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_psum_14_phi_fu_582_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_13_phi_fu_594_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_12_phi_fu_606_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_10_phi_fu_618_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_9_phi_fu_630_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_8_phi_fu_642_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_6_phi_fu_654_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_5_phi_fu_666_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_4_phi_fu_678_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_2_phi_fu_690_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_1_phi_fu_702_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_phi_fu_714_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln144_2_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln189_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln188_1_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln189_1_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln188_2_fu_1310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln189_2_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln141_fu_1224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_1509_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1499_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_27_fu_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_28_fu_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_29_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_30_fu_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_fu_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_fu_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_33_fu_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_34_fu_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_35_fu_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln143_2_fu_1196_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_36_fu_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln143_1_fu_1046_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_37_fu_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln143_fu_922_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_38_fu_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln368_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln141_fu_858_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln143_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln141_2_fu_930_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln141_4_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_1_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln189_2_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln141_1_fu_1033_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_fu_1038_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1073_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln153_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1094_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln153_1_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln151_fu_1115_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_1120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln153_2_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln143_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_fu_1245_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_fu_1256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln188_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_1_fu_1275_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_fu_1286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln188_1_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_2_fu_1305_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_fu_1316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln188_2_fu_1324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1479_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1489_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1499_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1509_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_l1_local_3_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_3_address0,
        ce0 => output_l1_local_3_ce0,
        we0 => output_l1_local_3_we0,
        d0 => grp_fu_1479_p3,
        address1 => output_l1_local_3_address1,
        ce1 => output_l1_local_3_ce1,
        q1 => output_l1_local_3_q1);

    output_l1_local_2_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_2_address0,
        ce0 => output_l1_local_2_ce0,
        we0 => output_l1_local_2_we0,
        d0 => grp_fu_1489_p3,
        address1 => output_l1_local_2_address1,
        ce1 => output_l1_local_2_ce1,
        q1 => output_l1_local_2_q1);

    output_l1_local_1_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_1_address0,
        ce0 => output_l1_local_1_ce0,
        we0 => output_l1_local_1_we0,
        d0 => grp_fu_1499_p3,
        address1 => output_l1_local_1_address1,
        ce1 => output_l1_local_1_ce1,
        q1 => output_l1_local_1_q1);

    output_l1_local_0_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_0_address0,
        ce0 => output_l1_local_0_ce0,
        we0 => output_l1_local_0_we0,
        d0 => grp_fu_1509_p3,
        address1 => output_l1_local_0_address1,
        ce1 => output_l1_local_0_ce1,
        q1 => output_l1_local_0_q1);

    mul_32s_32s_32_1_1_U97 : component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_dout,
        din1 => empty_dout,
        dout => mul_ln289_fu_722_p2);

    mac_muladd_8s_8s_32ns_32_4_1_U98 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_30_fu_212,
        din1 => grp_fu_1395_p1,
        din2 => grp_fu_1395_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1395_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U99 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_34_fu_228,
        din1 => grp_fu_1402_p1,
        din2 => grp_fu_1402_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1402_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U100 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_38_fu_244,
        din1 => grp_fu_1409_p1,
        din2 => grp_fu_1409_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1409_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U101 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_l1buf_018_q0,
        din1 => grp_fu_1416_p1,
        din2 => grp_fu_1416_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1416_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U102 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_29_fu_208,
        din1 => grp_fu_1423_p1,
        din2 => ap_phi_mux_psum_2_phi_fu_690_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1423_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U103 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_33_fu_224,
        din1 => grp_fu_1430_p1,
        din2 => ap_phi_mux_psum_6_phi_fu_654_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1430_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U104 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_37_fu_240,
        din1 => grp_fu_1437_p1,
        din2 => ap_phi_mux_psum_10_phi_fu_618_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1437_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U105 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln143_fu_922_p3,
        din1 => grp_fu_1444_p1,
        din2 => ap_phi_mux_psum_14_phi_fu_582_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1444_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U106 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_28_fu_204,
        din1 => grp_fu_1451_p1,
        din2 => ap_phi_mux_psum_1_phi_fu_702_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1451_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U107 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_32_fu_220,
        din1 => grp_fu_1458_p1,
        din2 => ap_phi_mux_psum_5_phi_fu_666_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1458_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U108 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_36_fu_236,
        din1 => grp_fu_1465_p1,
        din2 => ap_phi_mux_psum_9_phi_fu_630_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1465_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U109 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln143_1_fu_1046_p3,
        din1 => grp_fu_1472_p1,
        din2 => ap_phi_mux_psum_13_phi_fu_594_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1472_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U110 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1479_p0,
        din1 => empty_27_fu_200,
        din2 => ap_phi_mux_psum_phi_fu_714_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1479_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U111 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1489_p0,
        din1 => empty_31_fu_216,
        din2 => ap_phi_mux_psum_4_phi_fu_678_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1489_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U112 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1499_p0,
        din1 => empty_35_fu_232,
        din2 => ap_phi_mux_psum_8_phi_fu_642_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1499_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U113 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1509_p0,
        din1 => select_ln143_2_fu_1196_p3,
        din2 => ap_phi_mux_psum_12_phi_fu_606_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1509_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (icmp_ln129_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state6)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (icmp_ln129_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (icmp_ln129_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_566 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_1_reg_1780 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_566 <= add_ln129_reg_1784;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln129_reg_1784 <= add_ln129_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_1_reg_1780_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln141_3_reg_1914 <= add_ln141_3_fu_1054_p2;
                and_ln189_3_reg_1949 <= and_ln189_3_fu_1153_p2;
                tmp_4_reg_1919 <= add_ln141_3_fu_1054_p2(32 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln141_3_reg_1914_pp0_iter4_reg <= add_ln141_3_reg_1914;
                add_ln141_3_reg_1914_pp0_iter5_reg <= add_ln141_3_reg_1914_pp0_iter4_reg;
                add_ln141_3_reg_1914_pp0_iter6_reg <= add_ln141_3_reg_1914_pp0_iter5_reg;
                and_ln189_3_reg_1949_pp0_iter4_reg <= and_ln189_3_reg_1949;
                and_ln189_3_reg_1949_pp0_iter5_reg <= and_ln189_3_reg_1949_pp0_iter4_reg;
                and_ln189_3_reg_1949_pp0_iter6_reg <= and_ln189_3_reg_1949_pp0_iter5_reg;
                icmp_ln129_1_reg_1780_pp0_iter2_reg <= icmp_ln129_1_reg_1780_pp0_iter1_reg;
                icmp_ln129_1_reg_1780_pp0_iter3_reg <= icmp_ln129_1_reg_1780_pp0_iter2_reg;
                icmp_ln129_1_reg_1780_pp0_iter4_reg <= icmp_ln129_1_reg_1780_pp0_iter3_reg;
                icmp_ln129_1_reg_1780_pp0_iter5_reg <= icmp_ln129_1_reg_1780_pp0_iter4_reg;
                icmp_ln129_1_reg_1780_pp0_iter6_reg <= icmp_ln129_1_reg_1780_pp0_iter5_reg;
                icmp_ln189_1_reg_1879_pp0_iter3_reg <= icmp_ln189_1_reg_1879;
                icmp_ln189_1_reg_1879_pp0_iter4_reg <= icmp_ln189_1_reg_1879_pp0_iter3_reg;
                icmp_ln189_1_reg_1879_pp0_iter5_reg <= icmp_ln189_1_reg_1879_pp0_iter4_reg;
                icmp_ln189_1_reg_1879_pp0_iter6_reg <= icmp_ln189_1_reg_1879_pp0_iter5_reg;
                icmp_ln189_2_reg_1884_pp0_iter3_reg <= icmp_ln189_2_reg_1884;
                icmp_ln189_2_reg_1884_pp0_iter4_reg <= icmp_ln189_2_reg_1884_pp0_iter3_reg;
                icmp_ln189_2_reg_1884_pp0_iter5_reg <= icmp_ln189_2_reg_1884_pp0_iter4_reg;
                icmp_ln189_2_reg_1884_pp0_iter6_reg <= icmp_ln189_2_reg_1884_pp0_iter5_reg;
                icmp_ln189_reg_1874_pp0_iter3_reg <= icmp_ln189_reg_1874;
                icmp_ln189_reg_1874_pp0_iter4_reg <= icmp_ln189_reg_1874_pp0_iter3_reg;
                icmp_ln189_reg_1874_pp0_iter5_reg <= icmp_ln189_reg_1874_pp0_iter4_reg;
                icmp_ln189_reg_1874_pp0_iter6_reg <= icmp_ln189_reg_1874_pp0_iter5_reg;
                    zext_ln129_reg_1834_pp0_iter3_reg(31 downto 0) <= zext_ln129_reg_1834(31 downto 0);
                    zext_ln129_reg_1834_pp0_iter4_reg(31 downto 0) <= zext_ln129_reg_1834_pp0_iter3_reg(31 downto 0);
                    zext_ln129_reg_1834_pp0_iter5_reg(31 downto 0) <= zext_ln129_reg_1834_pp0_iter4_reg(31 downto 0);
                    zext_ln129_reg_1834_pp0_iter6_reg(31 downto 0) <= zext_ln129_reg_1834_pp0_iter5_reg(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln181_10_reg_2028 <= grp_fu_1444_p3;
                add_ln181_1_reg_2013 <= grp_fu_1423_p3;
                add_ln181_4_reg_2018 <= grp_fu_1430_p3;
                add_ln181_7_reg_2023 <= grp_fu_1437_p3;
                psum_10_reg_614 <= add_ln181_8_reg_2003;
                psum_14_reg_578 <= add_ln181_11_reg_2008;
                psum_2_reg_686 <= add_ln181_2_reg_1993;
                psum_6_reg_650 <= add_ln181_5_reg_1998;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln181_11_reg_2008 <= grp_fu_1416_p3;
                add_ln181_2_reg_1993 <= grp_fu_1395_p3;
                add_ln181_5_reg_1998 <= grp_fu_1402_p3;
                add_ln181_8_reg_2003 <= grp_fu_1409_p3;
                empty_35_fu_232 <= select_ln143_2_fu_1196_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln181_3_reg_2038 <= grp_fu_1458_p3;
                add_ln181_6_reg_2043 <= grp_fu_1465_p3;
                add_ln181_9_reg_2048 <= grp_fu_1472_p3;
                add_ln181_reg_2033 <= grp_fu_1451_p3;
                psum_13_reg_590 <= add_ln181_10_reg_2028;
                psum_1_reg_698 <= add_ln181_1_reg_2013;
                psum_5_reg_662 <= add_ln181_4_reg_2018;
                psum_9_reg_626 <= add_ln181_7_reg_2023;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln289_reg_1607 <= add_ln289_fu_728_p2;
                icmp_ln368_reg_1612 <= icmp_ln368_fu_740_p2;
                mul_ln289_reg_1599 <= mul_ln289_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_27_fu_200 <= empty_31_fu_216;
                empty_31_fu_216 <= empty_35_fu_232;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_28_fu_204 <= empty_32_fu_220;
                empty_32_fu_220 <= empty_36_fu_236;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_29_fu_208 <= empty_33_fu_224;
                empty_33_fu_224 <= empty_37_fu_240;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_30_fu_212 <= empty_34_fu_228;
                empty_34_fu_228 <= empty_38_fu_244;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_36_fu_236 <= select_ln143_1_fu_1046_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_37_fu_240 <= select_ln143_fu_922_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_1_reg_1780 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_38_fu_244 <= data_l1buf_018_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_566_pp0_iter1_reg <= i_reg_566;
                icmp_ln129_1_reg_1780 <= icmp_ln129_1_fu_816_p2;
                icmp_ln129_1_reg_1780_pp0_iter1_reg <= icmp_ln129_1_reg_1780;
                    zext_ln144_reg_1789_pp0_iter1_reg(31 downto 0) <= zext_ln144_reg_1789(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_1_reg_1780_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln189_1_reg_1879 <= icmp_ln189_1_fu_974_p2;
                icmp_ln189_2_reg_1884 <= icmp_ln189_2_fu_985_p2;
                icmp_ln189_3_reg_1889 <= icmp_ln189_3_fu_990_p2;
                icmp_ln189_reg_1874 <= icmp_ln189_fu_958_p2;
                    zext_ln129_reg_1834(31 downto 0) <= zext_ln129_fu_912_p1(31 downto 0);
                    zext_ln144_3_reg_1849(31 downto 0) <= zext_ln144_3_fu_947_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                psum_12_reg_602 <= add_ln181_9_reg_2048;
                psum_4_reg_674 <= add_ln181_3_reg_2038;
                psum_8_reg_638 <= add_ln181_6_reg_2043;
                psum_reg_710 <= add_ln181_reg_2033;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_1_reg_1780 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln144_reg_1799 <= trunc_ln144_fu_854_p1;
                    zext_ln144_1_reg_1804(9 downto 0) <= zext_ln144_1_fu_864_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (icmp_ln129_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weight_regfile14_load_cast_i_i_reg_1755 <= weight_regfile14_load_cast_i_i_fu_796_p1;
                weight_regfile15_load_cast_i_i_reg_1750 <= weight_regfile15_load_cast_i_i_fu_792_p1;
                weight_regfile16_load_cast_i_i_reg_1745 <= weight_regfile16_load_cast_i_i_fu_788_p1;
                weight_regfile17_load_cast_i_i_reg_1740 <= weight_regfile17_load_cast_i_i_fu_784_p1;
                weight_regfile1_load_cast_i_i_reg_1770 <= weight_regfile1_load_cast_i_i_fu_808_p1;
                weight_regfile210_load_cast_i_i_reg_1725 <= weight_regfile210_load_cast_i_i_fu_772_p1;
                weight_regfile211_load_cast_i_i_reg_1720 <= weight_regfile211_load_cast_i_i_fu_768_p1;
                weight_regfile28_load_cast_i_i_reg_1735 <= weight_regfile28_load_cast_i_i_fu_780_p1;
                weight_regfile29_load_cast_i_i_reg_1730 <= weight_regfile29_load_cast_i_i_fu_776_p1;
                weight_regfile2_load_cast_i_i_reg_1765 <= weight_regfile2_load_cast_i_i_fu_804_p1;
                weight_regfile312_load_cast_i_i_reg_1715 <= weight_regfile312_load_cast_i_i_fu_764_p1;
                weight_regfile313_load_cast_i_i_reg_1710 <= weight_regfile313_load_cast_i_i_fu_760_p1;
                weight_regfile314_load_cast_i_i_reg_1705 <= weight_regfile314_load_cast_i_i_fu_756_p1;
                weight_regfile315_load_cast_i_i_reg_1700 <= weight_regfile315_load_cast_i_i_fu_752_p1;
                weight_regfile3_load_cast_i_i_reg_1760 <= weight_regfile3_load_cast_i_i_fu_800_p1;
                weight_regfile_load_cast_i_i_reg_1775 <= weight_regfile_load_cast_i_i_fu_812_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_1_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln144_reg_1789(31 downto 0) <= zext_ln144_fu_827_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln144_reg_1789(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln144_reg_1789_pp0_iter1_reg(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln144_1_reg_1804(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln129_reg_1834(32) <= '0';
    zext_ln129_reg_1834_pp0_iter3_reg(32) <= '0';
    zext_ln129_reg_1834_pp0_iter4_reg(32) <= '0';
    zext_ln129_reg_1834_pp0_iter5_reg(32) <= '0';
    zext_ln129_reg_1834_pp0_iter6_reg(32) <= '0';
    zext_ln144_3_reg_1849(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n, icmp_ln129_fu_746_p2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (icmp_ln129_fu_746_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (icmp_ln129_fu_746_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln129_fu_821_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_570_p4) + unsigned(ap_const_lv32_1));
    add_ln141_1_fu_1033_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFE) + signed(zext_ln129_reg_1834));
    add_ln141_2_fu_930_p2 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(trunc_ln144_reg_1799));
    add_ln141_3_fu_1054_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFD) + signed(zext_ln129_reg_1834));
    add_ln141_4_fu_941_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFD) + signed(i_reg_566_pp0_iter1_reg));
    add_ln141_fu_858_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(trunc_ln144_fu_854_p1));
    add_ln151_fu_1115_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFF) + signed(zext_ln129_reg_1834));
    add_ln188_1_fu_1275_p2 <= std_logic_vector(unsigned(zext_ln129_reg_1834_pp0_iter6_reg) + unsigned(ap_const_lv33_1FFFFFFFB));
    add_ln188_2_fu_1305_p2 <= std_logic_vector(unsigned(zext_ln129_reg_1834_pp0_iter6_reg) + unsigned(ap_const_lv33_1FFFFFFFC));
    add_ln188_fu_1245_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFA) + signed(zext_ln129_reg_1834_pp0_iter6_reg));
    add_ln189_1_fu_968_p2 <= std_logic_vector(unsigned(i_reg_566_pp0_iter1_reg) + unsigned(ap_const_lv32_FFFFFFFB));
    add_ln189_2_fu_979_p2 <= std_logic_vector(unsigned(i_reg_566_pp0_iter1_reg) + unsigned(ap_const_lv32_FFFFFFFC));
    add_ln189_fu_952_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFA) + signed(i_reg_566_pp0_iter1_reg));
    add_ln289_fu_728_p2 <= std_logic_vector(unsigned(mul_ln289_fu_722_p2) + unsigned(ap_const_lv32_6));
    and_ln189_1_fu_1300_p2 <= (xor_ln188_1_fu_1294_p2 and icmp_ln189_1_reg_1879_pp0_iter6_reg);
    and_ln189_2_fu_1330_p2 <= (xor_ln188_2_fu_1324_p2 and icmp_ln189_2_reg_1884_pp0_iter6_reg);
    and_ln189_3_fu_1153_p2 <= (xor_ln143_fu_1067_p2 and icmp_ln189_3_reg_1889);
    and_ln189_fu_1270_p2 <= (xor_ln188_fu_1264_p2 and icmp_ln189_reg_1874_pp0_iter6_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, empty_empty_n, s_empty_n, r_empty_n)
    begin
                ap_block_state1 <= ((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter4_state6_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln129_1_fu_816_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln129_1_fu_816_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_570_p4_assign_proc : process(i_reg_566, ap_CS_fsm_pp0_stage0, icmp_ln129_1_reg_1780, add_ln129_reg_1784, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln129_1_reg_1780 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_570_p4 <= add_ln129_reg_1784;
        else 
            ap_phi_mux_i_phi_fu_570_p4 <= i_reg_566;
        end if; 
    end process;


    ap_phi_mux_psum_10_phi_fu_618_p4_assign_proc : process(psum_10_reg_614, icmp_ln129_1_reg_1780_pp0_iter4_reg, add_ln181_8_reg_2003, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_10_phi_fu_618_p4 <= add_ln181_8_reg_2003;
        else 
            ap_phi_mux_psum_10_phi_fu_618_p4 <= psum_10_reg_614;
        end if; 
    end process;


    ap_phi_mux_psum_12_phi_fu_606_p4_assign_proc : process(psum_12_reg_602, icmp_ln129_1_reg_1780_pp0_iter6_reg, add_ln181_9_reg_2048, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_12_phi_fu_606_p4 <= add_ln181_9_reg_2048;
        else 
            ap_phi_mux_psum_12_phi_fu_606_p4 <= psum_12_reg_602;
        end if; 
    end process;


    ap_phi_mux_psum_13_phi_fu_594_p4_assign_proc : process(psum_13_reg_590, icmp_ln129_1_reg_1780_pp0_iter5_reg, add_ln181_10_reg_2028, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_13_phi_fu_594_p4 <= add_ln181_10_reg_2028;
        else 
            ap_phi_mux_psum_13_phi_fu_594_p4 <= psum_13_reg_590;
        end if; 
    end process;


    ap_phi_mux_psum_14_phi_fu_582_p4_assign_proc : process(psum_14_reg_578, icmp_ln129_1_reg_1780_pp0_iter4_reg, add_ln181_11_reg_2008, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_14_phi_fu_582_p4 <= add_ln181_11_reg_2008;
        else 
            ap_phi_mux_psum_14_phi_fu_582_p4 <= psum_14_reg_578;
        end if; 
    end process;


    ap_phi_mux_psum_1_phi_fu_702_p4_assign_proc : process(psum_1_reg_698, icmp_ln129_1_reg_1780_pp0_iter5_reg, add_ln181_1_reg_2013, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_1_phi_fu_702_p4 <= add_ln181_1_reg_2013;
        else 
            ap_phi_mux_psum_1_phi_fu_702_p4 <= psum_1_reg_698;
        end if; 
    end process;


    ap_phi_mux_psum_2_phi_fu_690_p4_assign_proc : process(psum_2_reg_686, icmp_ln129_1_reg_1780_pp0_iter4_reg, add_ln181_2_reg_1993, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_2_phi_fu_690_p4 <= add_ln181_2_reg_1993;
        else 
            ap_phi_mux_psum_2_phi_fu_690_p4 <= psum_2_reg_686;
        end if; 
    end process;


    ap_phi_mux_psum_4_phi_fu_678_p4_assign_proc : process(psum_4_reg_674, icmp_ln129_1_reg_1780_pp0_iter6_reg, add_ln181_3_reg_2038, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_4_phi_fu_678_p4 <= add_ln181_3_reg_2038;
        else 
            ap_phi_mux_psum_4_phi_fu_678_p4 <= psum_4_reg_674;
        end if; 
    end process;


    ap_phi_mux_psum_5_phi_fu_666_p4_assign_proc : process(psum_5_reg_662, icmp_ln129_1_reg_1780_pp0_iter5_reg, add_ln181_4_reg_2018, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_5_phi_fu_666_p4 <= add_ln181_4_reg_2018;
        else 
            ap_phi_mux_psum_5_phi_fu_666_p4 <= psum_5_reg_662;
        end if; 
    end process;


    ap_phi_mux_psum_6_phi_fu_654_p4_assign_proc : process(psum_6_reg_650, icmp_ln129_1_reg_1780_pp0_iter4_reg, add_ln181_5_reg_1998, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_6_phi_fu_654_p4 <= add_ln181_5_reg_1998;
        else 
            ap_phi_mux_psum_6_phi_fu_654_p4 <= psum_6_reg_650;
        end if; 
    end process;


    ap_phi_mux_psum_8_phi_fu_642_p4_assign_proc : process(psum_8_reg_638, icmp_ln129_1_reg_1780_pp0_iter6_reg, add_ln181_6_reg_2043, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_8_phi_fu_642_p4 <= add_ln181_6_reg_2043;
        else 
            ap_phi_mux_psum_8_phi_fu_642_p4 <= psum_8_reg_638;
        end if; 
    end process;


    ap_phi_mux_psum_9_phi_fu_630_p4_assign_proc : process(psum_9_reg_626, icmp_ln129_1_reg_1780_pp0_iter5_reg, add_ln181_7_reg_2023, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_9_phi_fu_630_p4 <= add_ln181_7_reg_2023;
        else 
            ap_phi_mux_psum_9_phi_fu_630_p4 <= psum_9_reg_626;
        end if; 
    end process;


    ap_phi_mux_psum_phi_fu_714_p4_assign_proc : process(psum_reg_710, icmp_ln129_1_reg_1780_pp0_iter6_reg, add_ln181_reg_2033, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln129_1_reg_1780_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_phi_fu_714_p4 <= add_ln181_reg_2033;
        else 
            ap_phi_mux_psum_phi_fu_714_p4 <= psum_reg_710;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_018_address0 <= zext_ln144_fu_827_p1(9 - 1 downto 0);

    data_l1buf_018_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_018_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_018_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_119_address0 <= zext_ln144_1_fu_864_p1(9 - 1 downto 0);

    data_l1buf_119_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_119_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_119_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_220_address0 <= zext_ln144_2_fu_935_p1(9 - 1 downto 0);

    data_l1buf_220_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_220_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_220_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_321_address0 <= zext_ln144_3_reg_1849(9 - 1 downto 0);

    data_l1buf_321_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_321_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_321_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_blk_n <= empty_empty_n;
        else 
            empty_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_read <= ap_const_logic_1;
        else 
            empty_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1395_p1 <= weight_regfile312_load_cast_i_i_reg_1715(8 - 1 downto 0);
    grp_fu_1395_p2 <= 
        ap_const_lv32_0 when (or_ln153_fu_1081_p2(0) = '1') else 
        output_l1_local_3_q1;
    grp_fu_1402_p1 <= weight_regfile28_load_cast_i_i_reg_1735(8 - 1 downto 0);
    grp_fu_1402_p2 <= 
        ap_const_lv32_0 when (or_ln153_1_fu_1102_p2(0) = '1') else 
        output_l1_local_2_q1;
    grp_fu_1409_p1 <= weight_regfile14_load_cast_i_i_reg_1755(8 - 1 downto 0);
    grp_fu_1409_p2 <= 
        ap_const_lv32_0 when (or_ln153_2_fu_1128_p2(0) = '1') else 
        output_l1_local_1_q1;
    grp_fu_1416_p1 <= weight_regfile_load_cast_i_i_reg_1775(8 - 1 downto 0);
    grp_fu_1416_p2 <= 
        ap_const_lv32_0 when (icmp_ln368_reg_1612(0) = '1') else 
        output_l1_local_0_q1;
    grp_fu_1423_p1 <= weight_regfile313_load_cast_i_i_reg_1710(8 - 1 downto 0);
    grp_fu_1430_p1 <= weight_regfile29_load_cast_i_i_reg_1730(8 - 1 downto 0);
    grp_fu_1437_p1 <= weight_regfile15_load_cast_i_i_reg_1750(8 - 1 downto 0);
    grp_fu_1444_p1 <= weight_regfile1_load_cast_i_i_reg_1770(8 - 1 downto 0);
    grp_fu_1451_p1 <= weight_regfile314_load_cast_i_i_reg_1705(8 - 1 downto 0);
    grp_fu_1458_p1 <= weight_regfile210_load_cast_i_i_reg_1725(8 - 1 downto 0);
    grp_fu_1465_p1 <= weight_regfile16_load_cast_i_i_reg_1745(8 - 1 downto 0);
    grp_fu_1472_p1 <= weight_regfile2_load_cast_i_i_reg_1765(8 - 1 downto 0);
    grp_fu_1479_p0 <= weight_regfile315_load_cast_i_i_reg_1700(8 - 1 downto 0);
    grp_fu_1489_p0 <= weight_regfile211_load_cast_i_i_reg_1720(8 - 1 downto 0);
    grp_fu_1499_p0 <= weight_regfile17_load_cast_i_i_reg_1740(8 - 1 downto 0);
    grp_fu_1509_p0 <= weight_regfile3_load_cast_i_i_reg_1760(8 - 1 downto 0);
    icmp_ln129_1_fu_816_p2 <= "1" when (ap_phi_mux_i_phi_fu_570_p4 = add_ln289_reg_1607) else "0";
    icmp_ln129_fu_746_p2 <= "1" when (add_ln289_fu_728_p2 = ap_const_lv32_0) else "0";
    icmp_ln143_fu_916_p2 <= "1" when (i_reg_566_pp0_iter1_reg = ap_const_lv32_0) else "0";
    icmp_ln189_1_fu_974_p2 <= "1" when (unsigned(add_ln189_1_fu_968_p2) < unsigned(mul_ln289_reg_1599)) else "0";
    icmp_ln189_2_fu_985_p2 <= "1" when (unsigned(add_ln189_2_fu_979_p2) < unsigned(mul_ln289_reg_1599)) else "0";
    icmp_ln189_3_fu_990_p2 <= "1" when (unsigned(add_ln141_4_fu_941_p2) < unsigned(mul_ln289_reg_1599)) else "0";
    icmp_ln189_fu_958_p2 <= "1" when (unsigned(add_ln189_fu_952_p2) < unsigned(mul_ln289_reg_1599)) else "0";
    icmp_ln368_fu_740_p2 <= "1" when (or_ln368_fu_734_p2 = ap_const_lv32_0) else "0";
    or_ln153_1_fu_1102_p2 <= (tmp_6_fu_1094_p3 or icmp_ln368_reg_1612);
    or_ln153_2_fu_1128_p2 <= (tmp_7_fu_1120_p3 or icmp_ln368_reg_1612);
    or_ln153_fu_1081_p2 <= (tmp_5_fu_1073_p3 or icmp_ln368_reg_1612);
    or_ln368_fu_734_p2 <= (s_dout or r_dout);
    output_l1_local_0_address0 <= zext_ln141_fu_1224_p1(10 - 1 downto 0);
    output_l1_local_0_address1 <= zext_ln144_reg_1789_pp0_iter1_reg(10 - 1 downto 0);

    output_l1_local_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_0_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln189_3_reg_1949_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_3_reg_1949_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_0_we0 <= ap_const_logic_1;
        else 
            output_l1_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_local_1_address0 <= zext_ln188_2_fu_1310_p1(10 - 1 downto 0);
    output_l1_local_1_address1 <= zext_ln144_1_reg_1804(10 - 1 downto 0);

    output_l1_local_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_1_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7, and_ln189_2_fu_1330_p2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_2_fu_1330_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_1_we0 <= ap_const_logic_1;
        else 
            output_l1_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_local_2_address0 <= zext_ln188_1_fu_1280_p1(10 - 1 downto 0);
    output_l1_local_2_address1 <= zext_ln144_2_fu_935_p1(10 - 1 downto 0);

    output_l1_local_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_2_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7, and_ln189_1_fu_1300_p2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_1_fu_1300_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_2_we0 <= ap_const_logic_1;
        else 
            output_l1_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_local_3_address0 <= zext_ln188_fu_1250_p1(10 - 1 downto 0);
    output_l1_local_3_address1 <= zext_ln144_3_fu_947_p1(10 - 1 downto 0);

    output_l1_local_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_3_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7, and_ln189_fu_1270_p2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_fu_1270_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_3_we0 <= ap_const_logic_1;
        else 
            output_l1_local_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_0_address0 <= zext_ln141_fu_1224_p1(10 - 1 downto 0);

    output_l1_pass_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_0_d0 <= grp_fu_1509_p3;

    output_l1_pass_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln189_3_reg_1949_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_3_reg_1949_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_0_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_1_address0 <= zext_ln188_2_fu_1310_p1(10 - 1 downto 0);

    output_l1_pass_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_1_d0 <= grp_fu_1499_p3;

    output_l1_pass_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7, and_ln189_2_fu_1330_p2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_2_fu_1330_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_1_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_2_address0 <= zext_ln188_1_fu_1280_p1(10 - 1 downto 0);

    output_l1_pass_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_2_d0 <= grp_fu_1489_p3;

    output_l1_pass_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7, and_ln189_1_fu_1300_p2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_1_fu_1300_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_2_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_3_address0 <= zext_ln188_fu_1250_p1(10 - 1 downto 0);

    output_l1_pass_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_3_d0 <= grp_fu_1479_p3;

    output_l1_pass_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7, and_ln189_fu_1270_p2)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln189_fu_1270_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_pass_3_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_blk_n <= r_empty_n;
        else 
            r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_read <= ap_const_logic_1;
        else 
            r_read <= ap_const_logic_0;
        end if; 
    end process;


    s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_blk_n <= s_empty_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((s_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_read <= ap_const_logic_1;
        else 
            s_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln143_1_fu_1046_p3 <= 
        ap_const_lv8_0 when (tmp_3_fu_1038_p3(0) = '1') else 
        data_l1buf_220_q0;
    select_ln143_2_fu_1196_p3 <= 
        ap_const_lv8_0 when (tmp_4_reg_1919(0) = '1') else 
        data_l1buf_321_q0;
    select_ln143_fu_922_p3 <= 
        ap_const_lv8_0 when (icmp_ln143_fu_916_p2(0) = '1') else 
        data_l1buf_119_q0;
    tmp_10_fu_1316_p3 <= add_ln188_2_fu_1305_p2(32 downto 32);
    tmp_3_fu_1038_p3 <= add_ln141_1_fu_1033_p2(32 downto 32);
    tmp_4_fu_1059_p3 <= add_ln141_3_fu_1054_p2(32 downto 32);
    tmp_5_fu_1073_p3 <= add_ln141_3_fu_1054_p2(32 downto 32);
    tmp_6_fu_1094_p3 <= add_ln141_1_fu_1033_p2(32 downto 32);
    tmp_7_fu_1120_p3 <= add_ln151_fu_1115_p2(32 downto 32);
    tmp_8_fu_1256_p3 <= add_ln188_fu_1245_p2(32 downto 32);
    tmp_9_fu_1286_p3 <= add_ln188_1_fu_1275_p2(32 downto 32);
    trunc_ln144_fu_854_p1 <= i_reg_566(10 - 1 downto 0);
        weight_regfile14_load_cast_i_i_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read4),16));

        weight_regfile15_load_cast_i_i_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read5),16));

        weight_regfile16_load_cast_i_i_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read6),16));

        weight_regfile17_load_cast_i_i_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read7),16));

        weight_regfile1_load_cast_i_i_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read1),16));

        weight_regfile210_load_cast_i_i_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read10),16));

        weight_regfile211_load_cast_i_i_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read11),16));

        weight_regfile28_load_cast_i_i_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read8),16));

        weight_regfile29_load_cast_i_i_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read9),16));

        weight_regfile2_load_cast_i_i_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read2),16));

        weight_regfile312_load_cast_i_i_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read12),16));

        weight_regfile313_load_cast_i_i_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read13),16));

        weight_regfile314_load_cast_i_i_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read14),16));

        weight_regfile315_load_cast_i_i_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read15),16));

        weight_regfile3_load_cast_i_i_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read3),16));

        weight_regfile_load_cast_i_i_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read),16));

    xor_ln143_fu_1067_p2 <= (tmp_4_fu_1059_p3 xor ap_const_lv1_1);
    xor_ln188_1_fu_1294_p2 <= (tmp_9_fu_1286_p3 xor ap_const_lv1_1);
    xor_ln188_2_fu_1324_p2 <= (tmp_10_fu_1316_p3 xor ap_const_lv1_1);
    xor_ln188_fu_1264_p2 <= (tmp_8_fu_1256_p3 xor ap_const_lv1_1);
    zext_ln129_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_566_pp0_iter1_reg),33));
    zext_ln141_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln141_3_reg_1914_pp0_iter6_reg),64));
    zext_ln144_1_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln141_fu_858_p2),64));
    zext_ln144_2_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln141_2_fu_930_p2),64));
    zext_ln144_3_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln141_4_fu_941_p2),64));
    zext_ln144_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_570_p4),64));
    zext_ln188_1_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_1_fu_1275_p2),64));
    zext_ln188_2_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_2_fu_1305_p2),64));
    zext_ln188_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_fu_1245_p2),64));
end behav;
