-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runOutputL1toL2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_l1_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_0_ce0 : OUT STD_LOGIC;
    output_l1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l1_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_1_ce0 : OUT STD_LOGIC;
    output_l1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l1_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_2_ce0 : OUT STD_LOGIC;
    output_l1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l1_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_3_ce0 : OUT STD_LOGIC;
    output_l1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l2_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l2_0_ce0 : OUT STD_LOGIC;
    output_l2_0_we0 : OUT STD_LOGIC;
    output_l2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l2_1_ce0 : OUT STD_LOGIC;
    output_l2_1_we0 : OUT STD_LOGIC;
    output_l2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l2_2_ce0 : OUT STD_LOGIC;
    output_l2_2_we0 : OUT STD_LOGIC;
    output_l2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l2_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l2_3_ce0 : OUT STD_LOGIC;
    output_l2_3_we0 : OUT STD_LOGIC;
    output_l2_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_23_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_23_empty_n : IN STD_LOGIC;
    empty_23_read : OUT STD_LOGIC;
    empty_24_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_24_empty_n : IN STD_LOGIC;
    empty_24_read : OUT STD_LOGIC;
    ko_2_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    ko_2_empty_n : IN STD_LOGIC;
    ko_2_read : OUT STD_LOGIC;
    ho_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    ho_empty_n : IN STD_LOGIC;
    ho_read : OUT STD_LOGIC;
    wo_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    wo_empty_n : IN STD_LOGIC;
    wo_read : OUT STD_LOGIC;
    empty_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    empty_empty_n : IN STD_LOGIC;
    empty_read : OUT STD_LOGIC );
end;


architecture behav of Conv_sysarr_runOutputL1toL2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_23_blk_n : STD_LOGIC;
    signal empty_24_blk_n : STD_LOGIC;
    signal ko_2_blk_n : STD_LOGIC;
    signal ho_blk_n : STD_LOGIC;
    signal wo_blk_n : STD_LOGIC;
    signal empty_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_210 : STD_LOGIC_VECTOR (63 downto 0);
    signal hi_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal wi_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal TILESIZE_W_assign_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal WH_assign_reg_378 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln49_fu_243_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln49_reg_383 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul3_i_i_fu_251_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul3_i_i_reg_388 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul5_i_i_fu_257_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul5_i_i_reg_393 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul11_i_i_fu_263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul11_i_i_reg_398 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln51_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_reg_408_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_408_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_408_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_2_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln51_1_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_1_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_fu_321_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_39_fu_330_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_39_reg_427 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_39_reg_427_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln53_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add15_i_i_reg_443 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_hi_phi_fu_225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom_i_i_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom16_i_i_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_i_i_fu_251_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul5_i_i_fu_257_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_3_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln51_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_365_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_277_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_277_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component Conv_sysarr_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_ama_addmuladd_9ns_9ns_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    mul_9s_9s_9_1_1_U172 : component Conv_sysarr_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => ho_dout,
        din1 => mul3_i_i_fu_251_p1,
        dout => mul3_i_i_fu_251_p2);

    mul_9s_9s_9_1_1_U173 : component Conv_sysarr_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => wo_dout,
        din1 => mul5_i_i_fu_257_p1,
        dout => mul5_i_i_fu_257_p2);

    mul_9s_9s_9_1_1_U174 : component Conv_sysarr_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => empty_dout,
        din1 => ko_2_dout,
        dout => mul11_i_i_fu_263_p2);

    mul_32ns_32ns_64_1_1_U175 : component Conv_sysarr_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => bound_fu_277_p0,
        din1 => bound_fu_277_p1,
        dout => bound_fu_277_p2);

    mac_muladd_9s_9s_9ns_9_4_1_U176 : component Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln49_reg_383,
        din1 => trunc_ln51_fu_321_p1,
        din2 => empty_39_reg_427_pp0_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_358_p3);

    ama_addmuladd_9ns_9ns_9s_9ns_9_4_1_U177 : component Conv_sysarr_ama_addmuladd_9ns_9ns_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => mul3_i_i_reg_388,
        din2 => WH_assign_reg_378,
        din3 => grp_fu_365_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hi_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_reg_408 = ap_const_lv1_0))) then 
                hi_reg_221 <= select_ln51_1_reg_417;
            elsif ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                hi_reg_221 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_fu_283_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_210 <= add_ln51_2_fu_288_p2;
            elsif ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_210 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    wi_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_fu_283_p2 = ap_const_lv1_0))) then 
                wi_reg_232 <= add_ln53_fu_334_p2;
            elsif ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                wi_reg_232 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                TILESIZE_W_assign_reg_373 <= empty_24_dout;
                WH_assign_reg_378 <= empty_dout;
                bound_reg_403 <= bound_fu_277_p2;
                mul11_i_i_reg_398 <= mul11_i_i_fu_263_p2;
                mul3_i_i_reg_388 <= mul3_i_i_fu_251_p2;
                mul5_i_i_reg_393 <= mul5_i_i_fu_257_p2;
                trunc_ln49_reg_383 <= trunc_ln49_fu_243_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln51_reg_408_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add15_i_i_reg_443 <= grp_fu_365_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_fu_283_p2 = ap_const_lv1_0))) then
                empty_39_reg_427 <= empty_39_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_39_reg_427_pp0_iter1_reg <= empty_39_reg_427;
                icmp_ln51_reg_408 <= icmp_ln51_fu_283_p2;
                icmp_ln51_reg_408_pp0_iter1_reg <= icmp_ln51_reg_408;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln51_reg_408_pp0_iter2_reg <= icmp_ln51_reg_408_pp0_iter1_reg;
                icmp_ln51_reg_408_pp0_iter3_reg <= icmp_ln51_reg_408_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_fu_283_p2 = ap_const_lv1_0))) then
                select_ln51_1_reg_417 <= select_ln51_1_fu_313_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n, icmp_ln51_fu_283_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln51_fu_283_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln51_fu_283_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln51_2_fu_288_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_210) + unsigned(ap_const_lv64_1));
    add_ln51_3_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_hi_phi_fu_225_p4));
    add_ln53_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln51_fu_299_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n)
    begin
                ap_block_state1 <= ((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln51_fu_283_p2)
    begin
        if ((icmp_ln51_fu_283_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_hi_phi_fu_225_p4_assign_proc : process(hi_reg_221, icmp_ln51_reg_408, ap_CS_fsm_pp0_stage0, select_ln51_1_reg_417, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln51_reg_408 = ap_const_lv1_0))) then 
            ap_phi_mux_hi_phi_fu_225_p4 <= select_ln51_1_reg_417;
        else 
            ap_phi_mux_hi_phi_fu_225_p4 <= hi_reg_221;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_277_p0 <= bound_fu_277_p00(32 - 1 downto 0);
    bound_fu_277_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_23_dout),64));
    bound_fu_277_p1 <= bound_fu_277_p10(32 - 1 downto 0);
    bound_fu_277_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_24_dout),64));

    empty_23_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_23_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_23_blk_n <= empty_23_empty_n;
        else 
            empty_23_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_23_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_23_read <= ap_const_logic_1;
        else 
            empty_23_read <= ap_const_logic_0;
        end if; 
    end process;


    empty_24_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_24_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_24_blk_n <= empty_24_empty_n;
        else 
            empty_24_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_24_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_24_read <= ap_const_logic_1;
        else 
            empty_24_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_39_fu_330_p1 <= select_ln51_fu_299_p3(9 - 1 downto 0);

    empty_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_blk_n <= empty_empty_n;
        else 
            empty_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_read <= ap_const_logic_1;
        else 
            empty_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_365_p0 <= std_logic_vector(unsigned(mul11_i_i_reg_398) + unsigned(trunc_ln51_fu_321_p1));
    grp_fu_365_p3 <= std_logic_vector(unsigned(mul5_i_i_reg_393) + unsigned(empty_39_reg_427_pp0_iter1_reg));

    ho_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ho_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ho_blk_n <= ho_empty_n;
        else 
            ho_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ho_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ho_read <= ap_const_logic_1;
        else 
            ho_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln51_fu_283_p2 <= "1" when (indvar_flatten_reg_210 = bound_reg_403) else "0";
    icmp_ln53_fu_294_p2 <= "1" when (wi_reg_232 = TILESIZE_W_assign_reg_373) else "0";
    idxprom16_i_i_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add15_i_i_reg_443),64));
    idxprom_i_i_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_358_p3),64));

    ko_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_blk_n <= ko_2_empty_n;
        else 
            ko_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_read <= ap_const_logic_1;
        else 
            ko_2_read <= ap_const_logic_0;
        end if; 
    end process;

    mul3_i_i_fu_251_p1 <= empty_23_dout(9 - 1 downto 0);
    mul5_i_i_fu_257_p1 <= empty_24_dout(9 - 1 downto 0);
    output_l1_0_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    output_l1_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_1_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    output_l1_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_2_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    output_l1_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_3_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    output_l1_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_0_address0 <= idxprom16_i_i_fu_351_p1(9 - 1 downto 0);

    output_l2_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_0_ce0 <= ap_const_logic_1;
        else 
            output_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_0_d0 <= output_l1_0_q0;

    output_l2_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln51_reg_408_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln51_reg_408_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_0_we0 <= ap_const_logic_1;
        else 
            output_l2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_1_address0 <= idxprom16_i_i_fu_351_p1(9 - 1 downto 0);

    output_l2_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_1_ce0 <= ap_const_logic_1;
        else 
            output_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_1_d0 <= output_l1_1_q0;

    output_l2_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln51_reg_408_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln51_reg_408_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_1_we0 <= ap_const_logic_1;
        else 
            output_l2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_2_address0 <= idxprom16_i_i_fu_351_p1(9 - 1 downto 0);

    output_l2_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_2_ce0 <= ap_const_logic_1;
        else 
            output_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_2_d0 <= output_l1_2_q0;

    output_l2_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln51_reg_408_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln51_reg_408_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_2_we0 <= ap_const_logic_1;
        else 
            output_l2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_3_address0 <= idxprom16_i_i_fu_351_p1(9 - 1 downto 0);

    output_l2_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_3_ce0 <= ap_const_logic_1;
        else 
            output_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l2_3_d0 <= output_l1_3_q0;

    output_l2_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln51_reg_408_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln51_reg_408_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l2_3_we0 <= ap_const_logic_1;
        else 
            output_l2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln51_1_fu_313_p3 <= 
        add_ln51_3_fu_307_p2 when (icmp_ln53_fu_294_p2(0) = '1') else 
        ap_phi_mux_hi_phi_fu_225_p4;
    select_ln51_fu_299_p3 <= 
        ap_const_lv32_0 when (icmp_ln53_fu_294_p2(0) = '1') else 
        wi_reg_232;
    trunc_ln49_fu_243_p1 <= empty_24_dout(9 - 1 downto 0);
    trunc_ln51_fu_321_p1 <= select_ln51_1_fu_313_p3(9 - 1 downto 0);

    wo_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, wo_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            wo_blk_n <= wo_empty_n;
        else 
            wo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    wo_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_23_empty_n, empty_24_empty_n, ko_2_empty_n, ho_empty_n, wo_empty_n, empty_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_24_empty_n = ap_const_logic_0) or (empty_23_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            wo_read <= ap_const_logic_1;
        else 
            wo_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
