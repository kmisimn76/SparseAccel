// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_dataflow_parent_loop_proc17 (
        lshr_ln334_4_cast,
        param_L2_TILENUM_S,
        conv_out_i,
        conv_out_o,
        bias_in,
        weight_in,
        data_in,
        param,
        cmo,
        ap_clk,
        ap_rst,
        param_L2_TILENUM_S_ap_vld,
        conv_out_i_ap_vld,
        conv_out_o_ap_vld,
        bias_in_ap_vld,
        weight_in_ap_vld,
        data_in_ap_vld,
        param_ap_vld,
        cmo_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] lshr_ln334_4_cast;
input  [31:0] param_L2_TILENUM_S;
input  [31:0] conv_out_i;
output  [31:0] conv_out_o;
input  [7:0] bias_in;
input  [7:0] weight_in;
input  [7:0] data_in;
input  [1183:0] param;
input  [31:0] cmo;
input   ap_clk;
input   ap_rst;
input   param_L2_TILENUM_S_ap_vld;
input   conv_out_i_ap_vld;
output   conv_out_o_ap_vld;
input   bias_in_ap_vld;
input   weight_in_ap_vld;
input   data_in_ap_vld;
input   param_ap_vld;
input   cmo_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [31:0] dataflow_parent_loop_proc_U0_conv_out_o;
wire    dataflow_parent_loop_proc_U0_conv_out_o_ap_vld;
wire    dataflow_parent_loop_proc_U0_ap_start;
wire    dataflow_parent_loop_proc_U0_ap_done;
wire    dataflow_parent_loop_proc_U0_ap_ready;
wire    dataflow_parent_loop_proc_U0_ap_idle;
reg    dataflow_parent_loop_proc_U0_ap_continue;
wire    dataflow_parent_loop_proc_U0_param_L2_TILENUM_S_ap_vld;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
reg   [31:0] loop_dataflow_input_count;
reg   [31:0] loop_dataflow_output_count;
wire   [31:0] bound_minus_1;
wire    dataflow_parent_loop_proc_U0_start_full_n;
wire    dataflow_parent_loop_proc_U0_start_write;

// power-on initialization
initial begin
#0 loop_dataflow_input_count = 32'd0;
#0 loop_dataflow_output_count = 32'd0;
end

Conv_sysarr_dataflow_parent_loop_proc dataflow_parent_loop_proc_U0(
    .param_L2_TILENUM_S(param_L2_TILENUM_S),
    .conv_out_i(conv_out_i),
    .conv_out_o(dataflow_parent_loop_proc_U0_conv_out_o),
    .bias_in(bias_in),
    .weight_in(weight_in),
    .data_in(data_in),
    .param(param),
    .rmo(loop_dataflow_input_count),
    .cmo(cmo),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .bias_in_ap_vld(bias_in_ap_vld),
    .param_ap_vld(param_ap_vld),
    .weight_in_ap_vld(weight_in_ap_vld),
    .data_in_ap_vld(data_in_ap_vld),
    .conv_out_i_ap_vld(conv_out_i_ap_vld),
    .conv_out_o_ap_vld(dataflow_parent_loop_proc_U0_conv_out_o_ap_vld),
    .rmo_ap_vld(1'b0),
    .cmo_ap_vld(cmo_ap_vld),
    .ap_start(dataflow_parent_loop_proc_U0_ap_start),
    .ap_done(dataflow_parent_loop_proc_U0_ap_done),
    .ap_ready(dataflow_parent_loop_proc_U0_ap_ready),
    .ap_idle(dataflow_parent_loop_proc_U0_ap_idle),
    .ap_continue(dataflow_parent_loop_proc_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 32'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 32'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 32'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 32'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_continue == 1'b1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 32'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_parent_loop_proc_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 32'd0) & (ap_start == 1'b0) & (dataflow_parent_loop_proc_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_parent_loop_proc_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b1;
    end else begin
        dataflow_parent_loop_proc_U0_ap_continue = 1'b0;
    end
end

assign ap_sync_continue = ap_continue;

assign ap_sync_done = dataflow_parent_loop_proc_U0_ap_done;

assign ap_sync_ready = dataflow_parent_loop_proc_U0_ap_ready;

assign bound_minus_1 = (lshr_ln334_4_cast - 32'd1);

assign conv_out_o = dataflow_parent_loop_proc_U0_conv_out_o;

assign conv_out_o_ap_vld = dataflow_parent_loop_proc_U0_conv_out_o_ap_vld;

assign dataflow_parent_loop_proc_U0_ap_start = ap_start;

assign dataflow_parent_loop_proc_U0_param_L2_TILENUM_S_ap_vld = param_L2_TILENUM_S_ap_vld;

assign dataflow_parent_loop_proc_U0_start_full_n = 1'b1;

assign dataflow_parent_loop_proc_U0_start_write = 1'b0;

endmodule //Conv_sysarr_dataflow_parent_loop_proc17
