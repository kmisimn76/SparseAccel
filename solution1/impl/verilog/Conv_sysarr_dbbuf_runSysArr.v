// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_dbbuf_runSysArr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weight_regfile_0_0_read,
        weight_regfile_0_1_read,
        weight_regfile_0_2_read,
        weight_regfile_0_3_read,
        weight_regfile_1_0_read,
        weight_regfile_1_1_read,
        weight_regfile_1_2_read,
        weight_regfile_1_3_read,
        weight_regfile_2_0_read,
        weight_regfile_2_1_read,
        weight_regfile_2_2_read,
        weight_regfile_2_3_read,
        weight_regfile_3_0_read,
        weight_regfile_3_1_read,
        weight_regfile_3_2_read,
        weight_regfile_3_3_read,
        data_l1buf_0_address0,
        data_l1buf_0_ce0,
        data_l1buf_0_q0,
        data_l1buf_1_address0,
        data_l1buf_1_ce0,
        data_l1buf_1_q0,
        data_l1buf_2_address0,
        data_l1buf_2_ce0,
        data_l1buf_2_q0,
        data_l1buf_3_address0,
        data_l1buf_3_ce0,
        data_l1buf_3_q0,
        empty_dout,
        empty_empty_n,
        empty_read,
        ko_1_dout,
        ko_1_empty_n,
        ko_1_read,
        output_l1_3_address0,
        output_l1_3_ce0,
        output_l1_3_we0,
        output_l1_3_d0,
        output_l1_3_address1,
        output_l1_3_ce1,
        output_l1_3_q1,
        output_l1_2_address0,
        output_l1_2_ce0,
        output_l1_2_we0,
        output_l1_2_d0,
        output_l1_2_address1,
        output_l1_2_ce1,
        output_l1_2_q1,
        output_l1_1_address0,
        output_l1_1_ce0,
        output_l1_1_we0,
        output_l1_1_d0,
        output_l1_1_address1,
        output_l1_1_ce1,
        output_l1_1_q1,
        output_l1_0_address0,
        output_l1_0_ce0,
        output_l1_0_we0,
        output_l1_0_d0,
        output_l1_0_address1,
        output_l1_0_ce1,
        output_l1_0_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] weight_regfile_0_0_read;
input  [7:0] weight_regfile_0_1_read;
input  [7:0] weight_regfile_0_2_read;
input  [7:0] weight_regfile_0_3_read;
input  [7:0] weight_regfile_1_0_read;
input  [7:0] weight_regfile_1_1_read;
input  [7:0] weight_regfile_1_2_read;
input  [7:0] weight_regfile_1_3_read;
input  [7:0] weight_regfile_2_0_read;
input  [7:0] weight_regfile_2_1_read;
input  [7:0] weight_regfile_2_2_read;
input  [7:0] weight_regfile_2_3_read;
input  [7:0] weight_regfile_3_0_read;
input  [7:0] weight_regfile_3_1_read;
input  [7:0] weight_regfile_3_2_read;
input  [7:0] weight_regfile_3_3_read;
output  [8:0] data_l1buf_0_address0;
output   data_l1buf_0_ce0;
input  [7:0] data_l1buf_0_q0;
output  [8:0] data_l1buf_1_address0;
output   data_l1buf_1_ce0;
input  [7:0] data_l1buf_1_q0;
output  [8:0] data_l1buf_2_address0;
output   data_l1buf_2_ce0;
input  [7:0] data_l1buf_2_q0;
output  [8:0] data_l1buf_3_address0;
output   data_l1buf_3_ce0;
input  [7:0] data_l1buf_3_q0;
input  [31:0] empty_dout;
input   empty_empty_n;
output   empty_read;
input  [8:0] ko_1_dout;
input   ko_1_empty_n;
output   ko_1_read;
output  [8:0] output_l1_3_address0;
output   output_l1_3_ce0;
output   output_l1_3_we0;
output  [31:0] output_l1_3_d0;
output  [8:0] output_l1_3_address1;
output   output_l1_3_ce1;
input  [31:0] output_l1_3_q1;
output  [8:0] output_l1_2_address0;
output   output_l1_2_ce0;
output   output_l1_2_we0;
output  [31:0] output_l1_2_d0;
output  [8:0] output_l1_2_address1;
output   output_l1_2_ce1;
input  [31:0] output_l1_2_q1;
output  [8:0] output_l1_1_address0;
output   output_l1_1_ce0;
output   output_l1_1_we0;
output  [31:0] output_l1_1_d0;
output  [8:0] output_l1_1_address1;
output   output_l1_1_ce1;
input  [31:0] output_l1_1_q1;
output  [8:0] output_l1_0_address0;
output   output_l1_0_ce0;
output   output_l1_0_we0;
output  [31:0] output_l1_0_d0;
output  [8:0] output_l1_0_address1;
output   output_l1_0_ce1;
input  [31:0] output_l1_0_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_l1buf_0_ce0;
reg data_l1buf_1_ce0;
reg data_l1buf_2_ce0;
reg data_l1buf_3_ce0;
reg empty_read;
reg ko_1_read;
reg output_l1_3_ce0;
reg output_l1_3_we0;
reg output_l1_3_ce1;
reg output_l1_2_ce0;
reg output_l1_2_we0;
reg output_l1_2_ce1;
reg output_l1_1_ce0;
reg output_l1_1_we0;
reg output_l1_1_ce1;
reg output_l1_0_ce0;
reg output_l1_0_we0;
reg output_l1_0_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    empty_blk_n;
reg    ko_1_blk_n;
reg   [30:0] i_reg_502;
reg   [31:0] psum_14_reg_513;
reg   [31:0] psum_13_reg_525;
reg   [31:0] psum_12_reg_537;
reg   [31:0] psum_10_reg_549;
reg   [31:0] psum_9_reg_561;
reg   [31:0] psum_8_reg_573;
reg   [31:0] psum_6_reg_585;
reg   [31:0] psum_5_reg_597;
reg   [31:0] psum_4_reg_609;
reg   [31:0] psum_2_reg_621;
reg   [31:0] psum_1_reg_633;
reg   [31:0] psum_reg_645;
wire   [31:0] mul_ln111_fu_657_p2;
reg   [31:0] mul_ln111_reg_1523;
reg    ap_block_state1;
wire   [8:0] mul24_i_i_fu_673_p2;
reg   [8:0] mul24_i_i_reg_1531;
wire   [0:0] icmp_ln114_fu_679_p2;
wire  signed [15:0] weight_regfile_3_3_load_cast_i_i_fu_685_p1;
reg  signed [15:0] weight_regfile_3_3_load_cast_i_i_reg_1618;
wire  signed [15:0] weight_regfile_3_2_load_cast_i_i_fu_689_p1;
reg  signed [15:0] weight_regfile_3_2_load_cast_i_i_reg_1623;
wire  signed [15:0] weight_regfile_3_1_load_cast_i_i_fu_693_p1;
reg  signed [15:0] weight_regfile_3_1_load_cast_i_i_reg_1628;
wire  signed [15:0] weight_regfile_3_0_load_cast_i_i_fu_697_p1;
reg  signed [15:0] weight_regfile_3_0_load_cast_i_i_reg_1633;
wire  signed [15:0] weight_regfile_2_3_load_cast_i_i_fu_701_p1;
reg  signed [15:0] weight_regfile_2_3_load_cast_i_i_reg_1638;
wire  signed [15:0] weight_regfile_2_2_load_cast_i_i_fu_705_p1;
reg  signed [15:0] weight_regfile_2_2_load_cast_i_i_reg_1643;
wire  signed [15:0] weight_regfile_2_1_load_cast_i_i_fu_709_p1;
reg  signed [15:0] weight_regfile_2_1_load_cast_i_i_reg_1648;
wire  signed [15:0] weight_regfile_2_0_load_cast_i_i_fu_713_p1;
reg  signed [15:0] weight_regfile_2_0_load_cast_i_i_reg_1653;
wire  signed [15:0] weight_regfile_1_3_load_cast_i_i_fu_717_p1;
reg  signed [15:0] weight_regfile_1_3_load_cast_i_i_reg_1658;
wire  signed [15:0] weight_regfile_1_2_load_cast_i_i_fu_721_p1;
reg  signed [15:0] weight_regfile_1_2_load_cast_i_i_reg_1663;
wire  signed [15:0] weight_regfile_1_1_load_cast_i_i_fu_725_p1;
reg  signed [15:0] weight_regfile_1_1_load_cast_i_i_reg_1668;
wire  signed [15:0] weight_regfile_1_0_load_cast_i_i_fu_729_p1;
reg  signed [15:0] weight_regfile_1_0_load_cast_i_i_reg_1673;
wire  signed [15:0] weight_regfile_0_3_load_cast_i_i_fu_733_p1;
reg  signed [15:0] weight_regfile_0_3_load_cast_i_i_reg_1678;
wire  signed [15:0] weight_regfile_0_2_load_cast_i_i_fu_737_p1;
reg  signed [15:0] weight_regfile_0_2_load_cast_i_i_reg_1683;
wire  signed [15:0] weight_regfile_0_1_load_cast_i_i_fu_741_p1;
reg  signed [15:0] weight_regfile_0_1_load_cast_i_i_reg_1688;
wire  signed [15:0] weight_regfile_0_0_load_cast_i_i_fu_745_p1;
reg  signed [15:0] weight_regfile_0_0_load_cast_i_i_reg_1693;
wire   [30:0] trunc_ln114_fu_749_p1;
reg   [30:0] trunc_ln114_reg_1698;
wire   [8:0] add_ln139_4_fu_753_p2;
reg   [8:0] add_ln139_4_reg_1703;
wire   [8:0] add_ln177_3_fu_759_p2;
reg   [8:0] add_ln177_3_reg_1708;
wire   [8:0] add_ln177_4_fu_765_p2;
reg   [8:0] add_ln177_4_reg_1713;
wire   [8:0] add_ln177_5_fu_771_p2;
reg   [8:0] add_ln177_5_reg_1718;
wire   [0:0] icmp_ln114_1_fu_777_p2;
reg   [0:0] icmp_ln114_1_reg_1723;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln114_1_reg_1723_pp0_iter1_reg;
reg   [0:0] icmp_ln114_1_reg_1723_pp0_iter2_reg;
reg   [0:0] icmp_ln114_1_reg_1723_pp0_iter3_reg;
reg   [0:0] icmp_ln114_1_reg_1723_pp0_iter4_reg;
reg   [0:0] icmp_ln114_1_reg_1723_pp0_iter5_reg;
reg   [0:0] icmp_ln114_1_reg_1723_pp0_iter6_reg;
wire   [30:0] add_ln114_fu_782_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] trunc_ln129_fu_792_p1;
reg   [8:0] trunc_ln129_reg_1732;
reg   [8:0] trunc_ln129_reg_1732_pp0_iter1_reg;
reg   [8:0] trunc_ln129_reg_1732_pp0_iter2_reg;
reg   [8:0] trunc_ln129_reg_1732_pp0_iter3_reg;
reg   [8:0] trunc_ln129_reg_1732_pp0_iter4_reg;
reg   [8:0] trunc_ln129_reg_1732_pp0_iter5_reg;
reg   [8:0] trunc_ln129_reg_1732_pp0_iter6_reg;
wire   [0:0] icmp_ln128_fu_801_p2;
reg   [0:0] icmp_ln128_reg_1748;
reg   [0:0] icmp_ln128_reg_1748_pp0_iter1_reg;
reg   [0:0] icmp_ln128_reg_1748_pp0_iter2_reg;
reg   [0:0] tmp_reg_1754;
reg   [0:0] tmp_reg_1754_pp0_iter1_reg;
reg   [0:0] tmp_reg_1754_pp0_iter2_reg;
wire   [31:0] add_ln126_3_fu_821_p2;
reg   [31:0] add_ln126_3_reg_1760;
reg   [31:0] add_ln126_3_reg_1760_pp0_iter1_reg;
reg   [31:0] add_ln126_3_reg_1760_pp0_iter2_reg;
wire   [0:0] tmp_1_fu_827_p3;
reg   [0:0] tmp_1_reg_1765;
reg   [0:0] tmp_1_reg_1765_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_1765_pp0_iter2_reg;
reg   [0:0] tmp_1_reg_1765_pp0_iter3_reg;
wire   [0:0] and_ln173_fu_866_p2;
reg   [0:0] and_ln173_reg_1771;
reg   [0:0] and_ln173_reg_1771_pp0_iter1_reg;
reg   [0:0] and_ln173_reg_1771_pp0_iter2_reg;
reg   [0:0] and_ln173_reg_1771_pp0_iter3_reg;
reg   [0:0] and_ln173_reg_1771_pp0_iter4_reg;
reg   [0:0] and_ln173_reg_1771_pp0_iter5_reg;
reg   [0:0] and_ln173_reg_1771_pp0_iter6_reg;
wire   [0:0] and_ln173_1_fu_897_p2;
reg   [0:0] and_ln173_1_reg_1775;
reg   [0:0] and_ln173_1_reg_1775_pp0_iter1_reg;
reg   [0:0] and_ln173_1_reg_1775_pp0_iter2_reg;
reg   [0:0] and_ln173_1_reg_1775_pp0_iter3_reg;
reg   [0:0] and_ln173_1_reg_1775_pp0_iter4_reg;
reg   [0:0] and_ln173_1_reg_1775_pp0_iter5_reg;
reg   [0:0] and_ln173_1_reg_1775_pp0_iter6_reg;
wire   [0:0] and_ln173_2_fu_928_p2;
reg   [0:0] and_ln173_2_reg_1779;
reg   [0:0] and_ln173_2_reg_1779_pp0_iter1_reg;
reg   [0:0] and_ln173_2_reg_1779_pp0_iter2_reg;
reg   [0:0] and_ln173_2_reg_1779_pp0_iter3_reg;
reg   [0:0] and_ln173_2_reg_1779_pp0_iter4_reg;
reg   [0:0] and_ln173_2_reg_1779_pp0_iter5_reg;
reg   [0:0] and_ln173_2_reg_1779_pp0_iter6_reg;
wire   [0:0] and_ln173_3_fu_939_p2;
reg   [0:0] and_ln173_3_reg_1783;
reg   [0:0] and_ln173_3_reg_1783_pp0_iter1_reg;
reg   [0:0] and_ln173_3_reg_1783_pp0_iter2_reg;
reg   [0:0] and_ln173_3_reg_1783_pp0_iter3_reg;
reg   [0:0] and_ln173_3_reg_1783_pp0_iter4_reg;
reg   [0:0] and_ln173_3_reg_1783_pp0_iter5_reg;
reg   [0:0] and_ln173_3_reg_1783_pp0_iter6_reg;
wire   [8:0] add_ln126_fu_967_p2;
reg   [8:0] add_ln126_reg_1787;
wire   [63:0] zext_ln139_fu_1041_p1;
reg   [63:0] zext_ln139_reg_1822;
reg   [63:0] zext_ln139_reg_1822_pp0_iter3_reg;
reg   [63:0] zext_ln139_reg_1822_pp0_iter4_reg;
reg   [63:0] zext_ln139_reg_1822_pp0_iter5_reg;
reg   [63:0] zext_ln139_reg_1822_pp0_iter6_reg;
reg    ap_enable_reg_pp0_iter3;
wire  signed [31:0] grp_fu_1323_p3;
reg  signed [31:0] add_ln165_2_reg_1932;
reg    ap_enable_reg_pp0_iter4;
wire  signed [31:0] grp_fu_1330_p3;
reg  signed [31:0] add_ln165_5_reg_1937;
wire  signed [31:0] grp_fu_1337_p3;
reg  signed [31:0] add_ln165_8_reg_1942;
wire  signed [31:0] grp_fu_1344_p3;
reg  signed [31:0] add_ln165_11_reg_1947;
wire  signed [31:0] grp_fu_1351_p3;
reg  signed [31:0] add_ln165_1_reg_1952;
reg    ap_enable_reg_pp0_iter5;
wire  signed [31:0] grp_fu_1358_p3;
reg  signed [31:0] add_ln165_4_reg_1957;
wire  signed [31:0] grp_fu_1365_p3;
reg  signed [31:0] add_ln165_7_reg_1962;
wire  signed [31:0] grp_fu_1372_p3;
reg  signed [31:0] add_ln165_10_reg_1967;
wire  signed [31:0] grp_fu_1379_p3;
reg  signed [31:0] add_ln165_reg_1972;
reg    ap_enable_reg_pp0_iter6;
wire  signed [31:0] grp_fu_1386_p3;
reg  signed [31:0] add_ln165_3_reg_1977;
wire  signed [31:0] grp_fu_1393_p3;
reg  signed [31:0] add_ln165_6_reg_1982;
wire  signed [31:0] grp_fu_1400_p3;
reg  signed [31:0] add_ln165_9_reg_1987;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter4_state6;
reg    ap_enable_reg_pp0_iter7;
reg   [31:0] ap_phi_mux_psum_14_phi_fu_517_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_psum_13_phi_fu_529_p4;
reg   [31:0] ap_phi_mux_psum_12_phi_fu_541_p4;
reg   [31:0] ap_phi_mux_psum_10_phi_fu_553_p4;
reg   [31:0] ap_phi_mux_psum_9_phi_fu_565_p4;
reg   [31:0] ap_phi_mux_psum_8_phi_fu_577_p4;
reg   [31:0] ap_phi_mux_psum_6_phi_fu_589_p4;
reg   [31:0] ap_phi_mux_psum_5_phi_fu_601_p4;
reg   [31:0] ap_phi_mux_psum_4_phi_fu_613_p4;
reg   [31:0] ap_phi_mux_psum_2_phi_fu_625_p4;
reg   [31:0] ap_phi_mux_psum_1_phi_fu_637_p4;
reg   [31:0] ap_phi_mux_psum_phi_fu_649_p4;
wire   [63:0] zext_ln129_fu_796_p1;
wire   [63:0] zext_ln129_1_fu_972_p1;
wire   [63:0] zext_ln129_2_fu_1032_p1;
wire   [63:0] zext_ln139_1_fu_1051_p1;
wire   [63:0] zext_ln139_2_fu_1060_p1;
wire   [63:0] zext_ln139_3_fu_1069_p1;
wire   [63:0] zext_ln129_3_fu_1124_p1;
wire   [63:0] zext_ln177_fu_1240_p1;
wire   [63:0] zext_ln177_1_fu_1249_p1;
wire   [63:0] zext_ln177_2_fu_1258_p1;
wire    ap_CS_fsm_state10;
wire  signed [31:0] grp_fu_1434_p3;
wire  signed [31:0] grp_fu_1425_p3;
wire  signed [31:0] grp_fu_1416_p3;
wire  signed [31:0] grp_fu_1407_p3;
reg  signed [7:0] empty_31_fu_194;
reg  signed [7:0] empty_32_fu_198;
reg  signed [7:0] empty_33_fu_202;
reg  signed [7:0] empty_34_fu_206;
reg  signed [7:0] empty_35_fu_210;
reg  signed [7:0] empty_36_fu_214;
reg  signed [7:0] empty_37_fu_218;
reg  signed [7:0] empty_38_fu_222;
reg  signed [7:0] empty_39_fu_226;
wire  signed [7:0] select_ln128_2_fu_1192_p3;
reg  signed [7:0] empty_40_fu_230;
wire  signed [7:0] select_ln128_1_fu_1117_p3;
reg  signed [7:0] empty_41_fu_234;
wire  signed [7:0] select_ln128_fu_1020_p3;
reg  signed [7:0] empty_42_fu_238;
wire  signed [8:0] mul24_i_i_fu_673_p1;
wire   [31:0] input_rows_fu_667_p2;
wire   [31:0] zext_ln114_fu_788_p1;
wire   [31:0] add_ln126_1_fu_807_p2;
wire   [31:0] add_ln172_fu_841_p2;
wire   [0:0] tmp_2_fu_847_p3;
wire   [0:0] icmp_ln173_fu_861_p2;
wire   [0:0] xor_ln172_fu_855_p2;
wire   [31:0] add_ln172_1_fu_872_p2;
wire   [0:0] tmp_3_fu_878_p3;
wire   [0:0] icmp_ln173_1_fu_892_p2;
wire   [0:0] xor_ln172_1_fu_886_p2;
wire   [31:0] add_ln172_2_fu_903_p2;
wire   [0:0] tmp_4_fu_909_p3;
wire   [0:0] icmp_ln173_2_fu_923_p2;
wire   [0:0] xor_ln172_2_fu_917_p2;
wire   [0:0] icmp_ln173_3_fu_934_p2;
wire   [0:0] xor_ln128_fu_835_p2;
wire   [8:0] add_ln126_2_fu_1027_p2;
wire   [8:0] add_ln139_fu_1037_p2;
wire   [8:0] add_ln139_1_fu_1046_p2;
wire   [8:0] add_ln139_2_fu_1056_p2;
wire   [8:0] add_ln139_3_fu_1065_p2;
wire   [8:0] add_ln177_fu_1236_p2;
wire   [8:0] add_ln177_1_fu_1245_p2;
wire   [8:0] add_ln177_2_fu_1254_p2;
wire  signed [7:0] grp_fu_1323_p1;
wire   [31:0] grp_fu_1323_p2;
wire  signed [7:0] grp_fu_1330_p1;
wire   [31:0] grp_fu_1330_p2;
wire  signed [7:0] grp_fu_1337_p1;
wire   [31:0] grp_fu_1337_p2;
wire  signed [7:0] grp_fu_1344_p1;
wire  signed [7:0] grp_fu_1351_p1;
wire  signed [7:0] grp_fu_1358_p1;
wire  signed [7:0] grp_fu_1365_p1;
wire  signed [7:0] grp_fu_1372_p1;
wire  signed [7:0] grp_fu_1379_p1;
wire  signed [7:0] grp_fu_1386_p1;
wire  signed [7:0] grp_fu_1393_p1;
wire  signed [7:0] grp_fu_1400_p1;
wire  signed [7:0] grp_fu_1407_p1;
wire  signed [7:0] grp_fu_1416_p1;
wire  signed [7:0] grp_fu_1425_p1;
wire  signed [7:0] grp_fu_1434_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_predicate_op158_load_state4;
reg    ap_enable_operation_158;
reg    ap_enable_state4_pp0_iter2_stage0;
reg    ap_predicate_op195_load_state5;
reg    ap_enable_operation_195;
reg    ap_enable_state5_pp0_iter3_stage0;
reg    ap_enable_operation_327;
reg    ap_enable_state9_pp0_iter7_stage0;
reg    ap_predicate_op162_load_state4;
reg    ap_enable_operation_162;
reg    ap_predicate_op197_load_state5;
reg    ap_enable_operation_197;
reg    ap_enable_operation_332;
reg    ap_predicate_op166_load_state4;
reg    ap_enable_operation_166;
reg    ap_predicate_op199_load_state5;
reg    ap_enable_operation_199;
reg    ap_enable_operation_337;
reg    ap_enable_operation_170;
reg    ap_enable_operation_201;
reg    ap_enable_operation_340;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

Conv_sysarr_dbbuf_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U98(
    .din0(empty_dout),
    .din1(empty_dout),
    .dout(mul_ln111_fu_657_p2)
);

Conv_sysarr_dbbuf_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U99(
    .din0(ko_1_dout),
    .din1(mul24_i_i_fu_673_p1),
    .dout(mul24_i_i_fu_673_p2)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_34_fu_206),
    .din1(grp_fu_1323_p1),
    .din2(grp_fu_1323_p2),
    .ce(1'b1),
    .dout(grp_fu_1323_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_38_fu_222),
    .din1(grp_fu_1330_p1),
    .din2(grp_fu_1330_p2),
    .ce(1'b1),
    .dout(grp_fu_1330_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_42_fu_238),
    .din1(grp_fu_1337_p1),
    .din2(grp_fu_1337_p2),
    .ce(1'b1),
    .dout(grp_fu_1337_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_l1buf_0_q0),
    .din1(grp_fu_1344_p1),
    .din2(output_l1_0_q1),
    .ce(1'b1),
    .dout(grp_fu_1344_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_33_fu_202),
    .din1(grp_fu_1351_p1),
    .din2(ap_phi_mux_psum_2_phi_fu_625_p4),
    .ce(1'b1),
    .dout(grp_fu_1351_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_37_fu_218),
    .din1(grp_fu_1358_p1),
    .din2(ap_phi_mux_psum_6_phi_fu_589_p4),
    .ce(1'b1),
    .dout(grp_fu_1358_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_41_fu_234),
    .din1(grp_fu_1365_p1),
    .din2(ap_phi_mux_psum_10_phi_fu_553_p4),
    .ce(1'b1),
    .dout(grp_fu_1365_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln128_fu_1020_p3),
    .din1(grp_fu_1372_p1),
    .din2(ap_phi_mux_psum_14_phi_fu_517_p4),
    .ce(1'b1),
    .dout(grp_fu_1372_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_32_fu_198),
    .din1(grp_fu_1379_p1),
    .din2(ap_phi_mux_psum_1_phi_fu_637_p4),
    .ce(1'b1),
    .dout(grp_fu_1379_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_36_fu_214),
    .din1(grp_fu_1386_p1),
    .din2(ap_phi_mux_psum_5_phi_fu_601_p4),
    .ce(1'b1),
    .dout(grp_fu_1386_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_40_fu_230),
    .din1(grp_fu_1393_p1),
    .din2(ap_phi_mux_psum_9_phi_fu_565_p4),
    .ce(1'b1),
    .dout(grp_fu_1393_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln128_1_fu_1117_p3),
    .din1(grp_fu_1400_p1),
    .din2(ap_phi_mux_psum_13_phi_fu_529_p4),
    .ce(1'b1),
    .dout(grp_fu_1400_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_31_fu_194),
    .din1(grp_fu_1407_p1),
    .din2(ap_phi_mux_psum_phi_fu_649_p4),
    .ce(1'b1),
    .dout(grp_fu_1407_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_35_fu_210),
    .din1(grp_fu_1416_p1),
    .din2(ap_phi_mux_psum_4_phi_fu_613_p4),
    .ce(1'b1),
    .dout(grp_fu_1416_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_39_fu_226),
    .din1(grp_fu_1425_p1),
    .din2(ap_phi_mux_psum_8_phi_fu_577_p4),
    .ce(1'b1),
    .dout(grp_fu_1425_p3)
);

Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_4_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln128_2_fu_1192_p3),
    .din1(grp_fu_1434_p1),
    .din2(ap_phi_mux_psum_12_phi_fu_541_p4),
    .ce(1'b1),
    .dout(grp_fu_1434_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln114_fu_679_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter4_state6)) begin
                ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln114_fu_679_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln114_fu_679_p2 == 1'd1))) begin
        i_reg_502 <= 31'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_1_fu_777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_502 <= add_ln114_fu_782_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_1_fu_777_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln126_3_reg_1760 <= add_ln126_3_fu_821_p2;
        and_ln173_1_reg_1775 <= and_ln173_1_fu_897_p2;
        and_ln173_2_reg_1779 <= and_ln173_2_fu_928_p2;
        and_ln173_3_reg_1783 <= and_ln173_3_fu_939_p2;
        and_ln173_reg_1771 <= and_ln173_fu_866_p2;
        icmp_ln128_reg_1748 <= icmp_ln128_fu_801_p2;
        tmp_1_reg_1765 <= add_ln126_3_fu_821_p2[32'd31];
        tmp_reg_1754 <= add_ln126_1_fu_807_p2[32'd31];
        trunc_ln129_reg_1732 <= trunc_ln129_fu_792_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln126_3_reg_1760_pp0_iter1_reg <= add_ln126_3_reg_1760;
        and_ln173_1_reg_1775_pp0_iter1_reg <= and_ln173_1_reg_1775;
        and_ln173_2_reg_1779_pp0_iter1_reg <= and_ln173_2_reg_1779;
        and_ln173_3_reg_1783_pp0_iter1_reg <= and_ln173_3_reg_1783;
        and_ln173_reg_1771_pp0_iter1_reg <= and_ln173_reg_1771;
        icmp_ln114_1_reg_1723 <= icmp_ln114_1_fu_777_p2;
        icmp_ln114_1_reg_1723_pp0_iter1_reg <= icmp_ln114_1_reg_1723;
        icmp_ln128_reg_1748_pp0_iter1_reg <= icmp_ln128_reg_1748;
        tmp_1_reg_1765_pp0_iter1_reg <= tmp_1_reg_1765;
        tmp_reg_1754_pp0_iter1_reg <= tmp_reg_1754;
        trunc_ln129_reg_1732_pp0_iter1_reg <= trunc_ln129_reg_1732;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln126_3_reg_1760_pp0_iter2_reg <= add_ln126_3_reg_1760_pp0_iter1_reg;
        and_ln173_1_reg_1775_pp0_iter2_reg <= and_ln173_1_reg_1775_pp0_iter1_reg;
        and_ln173_1_reg_1775_pp0_iter3_reg <= and_ln173_1_reg_1775_pp0_iter2_reg;
        and_ln173_1_reg_1775_pp0_iter4_reg <= and_ln173_1_reg_1775_pp0_iter3_reg;
        and_ln173_1_reg_1775_pp0_iter5_reg <= and_ln173_1_reg_1775_pp0_iter4_reg;
        and_ln173_1_reg_1775_pp0_iter6_reg <= and_ln173_1_reg_1775_pp0_iter5_reg;
        and_ln173_2_reg_1779_pp0_iter2_reg <= and_ln173_2_reg_1779_pp0_iter1_reg;
        and_ln173_2_reg_1779_pp0_iter3_reg <= and_ln173_2_reg_1779_pp0_iter2_reg;
        and_ln173_2_reg_1779_pp0_iter4_reg <= and_ln173_2_reg_1779_pp0_iter3_reg;
        and_ln173_2_reg_1779_pp0_iter5_reg <= and_ln173_2_reg_1779_pp0_iter4_reg;
        and_ln173_2_reg_1779_pp0_iter6_reg <= and_ln173_2_reg_1779_pp0_iter5_reg;
        and_ln173_3_reg_1783_pp0_iter2_reg <= and_ln173_3_reg_1783_pp0_iter1_reg;
        and_ln173_3_reg_1783_pp0_iter3_reg <= and_ln173_3_reg_1783_pp0_iter2_reg;
        and_ln173_3_reg_1783_pp0_iter4_reg <= and_ln173_3_reg_1783_pp0_iter3_reg;
        and_ln173_3_reg_1783_pp0_iter5_reg <= and_ln173_3_reg_1783_pp0_iter4_reg;
        and_ln173_3_reg_1783_pp0_iter6_reg <= and_ln173_3_reg_1783_pp0_iter5_reg;
        and_ln173_reg_1771_pp0_iter2_reg <= and_ln173_reg_1771_pp0_iter1_reg;
        and_ln173_reg_1771_pp0_iter3_reg <= and_ln173_reg_1771_pp0_iter2_reg;
        and_ln173_reg_1771_pp0_iter4_reg <= and_ln173_reg_1771_pp0_iter3_reg;
        and_ln173_reg_1771_pp0_iter5_reg <= and_ln173_reg_1771_pp0_iter4_reg;
        and_ln173_reg_1771_pp0_iter6_reg <= and_ln173_reg_1771_pp0_iter5_reg;
        icmp_ln114_1_reg_1723_pp0_iter2_reg <= icmp_ln114_1_reg_1723_pp0_iter1_reg;
        icmp_ln114_1_reg_1723_pp0_iter3_reg <= icmp_ln114_1_reg_1723_pp0_iter2_reg;
        icmp_ln114_1_reg_1723_pp0_iter4_reg <= icmp_ln114_1_reg_1723_pp0_iter3_reg;
        icmp_ln114_1_reg_1723_pp0_iter5_reg <= icmp_ln114_1_reg_1723_pp0_iter4_reg;
        icmp_ln114_1_reg_1723_pp0_iter6_reg <= icmp_ln114_1_reg_1723_pp0_iter5_reg;
        icmp_ln128_reg_1748_pp0_iter2_reg <= icmp_ln128_reg_1748_pp0_iter1_reg;
        tmp_1_reg_1765_pp0_iter2_reg <= tmp_1_reg_1765_pp0_iter1_reg;
        tmp_1_reg_1765_pp0_iter3_reg <= tmp_1_reg_1765_pp0_iter2_reg;
        tmp_reg_1754_pp0_iter2_reg <= tmp_reg_1754_pp0_iter1_reg;
        trunc_ln129_reg_1732_pp0_iter2_reg <= trunc_ln129_reg_1732_pp0_iter1_reg;
        trunc_ln129_reg_1732_pp0_iter3_reg <= trunc_ln129_reg_1732_pp0_iter2_reg;
        trunc_ln129_reg_1732_pp0_iter4_reg <= trunc_ln129_reg_1732_pp0_iter3_reg;
        trunc_ln129_reg_1732_pp0_iter5_reg <= trunc_ln129_reg_1732_pp0_iter4_reg;
        trunc_ln129_reg_1732_pp0_iter6_reg <= trunc_ln129_reg_1732_pp0_iter5_reg;
        zext_ln139_reg_1822_pp0_iter3_reg[8 : 0] <= zext_ln139_reg_1822[8 : 0];
        zext_ln139_reg_1822_pp0_iter4_reg[8 : 0] <= zext_ln139_reg_1822_pp0_iter3_reg[8 : 0];
        zext_ln139_reg_1822_pp0_iter5_reg[8 : 0] <= zext_ln139_reg_1822_pp0_iter4_reg[8 : 0];
        zext_ln139_reg_1822_pp0_iter6_reg[8 : 0] <= zext_ln139_reg_1822_pp0_iter5_reg[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_1_reg_1723 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln126_reg_1787 <= add_ln126_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln114_fu_679_p2 == 1'd1))) begin
        add_ln139_4_reg_1703 <= add_ln139_4_fu_753_p2;
        add_ln177_3_reg_1708 <= add_ln177_3_fu_759_p2;
        add_ln177_4_reg_1713 <= add_ln177_4_fu_765_p2;
        add_ln177_5_reg_1718 <= add_ln177_5_fu_771_p2;
        trunc_ln114_reg_1698 <= trunc_ln114_fu_749_p1;
        weight_regfile_0_0_load_cast_i_i_reg_1693 <= weight_regfile_0_0_load_cast_i_i_fu_745_p1;
        weight_regfile_0_1_load_cast_i_i_reg_1688 <= weight_regfile_0_1_load_cast_i_i_fu_741_p1;
        weight_regfile_0_2_load_cast_i_i_reg_1683 <= weight_regfile_0_2_load_cast_i_i_fu_737_p1;
        weight_regfile_0_3_load_cast_i_i_reg_1678 <= weight_regfile_0_3_load_cast_i_i_fu_733_p1;
        weight_regfile_1_0_load_cast_i_i_reg_1673 <= weight_regfile_1_0_load_cast_i_i_fu_729_p1;
        weight_regfile_1_1_load_cast_i_i_reg_1668 <= weight_regfile_1_1_load_cast_i_i_fu_725_p1;
        weight_regfile_1_2_load_cast_i_i_reg_1663 <= weight_regfile_1_2_load_cast_i_i_fu_721_p1;
        weight_regfile_1_3_load_cast_i_i_reg_1658 <= weight_regfile_1_3_load_cast_i_i_fu_717_p1;
        weight_regfile_2_0_load_cast_i_i_reg_1653 <= weight_regfile_2_0_load_cast_i_i_fu_713_p1;
        weight_regfile_2_1_load_cast_i_i_reg_1648 <= weight_regfile_2_1_load_cast_i_i_fu_709_p1;
        weight_regfile_2_2_load_cast_i_i_reg_1643 <= weight_regfile_2_2_load_cast_i_i_fu_705_p1;
        weight_regfile_2_3_load_cast_i_i_reg_1638 <= weight_regfile_2_3_load_cast_i_i_fu_701_p1;
        weight_regfile_3_0_load_cast_i_i_reg_1633 <= weight_regfile_3_0_load_cast_i_i_fu_697_p1;
        weight_regfile_3_1_load_cast_i_i_reg_1628 <= weight_regfile_3_1_load_cast_i_i_fu_693_p1;
        weight_regfile_3_2_load_cast_i_i_reg_1623 <= weight_regfile_3_2_load_cast_i_i_fu_689_p1;
        weight_regfile_3_3_load_cast_i_i_reg_1618 <= weight_regfile_3_3_load_cast_i_i_fu_685_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln165_10_reg_1967 <= grp_fu_1372_p3;
        add_ln165_1_reg_1952 <= grp_fu_1351_p3;
        add_ln165_4_reg_1957 <= grp_fu_1358_p3;
        add_ln165_7_reg_1962 <= grp_fu_1365_p3;
        psum_10_reg_549 <= add_ln165_8_reg_1942;
        psum_14_reg_513 <= add_ln165_11_reg_1947;
        psum_2_reg_621 <= add_ln165_2_reg_1932;
        psum_6_reg_585 <= add_ln165_5_reg_1937;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln165_11_reg_1947 <= grp_fu_1344_p3;
        add_ln165_2_reg_1932 <= grp_fu_1323_p3;
        add_ln165_5_reg_1937 <= grp_fu_1330_p3;
        add_ln165_8_reg_1942 <= grp_fu_1337_p3;
        empty_39_fu_226 <= select_ln128_2_fu_1192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln165_3_reg_1977 <= grp_fu_1386_p3;
        add_ln165_6_reg_1982 <= grp_fu_1393_p3;
        add_ln165_9_reg_1987 <= grp_fu_1400_p3;
        add_ln165_reg_1972 <= grp_fu_1379_p3;
        psum_13_reg_525 <= add_ln165_10_reg_1967;
        psum_1_reg_633 <= add_ln165_1_reg_1952;
        psum_5_reg_597 <= add_ln165_4_reg_1957;
        psum_9_reg_561 <= add_ln165_7_reg_1962;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_31_fu_194 <= empty_35_fu_210;
        empty_35_fu_210 <= empty_39_fu_226;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_32_fu_198 <= empty_36_fu_214;
        empty_36_fu_214 <= empty_40_fu_230;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_33_fu_202 <= empty_37_fu_218;
        empty_37_fu_218 <= empty_41_fu_234;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_34_fu_206 <= empty_38_fu_222;
        empty_38_fu_222 <= empty_42_fu_238;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_40_fu_230 <= select_ln128_1_fu_1117_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_41_fu_234 <= select_ln128_fu_1020_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_1_reg_1723 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_42_fu_238 <= data_l1buf_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mul24_i_i_reg_1531 <= mul24_i_i_fu_673_p2;
        mul_ln111_reg_1523 <= mul_ln111_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        psum_12_reg_537 <= add_ln165_9_reg_1987;
        psum_4_reg_609 <= add_ln165_3_reg_1977;
        psum_8_reg_573 <= add_ln165_6_reg_1982;
        psum_reg_645 <= add_ln165_reg_1972;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_1_reg_1723_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln139_reg_1822[8 : 0] <= zext_ln139_fu_1041_p1[8 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_condition_pp0_exit_iter4_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter4_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln114_1_fu_777_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_10_phi_fu_553_p4 = add_ln165_8_reg_1942;
    end else begin
        ap_phi_mux_psum_10_phi_fu_553_p4 = psum_10_reg_549;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_12_phi_fu_541_p4 = add_ln165_9_reg_1987;
    end else begin
        ap_phi_mux_psum_12_phi_fu_541_p4 = psum_12_reg_537;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_13_phi_fu_529_p4 = add_ln165_10_reg_1967;
    end else begin
        ap_phi_mux_psum_13_phi_fu_529_p4 = psum_13_reg_525;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_14_phi_fu_517_p4 = add_ln165_11_reg_1947;
    end else begin
        ap_phi_mux_psum_14_phi_fu_517_p4 = psum_14_reg_513;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_1_phi_fu_637_p4 = add_ln165_1_reg_1952;
    end else begin
        ap_phi_mux_psum_1_phi_fu_637_p4 = psum_1_reg_633;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_2_phi_fu_625_p4 = add_ln165_2_reg_1932;
    end else begin
        ap_phi_mux_psum_2_phi_fu_625_p4 = psum_2_reg_621;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_4_phi_fu_613_p4 = add_ln165_3_reg_1977;
    end else begin
        ap_phi_mux_psum_4_phi_fu_613_p4 = psum_4_reg_609;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_5_phi_fu_601_p4 = add_ln165_4_reg_1957;
    end else begin
        ap_phi_mux_psum_5_phi_fu_601_p4 = psum_5_reg_597;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_6_phi_fu_589_p4 = add_ln165_5_reg_1937;
    end else begin
        ap_phi_mux_psum_6_phi_fu_589_p4 = psum_6_reg_585;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_8_phi_fu_577_p4 = add_ln165_6_reg_1982;
    end else begin
        ap_phi_mux_psum_8_phi_fu_577_p4 = psum_8_reg_573;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_9_phi_fu_565_p4 = add_ln165_7_reg_1962;
    end else begin
        ap_phi_mux_psum_9_phi_fu_565_p4 = psum_9_reg_561;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln114_1_reg_1723_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_psum_phi_fu_649_p4 = add_ln165_reg_1972;
    end else begin
        ap_phi_mux_psum_phi_fu_649_p4 = psum_reg_645;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_l1buf_0_ce0 = 1'b1;
    end else begin
        data_l1buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_l1buf_1_ce0 = 1'b1;
    end else begin
        data_l1buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_2_ce0 = 1'b1;
    end else begin
        data_l1buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_3_ce0 = 1'b1;
    end else begin
        data_l1buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_blk_n = empty_empty_n;
    end else begin
        empty_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_read = 1'b1;
    end else begin
        empty_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_blk_n = ko_1_empty_n;
    end else begin
        ko_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_read = 1'b1;
    end else begin
        ko_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_0_ce0 = 1'b1;
    end else begin
        output_l1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_0_ce1 = 1'b1;
    end else begin
        output_l1_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln173_3_reg_1783_pp0_iter6_reg))) begin
        output_l1_0_we0 = 1'b1;
    end else begin
        output_l1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_1_ce0 = 1'b1;
    end else begin
        output_l1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_1_ce1 = 1'b1;
    end else begin
        output_l1_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln173_2_reg_1779_pp0_iter6_reg))) begin
        output_l1_1_we0 = 1'b1;
    end else begin
        output_l1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_2_ce0 = 1'b1;
    end else begin
        output_l1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_2_ce1 = 1'b1;
    end else begin
        output_l1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln173_1_reg_1775_pp0_iter6_reg))) begin
        output_l1_2_we0 = 1'b1;
    end else begin
        output_l1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_3_ce0 = 1'b1;
    end else begin
        output_l1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_3_ce1 = 1'b1;
    end else begin
        output_l1_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln173_reg_1771_pp0_iter6_reg))) begin
        output_l1_3_we0 = 1'b1;
    end else begin
        output_l1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln114_fu_679_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln114_fu_679_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_782_p2 = (i_reg_502 + 31'd1);

assign add_ln126_1_fu_807_p2 = ($signed(32'd4294967294) + $signed(zext_ln114_fu_788_p1));

assign add_ln126_2_fu_1027_p2 = ($signed(9'd510) + $signed(trunc_ln129_reg_1732_pp0_iter1_reg));

assign add_ln126_3_fu_821_p2 = ($signed(32'd4294967293) + $signed(zext_ln114_fu_788_p1));

assign add_ln126_fu_967_p2 = ($signed(9'd511) + $signed(trunc_ln129_reg_1732));

assign add_ln139_1_fu_1046_p2 = (add_ln126_2_fu_1027_p2 + mul24_i_i_reg_1531);

assign add_ln139_2_fu_1056_p2 = (add_ln126_reg_1787 + mul24_i_i_reg_1531);

assign add_ln139_3_fu_1065_p2 = (mul24_i_i_reg_1531 + trunc_ln129_reg_1732_pp0_iter1_reg);

assign add_ln139_4_fu_753_p2 = ($signed(9'd509) + $signed(mul24_i_i_fu_673_p2));

assign add_ln139_fu_1037_p2 = (add_ln139_4_reg_1703 + trunc_ln129_reg_1732_pp0_iter1_reg);

assign add_ln172_1_fu_872_p2 = ($signed(zext_ln114_fu_788_p1) + $signed(32'd4294967291));

assign add_ln172_2_fu_903_p2 = ($signed(zext_ln114_fu_788_p1) + $signed(32'd4294967292));

assign add_ln172_fu_841_p2 = ($signed(32'd4294967290) + $signed(zext_ln114_fu_788_p1));

assign add_ln177_1_fu_1245_p2 = (add_ln177_4_reg_1713 + trunc_ln129_reg_1732_pp0_iter6_reg);

assign add_ln177_2_fu_1254_p2 = (add_ln177_5_reg_1718 + trunc_ln129_reg_1732_pp0_iter6_reg);

assign add_ln177_3_fu_759_p2 = ($signed(9'd506) + $signed(mul24_i_i_fu_673_p2));

assign add_ln177_4_fu_765_p2 = ($signed(9'd507) + $signed(mul24_i_i_fu_673_p2));

assign add_ln177_5_fu_771_p2 = ($signed(9'd508) + $signed(mul24_i_i_fu_673_p2));

assign add_ln177_fu_1236_p2 = (add_ln177_3_reg_1708 + trunc_ln129_reg_1732_pp0_iter6_reg);

assign and_ln173_1_fu_897_p2 = (xor_ln172_1_fu_886_p2 & icmp_ln173_1_fu_892_p2);

assign and_ln173_2_fu_928_p2 = (xor_ln172_2_fu_917_p2 & icmp_ln173_2_fu_923_p2);

assign and_ln173_3_fu_939_p2 = (xor_ln128_fu_835_p2 & icmp_ln173_3_fu_934_p2);

assign and_ln173_fu_866_p2 = (xor_ln172_fu_855_p2 & icmp_ln173_fu_861_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_158 = (ap_predicate_op158_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_162 = (ap_predicate_op162_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_166 = (ap_predicate_op166_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_170 = (icmp_ln114_1_reg_1723_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_195 = (ap_predicate_op195_load_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_197 = (ap_predicate_op197_load_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_199 = (ap_predicate_op199_load_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_201 = (icmp_ln114_1_reg_1723_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_327 = (1'd1 == and_ln173_reg_1771_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_332 = (1'd1 == and_ln173_1_reg_1775_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_337 = (1'd1 == and_ln173_2_reg_1779_pp0_iter6_reg);
end

always @ (*) begin
    ap_enable_operation_340 = (1'd1 == and_ln173_3_reg_1783_pp0_iter6_reg);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state9_pp0_iter7_stage0 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_predicate_op158_load_state4 = ((tmp_1_reg_1765_pp0_iter1_reg == 1'd0) & (icmp_ln114_1_reg_1723_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op162_load_state4 = ((tmp_reg_1754_pp0_iter1_reg == 1'd0) & (icmp_ln114_1_reg_1723_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op166_load_state4 = ((icmp_ln128_reg_1748_pp0_iter1_reg == 1'd1) & (icmp_ln114_1_reg_1723_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op195_load_state5 = ((tmp_1_reg_1765_pp0_iter2_reg == 1'd0) & (icmp_ln114_1_reg_1723_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op197_load_state5 = ((tmp_reg_1754_pp0_iter2_reg == 1'd0) & (icmp_ln114_1_reg_1723_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op199_load_state5 = ((icmp_ln128_reg_1748_pp0_iter2_reg == 1'd1) & (icmp_ln114_1_reg_1723_pp0_iter2_reg == 1'd0));
end

assign data_l1buf_0_address0 = zext_ln129_fu_796_p1;

assign data_l1buf_1_address0 = zext_ln129_1_fu_972_p1;

assign data_l1buf_2_address0 = zext_ln129_2_fu_1032_p1;

assign data_l1buf_3_address0 = zext_ln129_3_fu_1124_p1;

assign grp_fu_1323_p1 = weight_regfile_3_0_load_cast_i_i_reg_1633;

assign grp_fu_1323_p2 = ((tmp_1_reg_1765_pp0_iter2_reg[0:0] === 1'b1) ? 32'd0 : output_l1_3_q1);

assign grp_fu_1330_p1 = weight_regfile_2_0_load_cast_i_i_reg_1653;

assign grp_fu_1330_p2 = ((tmp_reg_1754_pp0_iter2_reg[0:0] === 1'b1) ? 32'd0 : output_l1_2_q1);

assign grp_fu_1337_p1 = weight_regfile_1_0_load_cast_i_i_reg_1673;

assign grp_fu_1337_p2 = ((icmp_ln128_reg_1748_pp0_iter2_reg[0:0] === 1'b1) ? output_l1_1_q1 : 32'd0);

assign grp_fu_1344_p1 = weight_regfile_0_0_load_cast_i_i_reg_1693;

assign grp_fu_1351_p1 = weight_regfile_3_1_load_cast_i_i_reg_1628;

assign grp_fu_1358_p1 = weight_regfile_2_1_load_cast_i_i_reg_1648;

assign grp_fu_1365_p1 = weight_regfile_1_1_load_cast_i_i_reg_1668;

assign grp_fu_1372_p1 = weight_regfile_0_1_load_cast_i_i_reg_1688;

assign grp_fu_1379_p1 = weight_regfile_3_2_load_cast_i_i_reg_1623;

assign grp_fu_1386_p1 = weight_regfile_2_2_load_cast_i_i_reg_1643;

assign grp_fu_1393_p1 = weight_regfile_1_2_load_cast_i_i_reg_1663;

assign grp_fu_1400_p1 = weight_regfile_0_2_load_cast_i_i_reg_1683;

assign grp_fu_1407_p1 = weight_regfile_3_3_load_cast_i_i_reg_1618;

assign grp_fu_1416_p1 = weight_regfile_2_3_load_cast_i_i_reg_1638;

assign grp_fu_1425_p1 = weight_regfile_1_3_load_cast_i_i_reg_1658;

assign grp_fu_1434_p1 = weight_regfile_0_3_load_cast_i_i_reg_1678;

assign icmp_ln114_1_fu_777_p2 = ((i_reg_502 == trunc_ln114_reg_1698) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_679_p2 = (($signed(input_rows_fu_667_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_801_p2 = ((i_reg_502 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln173_1_fu_892_p2 = ((add_ln172_1_fu_872_p2 < mul_ln111_reg_1523) ? 1'b1 : 1'b0);

assign icmp_ln173_2_fu_923_p2 = ((add_ln172_2_fu_903_p2 < mul_ln111_reg_1523) ? 1'b1 : 1'b0);

assign icmp_ln173_3_fu_934_p2 = ((add_ln126_3_fu_821_p2 < mul_ln111_reg_1523) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_861_p2 = ((add_ln172_fu_841_p2 < mul_ln111_reg_1523) ? 1'b1 : 1'b0);

assign input_rows_fu_667_p2 = (32'd6 + mul_ln111_fu_657_p2);

assign mul24_i_i_fu_673_p1 = mul_ln111_fu_657_p2[8:0];

assign output_l1_0_address0 = zext_ln139_reg_1822_pp0_iter6_reg;

assign output_l1_0_address1 = zext_ln139_3_fu_1069_p1;

assign output_l1_0_d0 = grp_fu_1434_p3;

assign output_l1_1_address0 = zext_ln177_2_fu_1258_p1;

assign output_l1_1_address1 = zext_ln139_2_fu_1060_p1;

assign output_l1_1_d0 = grp_fu_1425_p3;

assign output_l1_2_address0 = zext_ln177_1_fu_1249_p1;

assign output_l1_2_address1 = zext_ln139_1_fu_1051_p1;

assign output_l1_2_d0 = grp_fu_1416_p3;

assign output_l1_3_address0 = zext_ln177_fu_1240_p1;

assign output_l1_3_address1 = zext_ln139_fu_1041_p1;

assign output_l1_3_d0 = grp_fu_1407_p3;

assign select_ln128_1_fu_1117_p3 = ((tmp_reg_1754_pp0_iter2_reg[0:0] === 1'b1) ? 8'd0 : data_l1buf_2_q0);

assign select_ln128_2_fu_1192_p3 = ((tmp_1_reg_1765_pp0_iter3_reg[0:0] === 1'b1) ? 8'd0 : data_l1buf_3_q0);

assign select_ln128_fu_1020_p3 = ((icmp_ln128_reg_1748_pp0_iter1_reg[0:0] === 1'b1) ? data_l1buf_1_q0 : 8'd0);

assign tmp_1_fu_827_p3 = add_ln126_3_fu_821_p2[32'd31];

assign tmp_2_fu_847_p3 = add_ln172_fu_841_p2[32'd31];

assign tmp_3_fu_878_p3 = add_ln172_1_fu_872_p2[32'd31];

assign tmp_4_fu_909_p3 = add_ln172_2_fu_903_p2[32'd31];

assign trunc_ln114_fu_749_p1 = input_rows_fu_667_p2[30:0];

assign trunc_ln129_fu_792_p1 = i_reg_502[8:0];

assign weight_regfile_0_0_load_cast_i_i_fu_745_p1 = $signed(weight_regfile_0_0_read);

assign weight_regfile_0_1_load_cast_i_i_fu_741_p1 = $signed(weight_regfile_0_1_read);

assign weight_regfile_0_2_load_cast_i_i_fu_737_p1 = $signed(weight_regfile_0_2_read);

assign weight_regfile_0_3_load_cast_i_i_fu_733_p1 = $signed(weight_regfile_0_3_read);

assign weight_regfile_1_0_load_cast_i_i_fu_729_p1 = $signed(weight_regfile_1_0_read);

assign weight_regfile_1_1_load_cast_i_i_fu_725_p1 = $signed(weight_regfile_1_1_read);

assign weight_regfile_1_2_load_cast_i_i_fu_721_p1 = $signed(weight_regfile_1_2_read);

assign weight_regfile_1_3_load_cast_i_i_fu_717_p1 = $signed(weight_regfile_1_3_read);

assign weight_regfile_2_0_load_cast_i_i_fu_713_p1 = $signed(weight_regfile_2_0_read);

assign weight_regfile_2_1_load_cast_i_i_fu_709_p1 = $signed(weight_regfile_2_1_read);

assign weight_regfile_2_2_load_cast_i_i_fu_705_p1 = $signed(weight_regfile_2_2_read);

assign weight_regfile_2_3_load_cast_i_i_fu_701_p1 = $signed(weight_regfile_2_3_read);

assign weight_regfile_3_0_load_cast_i_i_fu_697_p1 = $signed(weight_regfile_3_0_read);

assign weight_regfile_3_1_load_cast_i_i_fu_693_p1 = $signed(weight_regfile_3_1_read);

assign weight_regfile_3_2_load_cast_i_i_fu_689_p1 = $signed(weight_regfile_3_2_read);

assign weight_regfile_3_3_load_cast_i_i_fu_685_p1 = $signed(weight_regfile_3_3_read);

assign xor_ln128_fu_835_p2 = (tmp_1_fu_827_p3 ^ 1'd1);

assign xor_ln172_1_fu_886_p2 = (tmp_3_fu_878_p3 ^ 1'd1);

assign xor_ln172_2_fu_917_p2 = (tmp_4_fu_909_p3 ^ 1'd1);

assign xor_ln172_fu_855_p2 = (tmp_2_fu_847_p3 ^ 1'd1);

assign zext_ln114_fu_788_p1 = i_reg_502;

assign zext_ln129_1_fu_972_p1 = add_ln126_fu_967_p2;

assign zext_ln129_2_fu_1032_p1 = add_ln126_2_fu_1027_p2;

assign zext_ln129_3_fu_1124_p1 = add_ln126_3_reg_1760_pp0_iter2_reg;

assign zext_ln129_fu_796_p1 = i_reg_502;

assign zext_ln139_1_fu_1051_p1 = add_ln139_1_fu_1046_p2;

assign zext_ln139_2_fu_1060_p1 = add_ln139_2_fu_1056_p2;

assign zext_ln139_3_fu_1069_p1 = add_ln139_3_fu_1065_p2;

assign zext_ln139_fu_1041_p1 = add_ln139_fu_1037_p2;

assign zext_ln177_1_fu_1249_p1 = add_ln177_1_fu_1245_p2;

assign zext_ln177_2_fu_1258_p1 = add_ln177_2_fu_1254_p2;

assign zext_ln177_fu_1240_p1 = add_ln177_fu_1236_p2;

always @ (posedge ap_clk) begin
    zext_ln139_reg_1822[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln139_reg_1822_pp0_iter3_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln139_reg_1822_pp0_iter4_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln139_reg_1822_pp0_iter5_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln139_reg_1822_pp0_iter6_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //Conv_sysarr_dbbuf_runSysArr
