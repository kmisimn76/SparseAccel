// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runWeight2Reg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        C_L2_dout,
        C_L2_empty_n,
        C_L2_read,
        R_L2_dout,
        R_L2_empty_n,
        R_L2_read,
        S_L2_dout,
        S_L2_empty_n,
        S_L2_read,
        ko_3_dout,
        ko_3_empty_n,
        ko_3_read,
        co_dout,
        co_empty_n,
        co_read,
        ro_dout,
        ro_empty_n,
        ro_read,
        so_dout,
        so_empty_n,
        so_read,
        weight_l2_0_address0,
        weight_l2_0_ce0,
        weight_l2_0_q0,
        weight_l2_0_address1,
        weight_l2_0_ce1,
        weight_l2_0_q1,
        weight_l2_1_address0,
        weight_l2_1_ce0,
        weight_l2_1_q0,
        weight_l2_1_address1,
        weight_l2_1_ce1,
        weight_l2_1_q1,
        weight_l2_2_address0,
        weight_l2_2_ce0,
        weight_l2_2_q0,
        weight_l2_2_address1,
        weight_l2_2_ce1,
        weight_l2_2_q1,
        weight_l2_3_address0,
        weight_l2_3_ce0,
        weight_l2_3_q0,
        weight_l2_3_address1,
        weight_l2_3_ce1,
        weight_l2_3_q1,
        weight_l2_4_address0,
        weight_l2_4_ce0,
        weight_l2_4_q0,
        weight_l2_4_address1,
        weight_l2_4_ce1,
        weight_l2_4_q1,
        weight_l2_5_address0,
        weight_l2_5_ce0,
        weight_l2_5_q0,
        weight_l2_5_address1,
        weight_l2_5_ce1,
        weight_l2_5_q1,
        weight_l2_6_address0,
        weight_l2_6_ce0,
        weight_l2_6_q0,
        weight_l2_6_address1,
        weight_l2_6_ce1,
        weight_l2_6_q1,
        weight_l2_7_address0,
        weight_l2_7_ce0,
        weight_l2_7_q0,
        weight_l2_7_address1,
        weight_l2_7_ce1,
        weight_l2_7_q1,
        ko_3_out_din,
        ko_3_out_full_n,
        ko_3_out_write,
        co_out_din,
        co_out_full_n,
        co_out_write,
        ro_out_din,
        ro_out_full_n,
        ro_out_write,
        so_out_din,
        so_out_full_n,
        so_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47,
        ap_return_48,
        ap_return_49,
        ap_return_50,
        ap_return_51,
        ap_return_52,
        ap_return_53,
        ap_return_54,
        ap_return_55,
        ap_return_56,
        ap_return_57,
        ap_return_58,
        ap_return_59,
        ap_return_60,
        ap_return_61,
        ap_return_62,
        ap_return_63
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] C_L2_dout;
input   C_L2_empty_n;
output   C_L2_read;
input  [11:0] R_L2_dout;
input   R_L2_empty_n;
output   R_L2_read;
input  [11:0] S_L2_dout;
input   S_L2_empty_n;
output   S_L2_read;
input  [11:0] ko_3_dout;
input   ko_3_empty_n;
output   ko_3_read;
input  [31:0] co_dout;
input   co_empty_n;
output   co_read;
input  [31:0] ro_dout;
input   ro_empty_n;
output   ro_read;
input  [31:0] so_dout;
input   so_empty_n;
output   so_read;
output  [11:0] weight_l2_0_address0;
output   weight_l2_0_ce0;
input  [7:0] weight_l2_0_q0;
output  [11:0] weight_l2_0_address1;
output   weight_l2_0_ce1;
input  [7:0] weight_l2_0_q1;
output  [11:0] weight_l2_1_address0;
output   weight_l2_1_ce0;
input  [7:0] weight_l2_1_q0;
output  [11:0] weight_l2_1_address1;
output   weight_l2_1_ce1;
input  [7:0] weight_l2_1_q1;
output  [11:0] weight_l2_2_address0;
output   weight_l2_2_ce0;
input  [7:0] weight_l2_2_q0;
output  [11:0] weight_l2_2_address1;
output   weight_l2_2_ce1;
input  [7:0] weight_l2_2_q1;
output  [11:0] weight_l2_3_address0;
output   weight_l2_3_ce0;
input  [7:0] weight_l2_3_q0;
output  [11:0] weight_l2_3_address1;
output   weight_l2_3_ce1;
input  [7:0] weight_l2_3_q1;
output  [11:0] weight_l2_4_address0;
output   weight_l2_4_ce0;
input  [7:0] weight_l2_4_q0;
output  [11:0] weight_l2_4_address1;
output   weight_l2_4_ce1;
input  [7:0] weight_l2_4_q1;
output  [11:0] weight_l2_5_address0;
output   weight_l2_5_ce0;
input  [7:0] weight_l2_5_q0;
output  [11:0] weight_l2_5_address1;
output   weight_l2_5_ce1;
input  [7:0] weight_l2_5_q1;
output  [11:0] weight_l2_6_address0;
output   weight_l2_6_ce0;
input  [7:0] weight_l2_6_q0;
output  [11:0] weight_l2_6_address1;
output   weight_l2_6_ce1;
input  [7:0] weight_l2_6_q1;
output  [11:0] weight_l2_7_address0;
output   weight_l2_7_ce0;
input  [7:0] weight_l2_7_q0;
output  [11:0] weight_l2_7_address1;
output   weight_l2_7_ce1;
input  [7:0] weight_l2_7_q1;
output  [10:0] ko_3_out_din;
input   ko_3_out_full_n;
output   ko_3_out_write;
output  [31:0] co_out_din;
input   co_out_full_n;
output   co_out_write;
output  [31:0] ro_out_din;
input   ro_out_full_n;
output   ro_out_write;
output  [31:0] so_out_din;
input   so_out_full_n;
output   so_out_write;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;
output  [7:0] ap_return_16;
output  [7:0] ap_return_17;
output  [7:0] ap_return_18;
output  [7:0] ap_return_19;
output  [7:0] ap_return_20;
output  [7:0] ap_return_21;
output  [7:0] ap_return_22;
output  [7:0] ap_return_23;
output  [7:0] ap_return_24;
output  [7:0] ap_return_25;
output  [7:0] ap_return_26;
output  [7:0] ap_return_27;
output  [7:0] ap_return_28;
output  [7:0] ap_return_29;
output  [7:0] ap_return_30;
output  [7:0] ap_return_31;
output  [7:0] ap_return_32;
output  [7:0] ap_return_33;
output  [7:0] ap_return_34;
output  [7:0] ap_return_35;
output  [7:0] ap_return_36;
output  [7:0] ap_return_37;
output  [7:0] ap_return_38;
output  [7:0] ap_return_39;
output  [7:0] ap_return_40;
output  [7:0] ap_return_41;
output  [7:0] ap_return_42;
output  [7:0] ap_return_43;
output  [7:0] ap_return_44;
output  [7:0] ap_return_45;
output  [7:0] ap_return_46;
output  [7:0] ap_return_47;
output  [7:0] ap_return_48;
output  [7:0] ap_return_49;
output  [7:0] ap_return_50;
output  [7:0] ap_return_51;
output  [7:0] ap_return_52;
output  [7:0] ap_return_53;
output  [7:0] ap_return_54;
output  [7:0] ap_return_55;
output  [7:0] ap_return_56;
output  [7:0] ap_return_57;
output  [7:0] ap_return_58;
output  [7:0] ap_return_59;
output  [7:0] ap_return_60;
output  [7:0] ap_return_61;
output  [7:0] ap_return_62;
output  [7:0] ap_return_63;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg C_L2_read;
reg R_L2_read;
reg S_L2_read;
reg ko_3_read;
reg co_read;
reg ro_read;
reg so_read;
reg[11:0] weight_l2_0_address0;
reg weight_l2_0_ce0;
reg[11:0] weight_l2_0_address1;
reg weight_l2_0_ce1;
reg[11:0] weight_l2_1_address0;
reg weight_l2_1_ce0;
reg[11:0] weight_l2_1_address1;
reg weight_l2_1_ce1;
reg[11:0] weight_l2_2_address0;
reg weight_l2_2_ce0;
reg[11:0] weight_l2_2_address1;
reg weight_l2_2_ce1;
reg[11:0] weight_l2_3_address0;
reg weight_l2_3_ce0;
reg[11:0] weight_l2_3_address1;
reg weight_l2_3_ce1;
reg[11:0] weight_l2_4_address0;
reg weight_l2_4_ce0;
reg[11:0] weight_l2_4_address1;
reg weight_l2_4_ce1;
reg[11:0] weight_l2_5_address0;
reg weight_l2_5_ce0;
reg[11:0] weight_l2_5_address1;
reg weight_l2_5_ce1;
reg[11:0] weight_l2_6_address0;
reg weight_l2_6_ce0;
reg[11:0] weight_l2_6_address1;
reg weight_l2_6_ce1;
reg[11:0] weight_l2_7_address0;
reg weight_l2_7_ce0;
reg[11:0] weight_l2_7_address1;
reg weight_l2_7_ce1;
reg ko_3_out_write;
reg co_out_write;
reg ro_out_write;
reg so_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    C_L2_blk_n;
reg    R_L2_blk_n;
reg    S_L2_blk_n;
reg    ko_3_blk_n;
reg    co_blk_n;
reg    ro_blk_n;
reg    so_blk_n;
reg    ko_3_out_blk_n;
reg    co_out_blk_n;
reg    ro_out_blk_n;
reg    so_out_blk_n;
reg    ap_block_state1;
reg  signed [11:0] R_L2_read_reg_1376;
reg  signed [11:0] S_L2_read_reg_1388;
wire   [11:0] trunc_ln746_fu_744_p1;
reg   [11:0] trunc_ln746_reg_1405;
wire   [11:0] trunc_ln748_fu_748_p1;
reg   [11:0] trunc_ln748_reg_1417;
wire   [8:0] empty_fu_752_p1;
reg   [8:0] empty_reg_1429;
wire   [11:0] c_fu_756_p3;
reg   [11:0] c_reg_1434;
wire    ap_CS_fsm_state4;
wire  signed [11:0] grp_fu_1263_p2;
reg  signed [11:0] mul4_i_i_i_reg_1444;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
reg   [7:0] weight_l2_0_load_reg_1574;
wire    ap_CS_fsm_state11;
reg   [7:0] weight_l2_1_load_reg_1579;
reg   [7:0] weight_l2_2_load_reg_1584;
reg   [7:0] weight_l2_3_load_reg_1589;
reg   [7:0] weight_l2_4_load_reg_1594;
reg   [7:0] weight_l2_5_load_reg_1599;
reg   [7:0] weight_l2_6_load_reg_1604;
reg   [7:0] weight_l2_7_load_reg_1609;
reg   [7:0] weight_l2_0_load_1_reg_1614;
reg   [7:0] weight_l2_1_load_1_reg_1619;
reg   [7:0] weight_l2_2_load_1_reg_1624;
reg   [7:0] weight_l2_3_load_1_reg_1629;
reg   [7:0] weight_l2_4_load_1_reg_1634;
reg   [7:0] weight_l2_5_load_1_reg_1639;
reg   [7:0] weight_l2_6_load_1_reg_1644;
reg   [7:0] weight_l2_7_load_1_reg_1649;
wire  signed [11:0] grp_fu_1343_p4;
reg  signed [11:0] add12_4_i_i_i_reg_1734;
wire  signed [11:0] grp_fu_1350_p4;
reg  signed [11:0] add12_5_i_i_i_reg_1739;
wire  signed [11:0] grp_fu_1357_p4;
reg  signed [11:0] add12_6_i_i_i_reg_1744;
wire  signed [11:0] grp_fu_1364_p4;
reg  signed [11:0] add12_7_i_i_i_reg_1749;
reg   [7:0] weight_l2_0_load_2_reg_1754;
wire    ap_CS_fsm_state12;
reg   [7:0] weight_l2_1_load_2_reg_1759;
reg   [7:0] weight_l2_2_load_2_reg_1764;
reg   [7:0] weight_l2_3_load_2_reg_1769;
reg   [7:0] weight_l2_4_load_2_reg_1774;
reg   [7:0] weight_l2_5_load_2_reg_1779;
reg   [7:0] weight_l2_6_load_2_reg_1784;
reg   [7:0] weight_l2_7_load_2_reg_1789;
reg   [7:0] weight_l2_0_load_3_reg_1794;
reg   [7:0] weight_l2_1_load_3_reg_1799;
reg   [7:0] weight_l2_2_load_3_reg_1804;
reg   [7:0] weight_l2_3_load_3_reg_1809;
reg   [7:0] weight_l2_4_load_3_reg_1814;
reg   [7:0] weight_l2_5_load_3_reg_1819;
reg   [7:0] weight_l2_6_load_3_reg_1824;
reg   [7:0] weight_l2_7_load_3_reg_1829;
reg   [7:0] weight_l2_0_load_4_reg_1914;
wire    ap_CS_fsm_state13;
reg   [7:0] weight_l2_1_load_4_reg_1919;
reg   [7:0] weight_l2_2_load_4_reg_1924;
reg   [7:0] weight_l2_3_load_4_reg_1929;
reg   [7:0] weight_l2_4_load_4_reg_1934;
reg   [7:0] weight_l2_5_load_4_reg_1939;
reg   [7:0] weight_l2_6_load_4_reg_1944;
reg   [7:0] weight_l2_7_load_4_reg_1949;
reg   [7:0] weight_l2_0_load_5_reg_1954;
reg   [7:0] weight_l2_1_load_5_reg_1959;
reg   [7:0] weight_l2_2_load_5_reg_1964;
reg   [7:0] weight_l2_3_load_5_reg_1969;
reg   [7:0] weight_l2_4_load_5_reg_1974;
reg   [7:0] weight_l2_5_load_5_reg_1979;
reg   [7:0] weight_l2_6_load_5_reg_1984;
reg   [7:0] weight_l2_7_load_5_reg_1989;
wire   [63:0] idxprom13_i_i_i_fu_839_p1;
wire   [63:0] idxprom13_1_i_i_i_fu_850_p1;
wire   [63:0] idxprom13_2_i_i_i_fu_861_p1;
wire   [63:0] idxprom13_3_i_i_i_fu_872_p1;
wire   [63:0] idxprom13_4_i_i_i_fu_883_p1;
wire   [63:0] idxprom13_5_i_i_i_fu_894_p1;
wire   [63:0] idxprom13_6_i_i_i_fu_905_p1;
wire   [63:0] idxprom13_7_i_i_i_fu_916_p1;
wire  signed [11:0] trunc_ln740_fu_739_p0;
wire   [11:0] c_1_fu_768_p2;
wire   [11:0] c_2_fu_779_p2;
wire   [11:0] c_3_fu_789_p2;
wire   [11:0] c_4_fu_799_p2;
wire   [11:0] c_5_fu_809_p2;
wire   [11:0] c_6_fu_819_p2;
wire   [11:0] c_7_fu_829_p2;
wire  signed [11:0] grp_fu_1311_p4;
wire  signed [11:0] grp_fu_1319_p4;
wire  signed [11:0] grp_fu_1327_p4;
wire  signed [11:0] grp_fu_1335_p4;
wire    ap_CS_fsm_state14;
wire  signed [11:0] grp_fu_1271_p1;
wire  signed [11:0] grp_fu_1276_p1;
wire  signed [11:0] grp_fu_1281_p1;
wire  signed [11:0] grp_fu_1286_p1;
wire  signed [11:0] grp_fu_1291_p1;
wire  signed [11:0] grp_fu_1296_p1;
wire  signed [11:0] grp_fu_1301_p1;
wire  signed [11:0] grp_fu_1306_p1;
wire  signed [11:0] grp_fu_1271_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire  signed [11:0] grp_fu_1276_p2;
wire  signed [11:0] grp_fu_1281_p2;
wire    ap_CS_fsm_state8;
wire  signed [11:0] grp_fu_1286_p2;
wire  signed [11:0] grp_fu_1291_p2;
wire  signed [11:0] grp_fu_1296_p2;
wire  signed [11:0] grp_fu_1301_p2;
wire  signed [11:0] grp_fu_1306_p2;
reg    grp_fu_1263_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
end

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U238(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ko_3_dout),
    .din1(C_L2_dout),
    .ce(grp_fu_1263_ce),
    .dout(grp_fu_1263_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U239(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1271_p1),
    .ce(1'b1),
    .dout(grp_fu_1271_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U240(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1276_p1),
    .ce(1'b1),
    .dout(grp_fu_1276_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U241(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1281_p1),
    .ce(1'b1),
    .dout(grp_fu_1281_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U242(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1286_p1),
    .ce(1'b1),
    .dout(grp_fu_1286_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U243(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1291_p1),
    .ce(1'b1),
    .dout(grp_fu_1291_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U244(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1296_p1),
    .ce(1'b1),
    .dout(grp_fu_1296_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U245(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1301_p1),
    .ce(1'b1),
    .dout(grp_fu_1301_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U246(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(R_L2_read_reg_1376),
    .din1(grp_fu_1306_p1),
    .ce(1'b1),
    .dout(grp_fu_1306_p2)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U247(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1271_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1311_p4)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U248(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1276_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1319_p4)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U249(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1281_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1327_p4)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U250(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1286_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1335_p4)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U251(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1291_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1343_p4)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U252(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1296_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1350_p4)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U253(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1301_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1357_p4)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U254(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln746_reg_1405),
    .din1(grp_fu_1306_p2),
    .din2(S_L2_read_reg_1388),
    .din3(trunc_ln748_reg_1417),
    .ce(1'b1),
    .dout(grp_fu_1364_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        R_L2_read_reg_1376 <= R_L2_dout;
        S_L2_read_reg_1388 <= S_L2_dout;
        empty_reg_1429 <= empty_fu_752_p1;
        trunc_ln746_reg_1405 <= trunc_ln746_fu_744_p1;
        trunc_ln748_reg_1417 <= trunc_ln748_fu_748_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add12_4_i_i_i_reg_1734 <= grp_fu_1343_p4;
        add12_5_i_i_i_reg_1739 <= grp_fu_1350_p4;
        add12_6_i_i_i_reg_1744 <= grp_fu_1357_p4;
        add12_7_i_i_i_reg_1749 <= grp_fu_1364_p4;
        weight_l2_0_load_1_reg_1614 <= weight_l2_0_q0;
        weight_l2_0_load_reg_1574 <= weight_l2_0_q1;
        weight_l2_1_load_1_reg_1619 <= weight_l2_1_q0;
        weight_l2_1_load_reg_1579 <= weight_l2_1_q1;
        weight_l2_2_load_1_reg_1624 <= weight_l2_2_q0;
        weight_l2_2_load_reg_1584 <= weight_l2_2_q1;
        weight_l2_3_load_1_reg_1629 <= weight_l2_3_q0;
        weight_l2_3_load_reg_1589 <= weight_l2_3_q1;
        weight_l2_4_load_1_reg_1634 <= weight_l2_4_q0;
        weight_l2_4_load_reg_1594 <= weight_l2_4_q1;
        weight_l2_5_load_1_reg_1639 <= weight_l2_5_q0;
        weight_l2_5_load_reg_1599 <= weight_l2_5_q1;
        weight_l2_6_load_1_reg_1644 <= weight_l2_6_q0;
        weight_l2_6_load_reg_1604 <= weight_l2_6_q1;
        weight_l2_7_load_1_reg_1649 <= weight_l2_7_q0;
        weight_l2_7_load_reg_1609 <= weight_l2_7_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_1434[11 : 3] <= c_fu_756_p3[11 : 3];
        mul4_i_i_i_reg_1444 <= grp_fu_1263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_0_load_2_reg_1754 <= weight_l2_0_q1;
        weight_l2_0_load_3_reg_1794 <= weight_l2_0_q0;
        weight_l2_1_load_2_reg_1759 <= weight_l2_1_q1;
        weight_l2_1_load_3_reg_1799 <= weight_l2_1_q0;
        weight_l2_2_load_2_reg_1764 <= weight_l2_2_q1;
        weight_l2_2_load_3_reg_1804 <= weight_l2_2_q0;
        weight_l2_3_load_2_reg_1769 <= weight_l2_3_q1;
        weight_l2_3_load_3_reg_1809 <= weight_l2_3_q0;
        weight_l2_4_load_2_reg_1774 <= weight_l2_4_q1;
        weight_l2_4_load_3_reg_1814 <= weight_l2_4_q0;
        weight_l2_5_load_2_reg_1779 <= weight_l2_5_q1;
        weight_l2_5_load_3_reg_1819 <= weight_l2_5_q0;
        weight_l2_6_load_2_reg_1784 <= weight_l2_6_q1;
        weight_l2_6_load_3_reg_1824 <= weight_l2_6_q0;
        weight_l2_7_load_2_reg_1789 <= weight_l2_7_q1;
        weight_l2_7_load_3_reg_1829 <= weight_l2_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_0_load_4_reg_1914 <= weight_l2_0_q1;
        weight_l2_0_load_5_reg_1954 <= weight_l2_0_q0;
        weight_l2_1_load_4_reg_1919 <= weight_l2_1_q1;
        weight_l2_1_load_5_reg_1959 <= weight_l2_1_q0;
        weight_l2_2_load_4_reg_1924 <= weight_l2_2_q1;
        weight_l2_2_load_5_reg_1964 <= weight_l2_2_q0;
        weight_l2_3_load_4_reg_1929 <= weight_l2_3_q1;
        weight_l2_3_load_5_reg_1969 <= weight_l2_3_q0;
        weight_l2_4_load_4_reg_1934 <= weight_l2_4_q1;
        weight_l2_4_load_5_reg_1974 <= weight_l2_4_q0;
        weight_l2_5_load_4_reg_1939 <= weight_l2_5_q1;
        weight_l2_5_load_5_reg_1979 <= weight_l2_5_q0;
        weight_l2_6_load_4_reg_1944 <= weight_l2_6_q1;
        weight_l2_6_load_5_reg_1984 <= weight_l2_6_q0;
        weight_l2_7_load_4_reg_1949 <= weight_l2_7_q1;
        weight_l2_7_load_5_reg_1989 <= weight_l2_7_q0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_L2_blk_n = C_L2_empty_n;
    end else begin
        C_L2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_L2_read = 1'b1;
    end else begin
        C_L2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        R_L2_blk_n = R_L2_empty_n;
    end else begin
        R_L2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        R_L2_read = 1'b1;
    end else begin
        R_L2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_L2_blk_n = S_L2_empty_n;
    end else begin
        S_L2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_L2_read = 1'b1;
    end else begin
        S_L2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_blk_n = co_empty_n;
    end else begin
        co_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_out_blk_n = co_out_full_n;
    end else begin
        co_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_out_write = 1'b1;
    end else begin
        co_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_read = 1'b1;
    end else begin
        co_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_1263_ce = 1'b1;
    end else begin
        grp_fu_1263_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_3_blk_n = ko_3_empty_n;
    end else begin
        ko_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_3_out_blk_n = ko_3_out_full_n;
    end else begin
        ko_3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_3_out_write = 1'b1;
    end else begin
        ko_3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_3_read = 1'b1;
    end else begin
        ko_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_blk_n = ro_empty_n;
    end else begin
        ro_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_out_blk_n = ro_out_full_n;
    end else begin
        ro_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_out_write = 1'b1;
    end else begin
        ro_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_read = 1'b1;
    end else begin
        ro_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_blk_n = so_empty_n;
    end else begin
        so_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_out_blk_n = so_out_full_n;
    end else begin
        so_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_out_write = 1'b1;
    end else begin
        so_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_read = 1'b1;
    end else begin
        so_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_0_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_0_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_0_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_0_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_0_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_0_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_0_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_0_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_0_ce0 = 1'b1;
    end else begin
        weight_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_0_ce1 = 1'b1;
    end else begin
        weight_l2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_1_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_1_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_1_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_1_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_1_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_1_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_1_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_1_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_1_ce0 = 1'b1;
    end else begin
        weight_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_1_ce1 = 1'b1;
    end else begin
        weight_l2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_2_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_2_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_2_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_2_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_2_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_2_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_2_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_2_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_2_ce0 = 1'b1;
    end else begin
        weight_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_2_ce1 = 1'b1;
    end else begin
        weight_l2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_3_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_3_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_3_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_3_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_3_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_3_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_3_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_3_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_3_ce0 = 1'b1;
    end else begin
        weight_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_3_ce1 = 1'b1;
    end else begin
        weight_l2_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_4_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_4_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_4_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_4_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_4_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_4_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_4_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_4_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_4_ce0 = 1'b1;
    end else begin
        weight_l2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_4_ce1 = 1'b1;
    end else begin
        weight_l2_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_5_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_5_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_5_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_5_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_5_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_5_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_5_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_5_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_5_ce0 = 1'b1;
    end else begin
        weight_l2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_5_ce1 = 1'b1;
    end else begin
        weight_l2_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_6_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_6_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_6_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_6_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_6_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_6_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_6_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_6_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_6_ce0 = 1'b1;
    end else begin
        weight_l2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_6_ce1 = 1'b1;
    end else begin
        weight_l2_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_7_address0 = idxprom13_7_i_i_i_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_7_address0 = idxprom13_5_i_i_i_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_7_address0 = idxprom13_3_i_i_i_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_7_address0 = idxprom13_1_i_i_i_fu_850_p1;
    end else begin
        weight_l2_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_l2_7_address1 = idxprom13_6_i_i_i_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_7_address1 = idxprom13_4_i_i_i_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_7_address1 = idxprom13_2_i_i_i_fu_861_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_l2_7_address1 = idxprom13_i_i_i_fu_839_p1;
    end else begin
        weight_l2_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_7_ce0 = 1'b1;
    end else begin
        weight_l2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        weight_l2_7_ce1 = 1'b1;
    end else begin
        weight_l2_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_3_empty_n == 1'b0) | (1'b0 == S_L2_empty_n) | (1'b0 == R_L2_empty_n) | (1'b0 == C_L2_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_3_out_full_n == 1'b0));
end

assign ap_return_0 = weight_l2_0_load_reg_1574;

assign ap_return_1 = weight_l2_0_load_1_reg_1614;

assign ap_return_10 = weight_l2_1_load_2_reg_1759;

assign ap_return_11 = weight_l2_1_load_3_reg_1799;

assign ap_return_12 = weight_l2_1_load_4_reg_1919;

assign ap_return_13 = weight_l2_1_load_5_reg_1959;

assign ap_return_14 = weight_l2_1_q1;

assign ap_return_15 = weight_l2_1_q0;

assign ap_return_16 = weight_l2_2_load_reg_1584;

assign ap_return_17 = weight_l2_2_load_1_reg_1624;

assign ap_return_18 = weight_l2_2_load_2_reg_1764;

assign ap_return_19 = weight_l2_2_load_3_reg_1804;

assign ap_return_2 = weight_l2_0_load_2_reg_1754;

assign ap_return_20 = weight_l2_2_load_4_reg_1924;

assign ap_return_21 = weight_l2_2_load_5_reg_1964;

assign ap_return_22 = weight_l2_2_q1;

assign ap_return_23 = weight_l2_2_q0;

assign ap_return_24 = weight_l2_3_load_reg_1589;

assign ap_return_25 = weight_l2_3_load_1_reg_1629;

assign ap_return_26 = weight_l2_3_load_2_reg_1769;

assign ap_return_27 = weight_l2_3_load_3_reg_1809;

assign ap_return_28 = weight_l2_3_load_4_reg_1929;

assign ap_return_29 = weight_l2_3_load_5_reg_1969;

assign ap_return_3 = weight_l2_0_load_3_reg_1794;

assign ap_return_30 = weight_l2_3_q1;

assign ap_return_31 = weight_l2_3_q0;

assign ap_return_32 = weight_l2_4_load_reg_1594;

assign ap_return_33 = weight_l2_4_load_1_reg_1634;

assign ap_return_34 = weight_l2_4_load_2_reg_1774;

assign ap_return_35 = weight_l2_4_load_3_reg_1814;

assign ap_return_36 = weight_l2_4_load_4_reg_1934;

assign ap_return_37 = weight_l2_4_load_5_reg_1974;

assign ap_return_38 = weight_l2_4_q1;

assign ap_return_39 = weight_l2_4_q0;

assign ap_return_4 = weight_l2_0_load_4_reg_1914;

assign ap_return_40 = weight_l2_5_load_reg_1599;

assign ap_return_41 = weight_l2_5_load_1_reg_1639;

assign ap_return_42 = weight_l2_5_load_2_reg_1779;

assign ap_return_43 = weight_l2_5_load_3_reg_1819;

assign ap_return_44 = weight_l2_5_load_4_reg_1939;

assign ap_return_45 = weight_l2_5_load_5_reg_1979;

assign ap_return_46 = weight_l2_5_q1;

assign ap_return_47 = weight_l2_5_q0;

assign ap_return_48 = weight_l2_6_load_reg_1604;

assign ap_return_49 = weight_l2_6_load_1_reg_1644;

assign ap_return_5 = weight_l2_0_load_5_reg_1954;

assign ap_return_50 = weight_l2_6_load_2_reg_1784;

assign ap_return_51 = weight_l2_6_load_3_reg_1824;

assign ap_return_52 = weight_l2_6_load_4_reg_1944;

assign ap_return_53 = weight_l2_6_load_5_reg_1984;

assign ap_return_54 = weight_l2_6_q1;

assign ap_return_55 = weight_l2_6_q0;

assign ap_return_56 = weight_l2_7_load_reg_1609;

assign ap_return_57 = weight_l2_7_load_1_reg_1649;

assign ap_return_58 = weight_l2_7_load_2_reg_1789;

assign ap_return_59 = weight_l2_7_load_3_reg_1829;

assign ap_return_6 = weight_l2_0_q1;

assign ap_return_60 = weight_l2_7_load_4_reg_1949;

assign ap_return_61 = weight_l2_7_load_5_reg_1989;

assign ap_return_62 = weight_l2_7_q1;

assign ap_return_63 = weight_l2_7_q0;

assign ap_return_7 = weight_l2_0_q0;

assign ap_return_8 = weight_l2_1_load_reg_1579;

assign ap_return_9 = weight_l2_1_load_1_reg_1619;

assign c_1_fu_768_p2 = (c_fu_756_p3 | 12'd1);

assign c_2_fu_779_p2 = (c_reg_1434 | 12'd2);

assign c_3_fu_789_p2 = (c_reg_1434 | 12'd3);

assign c_4_fu_799_p2 = (c_reg_1434 | 12'd4);

assign c_5_fu_809_p2 = (c_reg_1434 | 12'd5);

assign c_6_fu_819_p2 = (c_reg_1434 | 12'd6);

assign c_7_fu_829_p2 = (c_reg_1434 | 12'd7);

assign c_fu_756_p3 = {{empty_reg_1429}, {3'd0}};

assign co_out_din = co_dout;

assign empty_fu_752_p1 = co_dout[8:0];

assign grp_fu_1271_p1 = ($signed(c_fu_756_p3) + $signed(grp_fu_1263_p2));

assign grp_fu_1276_p1 = ($signed(c_1_fu_768_p2) + $signed(grp_fu_1263_p2));

assign grp_fu_1281_p1 = ($signed(c_2_fu_779_p2) + $signed(mul4_i_i_i_reg_1444));

assign grp_fu_1286_p1 = ($signed(c_3_fu_789_p2) + $signed(mul4_i_i_i_reg_1444));

assign grp_fu_1291_p1 = ($signed(c_4_fu_799_p2) + $signed(mul4_i_i_i_reg_1444));

assign grp_fu_1296_p1 = ($signed(c_5_fu_809_p2) + $signed(mul4_i_i_i_reg_1444));

assign grp_fu_1301_p1 = ($signed(c_6_fu_819_p2) + $signed(mul4_i_i_i_reg_1444));

assign grp_fu_1306_p1 = ($signed(c_7_fu_829_p2) + $signed(mul4_i_i_i_reg_1444));

assign idxprom13_1_i_i_i_fu_850_p1 = $unsigned(grp_fu_1319_p4);

assign idxprom13_2_i_i_i_fu_861_p1 = $unsigned(grp_fu_1327_p4);

assign idxprom13_3_i_i_i_fu_872_p1 = $unsigned(grp_fu_1335_p4);

assign idxprom13_4_i_i_i_fu_883_p1 = $unsigned(add12_4_i_i_i_reg_1734);

assign idxprom13_5_i_i_i_fu_894_p1 = $unsigned(add12_5_i_i_i_reg_1739);

assign idxprom13_6_i_i_i_fu_905_p1 = $unsigned(add12_6_i_i_i_reg_1744);

assign idxprom13_7_i_i_i_fu_916_p1 = $unsigned(add12_7_i_i_i_reg_1749);

assign idxprom13_i_i_i_fu_839_p1 = $unsigned(grp_fu_1311_p4);

assign ko_3_out_din = trunc_ln740_fu_739_p0[10:0];

assign ro_out_din = ro_dout;

assign so_out_din = so_dout;

assign trunc_ln740_fu_739_p0 = ko_3_dout;

assign trunc_ln746_fu_744_p1 = ro_dout[11:0];

assign trunc_ln748_fu_748_p1 = so_dout[11:0];

always @ (posedge ap_clk) begin
    c_reg_1434[2:0] <= 3'b000;
end

endmodule //Conv_sysarr_runWeight2Reg
