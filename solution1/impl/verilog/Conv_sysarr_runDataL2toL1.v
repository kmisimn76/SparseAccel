// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runDataL2toL1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_l1_017_i_address0,
        data_l1_017_i_ce0,
        data_l1_017_i_we0,
        data_l1_017_i_d0,
        data_l1_118_i_address0,
        data_l1_118_i_ce0,
        data_l1_118_i_we0,
        data_l1_118_i_d0,
        data_l1_219_i_address0,
        data_l1_219_i_ce0,
        data_l1_219_i_we0,
        data_l1_219_i_d0,
        data_l1_320_i_address0,
        data_l1_320_i_ce0,
        data_l1_320_i_we0,
        data_l1_320_i_d0,
        param_dout,
        param_empty_n,
        param_read,
        co_dout,
        co_empty_n,
        co_read,
        ho_dout,
        ho_empty_n,
        ho_read,
        wo_dout,
        wo_empty_n,
        wo_read,
        ro_dout,
        ro_empty_n,
        ro_read,
        so_dout,
        so_empty_n,
        so_read,
        data_l2_0_address0,
        data_l2_0_ce0,
        data_l2_0_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [5:0] data_l1_017_i_address0;
output   data_l1_017_i_ce0;
output   data_l1_017_i_we0;
output  [7:0] data_l1_017_i_d0;
output  [5:0] data_l1_118_i_address0;
output   data_l1_118_i_ce0;
output   data_l1_118_i_we0;
output  [0:0] data_l1_118_i_d0;
output  [5:0] data_l1_219_i_address0;
output   data_l1_219_i_ce0;
output   data_l1_219_i_we0;
output  [0:0] data_l1_219_i_d0;
output  [5:0] data_l1_320_i_address0;
output   data_l1_320_i_ce0;
output   data_l1_320_i_we0;
output  [0:0] data_l1_320_i_d0;
input  [1119:0] param_dout;
input   param_empty_n;
output   param_read;
input  [10:0] co_dout;
input   co_empty_n;
output   co_read;
input  [10:0] ho_dout;
input   ho_empty_n;
output   ho_read;
input  [10:0] wo_dout;
input   wo_empty_n;
output   wo_read;
input  [10:0] ro_dout;
input   ro_empty_n;
output   ro_read;
input  [10:0] so_dout;
input   so_empty_n;
output   so_read;
output  [10:0] data_l2_0_address0;
output   data_l2_0_ce0;
input  [7:0] data_l2_0_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_l1_017_i_ce0;
reg data_l1_017_i_we0;
reg data_l1_118_i_ce0;
reg data_l1_118_i_we0;
reg data_l1_219_i_ce0;
reg data_l1_219_i_we0;
reg data_l1_320_i_ce0;
reg data_l1_320_i_we0;
reg param_read;
reg co_read;
reg ho_read;
reg wo_read;
reg ro_read;
reg so_read;
reg data_l2_0_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    param_blk_n;
reg    co_blk_n;
reg    ho_blk_n;
reg    wo_blk_n;
reg    ro_blk_n;
reg    so_blk_n;
reg   [63:0] indvar_flatten_reg_195;
reg   [31:0] hi_reg_206;
reg   [31:0] wi_reg_217;
reg    ap_block_state1;
reg   [10:0] ro_read_reg_440;
reg   [10:0] so_read_reg_445;
reg   [31:0] param_TILESIZE_H_i_i_reg_450;
reg   [31:0] param_TILESIZE_W_i_i_reg_455;
reg  signed [10:0] trunc_ln_reg_461;
reg  signed [5:0] TILESIZE_W_cast2_i_i_i_reg_471;
wire  signed [10:0] grp_fu_404_p2;
reg  signed [10:0] mul9_i_i_i_reg_486;
wire    ap_CS_fsm_state4;
wire  signed [10:0] grp_fu_390_p3;
reg  signed [10:0] tmp_reg_491;
wire  signed [10:0] grp_fu_397_p3;
reg  signed [10:0] tmp2_reg_496;
wire   [63:0] bound_fu_304_p2;
reg   [63:0] bound_reg_501;
wire   [0:0] icmp_ln84_fu_310_p2;
reg   [0:0] icmp_ln84_reg_506;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln84_reg_506_pp0_iter1_reg;
reg   [0:0] icmp_ln84_reg_506_pp0_iter2_reg;
reg   [0:0] icmp_ln84_reg_506_pp0_iter3_reg;
wire   [63:0] add_ln84_2_fu_315_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln84_1_fu_340_p3;
reg   [31:0] select_ln84_1_reg_515;
wire   [10:0] empty_fu_361_p1;
reg   [10:0] empty_reg_525;
reg   [10:0] empty_reg_525_pp0_iter1_reg;
wire   [5:0] empty_59_fu_365_p1;
reg   [5:0] empty_59_reg_530;
reg   [5:0] empty_59_reg_530_pp0_iter1_reg;
wire   [31:0] add_ln86_fu_369_p2;
wire   [63:0] idxprom18_i_i_i_fu_384_p1;
reg   [63:0] idxprom18_i_i_i_reg_540;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] ap_phi_mux_hi_phi_fu_210_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom_i_i_i_fu_379_p1;
wire   [31:0] bound_fu_304_p0;
wire   [31:0] bound_fu_304_p1;
wire   [0:0] icmp_ln86_fu_321_p2;
wire   [31:0] add_ln84_3_fu_334_p2;
wire   [10:0] trunc_ln84_fu_348_p1;
wire   [31:0] select_ln84_fu_326_p3;
wire  signed [10:0] grp_fu_410_p4;
(* use_dsp48 = "no" *) wire   [10:0] add13_i_i_i_fu_375_p2;
wire  signed [5:0] grp_fu_418_p3;
wire  signed [10:0] grp_fu_390_p0;
wire    ap_CS_fsm_state3;
wire  signed [10:0] grp_fu_397_p0;
wire  signed [10:0] grp_fu_404_p1;
wire   [10:0] grp_fu_410_p0;
wire  signed [5:0] grp_fu_418_p1;
reg    grp_fu_390_ce;
wire    ap_CS_fsm_state10;
reg    grp_fu_397_ce;
reg    grp_fu_404_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_304_p00;
wire   [63:0] bound_fu_304_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

Conv_sysarr_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U105(
    .din0(bound_fu_304_p0),
    .din1(bound_fu_304_p1),
    .dout(bound_fu_304_p2)
);

Conv_sysarr_mac_muladd_11s_11s_11ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
mac_muladd_11s_11s_11ns_11_4_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_390_p0),
    .din1(ho_dout),
    .din2(ro_read_reg_440),
    .ce(grp_fu_390_ce),
    .dout(grp_fu_390_p3)
);

Conv_sysarr_mac_muladd_11s_11s_11ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
mac_muladd_11s_11s_11ns_11_4_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_397_p0),
    .din1(wo_dout),
    .din2(so_read_reg_445),
    .ce(grp_fu_397_ce),
    .dout(grp_fu_397_p3)
);

Conv_sysarr_mul_mul_11s_11s_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
mul_mul_11s_11s_11_4_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(co_dout),
    .din1(grp_fu_404_p1),
    .ce(grp_fu_404_ce),
    .dout(grp_fu_404_p2)
);

Conv_sysarr_ama_addmuladd_11ns_11s_11s_11ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .din3_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
ama_addmuladd_11ns_11s_11s_11ns_11_4_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_410_p0),
    .din1(tmp_reg_491),
    .din2(trunc_ln_reg_461),
    .din3(empty_reg_525_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_410_p4)
);

Conv_sysarr_mac_muladd_6s_6s_6ns_6_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
mac_muladd_6s_6s_6ns_6_4_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(TILESIZE_W_cast2_i_i_i_reg_471),
    .din1(grp_fu_418_p1),
    .din2(empty_59_reg_530_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_418_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_reg_506 == 1'd0))) begin
        hi_reg_206 <= select_ln84_1_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hi_reg_206 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_fu_310_p2 == 1'd0))) begin
        indvar_flatten_reg_195 <= add_ln84_2_fu_315_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_195 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_fu_310_p2 == 1'd0))) begin
        wi_reg_217 <= add_ln86_fu_369_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wi_reg_217 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        TILESIZE_W_cast2_i_i_i_reg_471 <= {{param_dout[1061:1056]}};
        param_TILESIZE_H_i_i_reg_450 <= {{param_dout[1119:1088]}};
        param_TILESIZE_W_i_i_reg_455 <= {{param_dout[1087:1056]}};
        ro_read_reg_440 <= ro_dout;
        so_read_reg_445 <= so_dout;
        trunc_ln_reg_461 <= {{param_dout[490:480]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_501 <= bound_fu_304_p2;
        mul9_i_i_i_reg_486 <= grp_fu_404_p2;
        tmp2_reg_496 <= grp_fu_397_p3;
        tmp_reg_491 <= grp_fu_390_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_fu_310_p2 == 1'd0))) begin
        empty_59_reg_530 <= empty_59_fu_365_p1;
        empty_reg_525 <= empty_fu_361_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_59_reg_530_pp0_iter1_reg <= empty_59_reg_530;
        empty_reg_525_pp0_iter1_reg <= empty_reg_525;
        icmp_ln84_reg_506 <= icmp_ln84_fu_310_p2;
        icmp_ln84_reg_506_pp0_iter1_reg <= icmp_ln84_reg_506;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln84_reg_506_pp0_iter2_reg <= icmp_ln84_reg_506_pp0_iter1_reg;
        icmp_ln84_reg_506_pp0_iter3_reg <= icmp_ln84_reg_506_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_506_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxprom18_i_i_i_reg_540[5 : 0] <= idxprom18_i_i_i_fu_384_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_fu_310_p2 == 1'd0))) begin
        select_ln84_1_reg_515 <= select_ln84_1_fu_340_p3;
    end
end

always @ (*) begin
    if ((icmp_ln84_fu_310_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln84_reg_506 == 1'd0))) begin
        ap_phi_mux_hi_phi_fu_210_p4 = select_ln84_1_reg_515;
    end else begin
        ap_phi_mux_hi_phi_fu_210_p4 = hi_reg_206;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_blk_n = co_empty_n;
    end else begin
        co_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_read = 1'b1;
    end else begin
        co_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_017_i_ce0 = 1'b1;
    end else begin
        data_l1_017_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln84_reg_506_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_017_i_we0 = 1'b1;
    end else begin
        data_l1_017_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_118_i_ce0 = 1'b1;
    end else begin
        data_l1_118_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln84_reg_506_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_118_i_we0 = 1'b1;
    end else begin
        data_l1_118_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_219_i_ce0 = 1'b1;
    end else begin
        data_l1_219_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln84_reg_506_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_219_i_we0 = 1'b1;
    end else begin
        data_l1_219_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_320_i_ce0 = 1'b1;
    end else begin
        data_l1_320_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln84_reg_506_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_320_i_we0 = 1'b1;
    end else begin
        data_l1_320_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_0_ce0 = 1'b1;
    end else begin
        data_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_pp0_stage0) | ((1'b1 == ap_CS_fsm_state1) & ((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_390_ce = 1'b0;
    end else begin
        grp_fu_390_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_pp0_stage0) | ((1'b1 == ap_CS_fsm_state1) & ((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_397_ce = 1'b0;
    end else begin
        grp_fu_397_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_pp0_stage0) | ((1'b1 == ap_CS_fsm_state1) & ((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_404_ce = 1'b0;
    end else begin
        grp_fu_404_ce = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ho_blk_n = ho_empty_n;
    end else begin
        ho_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ho_read = 1'b1;
    end else begin
        ho_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_blk_n = param_empty_n;
    end else begin
        param_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_read = 1'b1;
    end else begin
        param_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_blk_n = ro_empty_n;
    end else begin
        ro_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_read = 1'b1;
    end else begin
        ro_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_blk_n = so_empty_n;
    end else begin
        so_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_read = 1'b1;
    end else begin
        so_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        wo_blk_n = wo_empty_n;
    end else begin
        wo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        wo_read = 1'b1;
    end else begin
        wo_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln84_fu_310_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln84_fu_310_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add13_i_i_i_fu_375_p2 = ($signed(grp_fu_410_p4) + $signed(tmp2_reg_496));

assign add_ln84_2_fu_315_p2 = (indvar_flatten_reg_195 + 64'd1);

assign add_ln84_3_fu_334_p2 = (32'd1 + ap_phi_mux_hi_phi_fu_210_p4);

assign add_ln86_fu_369_p2 = (32'd1 + select_ln84_fu_326_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_304_p0 = bound_fu_304_p00;

assign bound_fu_304_p00 = param_TILESIZE_H_i_i_reg_450;

assign bound_fu_304_p1 = bound_fu_304_p10;

assign bound_fu_304_p10 = param_TILESIZE_W_i_i_reg_455;

assign data_l1_017_i_address0 = idxprom18_i_i_i_reg_540;

assign data_l1_017_i_d0 = data_l2_0_q0;

assign data_l1_118_i_address0 = idxprom18_i_i_i_fu_384_p1;

assign data_l1_118_i_d0 = 1'd0;

assign data_l1_219_i_address0 = idxprom18_i_i_i_fu_384_p1;

assign data_l1_219_i_d0 = 1'd0;

assign data_l1_320_i_address0 = idxprom18_i_i_i_fu_384_p1;

assign data_l1_320_i_d0 = 1'd0;

assign data_l2_0_address0 = idxprom_i_i_i_fu_379_p1;

assign empty_59_fu_365_p1 = select_ln84_fu_326_p3[5:0];

assign empty_fu_361_p1 = select_ln84_fu_326_p3[10:0];

assign grp_fu_390_p0 = {{param_dout[1098:1088]}};

assign grp_fu_397_p0 = {{param_dout[1066:1056]}};

assign grp_fu_404_p1 = {{param_dout[522:512]}};

assign grp_fu_410_p0 = ($signed(mul9_i_i_i_reg_486) + $signed(trunc_ln84_fu_348_p1));

assign grp_fu_418_p1 = select_ln84_1_fu_340_p3[5:0];

assign icmp_ln84_fu_310_p2 = ((indvar_flatten_reg_195 == bound_reg_501) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_321_p2 = ((wi_reg_217 == param_TILESIZE_W_i_i_reg_455) ? 1'b1 : 1'b0);

assign idxprom18_i_i_i_fu_384_p1 = $unsigned(grp_fu_418_p3);

assign idxprom_i_i_i_fu_379_p1 = add13_i_i_i_fu_375_p2;

assign select_ln84_1_fu_340_p3 = ((icmp_ln86_fu_321_p2[0:0] === 1'b1) ? add_ln84_3_fu_334_p2 : ap_phi_mux_hi_phi_fu_210_p4);

assign select_ln84_fu_326_p3 = ((icmp_ln86_fu_321_p2[0:0] === 1'b1) ? 32'd0 : wi_reg_217);

assign trunc_ln84_fu_348_p1 = select_ln84_1_fu_340_p3[10:0];

always @ (posedge ap_clk) begin
    idxprom18_i_i_i_reg_540[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //Conv_sysarr_runDataL2toL1
