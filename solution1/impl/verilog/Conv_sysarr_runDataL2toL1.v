// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runDataL2toL1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_l1_0_address0,
        data_l1_0_ce0,
        data_l1_0_we0,
        data_l1_0_d0,
        data_l1_1_address0,
        data_l1_1_ce0,
        data_l1_1_we0,
        data_l1_1_d0,
        data_l1_2_address0,
        data_l1_2_ce0,
        data_l1_2_we0,
        data_l1_2_d0,
        data_l1_3_address0,
        data_l1_3_ce0,
        data_l1_3_we0,
        data_l1_3_d0,
        data_l2_0_address0,
        data_l2_0_ce0,
        data_l2_0_q0,
        data_l2_1_address0,
        data_l2_1_ce0,
        data_l2_1_q0,
        data_l2_2_address0,
        data_l2_2_ce0,
        data_l2_2_q0,
        data_l2_3_address0,
        data_l2_3_ce0,
        data_l2_3_q0,
        empty_25_dout,
        empty_25_empty_n,
        empty_25_read,
        empty_26_dout,
        empty_26_empty_n,
        empty_26_read,
        co_1_dout,
        co_1_empty_n,
        co_1_read,
        ho_dout,
        ho_empty_n,
        ho_read,
        wo_dout,
        wo_empty_n,
        wo_read,
        ro_dout,
        ro_empty_n,
        ro_read,
        so_dout,
        so_empty_n,
        so_read,
        empty_dout,
        empty_empty_n,
        empty_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [8:0] data_l1_0_address0;
output   data_l1_0_ce0;
output   data_l1_0_we0;
output  [7:0] data_l1_0_d0;
output  [8:0] data_l1_1_address0;
output   data_l1_1_ce0;
output   data_l1_1_we0;
output  [7:0] data_l1_1_d0;
output  [8:0] data_l1_2_address0;
output   data_l1_2_ce0;
output   data_l1_2_we0;
output  [7:0] data_l1_2_d0;
output  [8:0] data_l1_3_address0;
output   data_l1_3_ce0;
output   data_l1_3_we0;
output  [7:0] data_l1_3_d0;
output  [8:0] data_l2_0_address0;
output   data_l2_0_ce0;
input  [7:0] data_l2_0_q0;
output  [8:0] data_l2_1_address0;
output   data_l2_1_ce0;
input  [7:0] data_l2_1_q0;
output  [8:0] data_l2_2_address0;
output   data_l2_2_ce0;
input  [7:0] data_l2_2_q0;
output  [8:0] data_l2_3_address0;
output   data_l2_3_ce0;
input  [7:0] data_l2_3_q0;
input  [31:0] empty_25_dout;
input   empty_25_empty_n;
output   empty_25_read;
input  [31:0] empty_26_dout;
input   empty_26_empty_n;
output   empty_26_read;
input  [8:0] co_1_dout;
input   co_1_empty_n;
output   co_1_read;
input  [8:0] ho_dout;
input   ho_empty_n;
output   ho_read;
input  [8:0] wo_dout;
input   wo_empty_n;
output   wo_read;
input  [8:0] ro_dout;
input   ro_empty_n;
output   ro_read;
input  [8:0] so_dout;
input   so_empty_n;
output   so_read;
input  [8:0] empty_dout;
input   empty_empty_n;
output   empty_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_l1_0_ce0;
reg data_l1_0_we0;
reg data_l1_1_ce0;
reg data_l1_1_we0;
reg data_l1_2_ce0;
reg data_l1_2_we0;
reg data_l1_3_ce0;
reg data_l1_3_we0;
reg data_l2_0_ce0;
reg data_l2_1_ce0;
reg data_l2_2_ce0;
reg data_l2_3_ce0;
reg empty_25_read;
reg empty_26_read;
reg co_1_read;
reg ho_read;
reg wo_read;
reg ro_read;
reg so_read;
reg empty_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    empty_25_blk_n;
reg    empty_26_blk_n;
reg    co_1_blk_n;
reg    ho_blk_n;
reg    wo_blk_n;
reg    ro_blk_n;
reg    so_blk_n;
reg    empty_blk_n;
reg   [63:0] indvar_flatten_reg_226;
reg   [31:0] hi_reg_237;
reg   [31:0] wi_reg_248;
reg  signed [8:0] co_1_read_reg_387;
reg    ap_block_state1;
reg   [8:0] ro_read_reg_402;
reg   [8:0] so_read_reg_407;
reg   [31:0] TILESIZE_H_assign_reg_412;
reg   [31:0] TILESIZE_W_assign_reg_417;
reg  signed [8:0] WH_in_assign_reg_423;
wire  signed [8:0] trunc_ln30_fu_259_p1;
reg  signed [8:0] trunc_ln30_reg_429;
wire   [8:0] mul9_i_i_fu_267_p2;
reg   [8:0] mul9_i_i_reg_440;
wire    ap_CS_fsm_state4;
wire  signed [8:0] grp_fu_359_p3;
reg  signed [8:0] tmp_reg_445;
wire  signed [8:0] grp_fu_366_p3;
reg  signed [8:0] tmp2_reg_450;
wire   [63:0] bound_fu_277_p2;
reg   [63:0] bound_reg_455;
wire   [0:0] icmp_ln32_fu_283_p2;
reg   [0:0] icmp_ln32_reg_460;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_460_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_460_pp0_iter2_reg;
reg   [0:0] icmp_ln32_reg_460_pp0_iter3_reg;
wire   [63:0] add_ln32_2_fu_288_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln32_1_fu_313_p3;
reg   [31:0] select_ln32_1_reg_469;
wire  signed [8:0] trunc_ln32_fu_321_p1;
wire   [8:0] empty_40_fu_330_p1;
reg   [8:0] empty_40_reg_479;
reg   [8:0] empty_40_reg_479_pp0_iter1_reg;
wire   [31:0] add_ln34_fu_334_p2;
wire  signed [8:0] grp_fu_381_p3;
reg  signed [8:0] add17_i_i_reg_490;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] ap_phi_mux_hi_phi_fu_241_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom_i_i_fu_344_p1;
wire   [63:0] idxprom18_i_i_fu_352_p1;
wire   [31:0] bound_fu_277_p0;
wire   [31:0] bound_fu_277_p1;
wire   [0:0] icmp_ln34_fu_294_p2;
wire   [31:0] add_ln32_3_fu_307_p2;
wire   [31:0] select_ln32_fu_299_p3;
wire  signed [8:0] grp_fu_373_p4;
(* use_dsp48 = "no" *) wire   [8:0] add13_i_i_fu_340_p2;
wire  signed [8:0] grp_fu_359_p1;
wire    ap_CS_fsm_state3;
wire  signed [8:0] grp_fu_366_p1;
wire   [8:0] grp_fu_373_p0;
reg    grp_fu_359_ce;
wire    ap_CS_fsm_state10;
reg    grp_fu_366_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_277_p00;
wire   [63:0] bound_fu_277_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

Conv_sysarr_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U92(
    .din0(WH_in_assign_reg_423),
    .din1(co_1_read_reg_387),
    .dout(mul9_i_i_fu_267_p2)
);

Conv_sysarr_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U93(
    .din0(bound_fu_277_p0),
    .din1(bound_fu_277_p1),
    .dout(bound_fu_277_p2)
);

Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mac_muladd_9s_9s_9ns_9_4_1_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ho_dout),
    .din1(grp_fu_359_p1),
    .din2(ro_read_reg_402),
    .ce(grp_fu_359_ce),
    .dout(grp_fu_359_p3)
);

Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mac_muladd_9s_9s_9ns_9_4_1_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(wo_dout),
    .din1(grp_fu_366_p1),
    .din2(so_read_reg_407),
    .ce(grp_fu_366_ce),
    .dout(grp_fu_366_p3)
);

Conv_sysarr_ama_addmuladd_9ns_9s_9s_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
ama_addmuladd_9ns_9s_9s_9ns_9_4_1_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_373_p0),
    .din1(tmp_reg_445),
    .din2(WH_in_assign_reg_423),
    .din3(empty_40_reg_479_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_373_p4)
);

Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mac_muladd_9s_9s_9ns_9_4_1_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln30_reg_429),
    .din1(trunc_ln32_fu_321_p1),
    .din2(empty_40_reg_479_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_381_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_reg_460 == 1'd0))) begin
        hi_reg_237 <= select_ln32_1_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hi_reg_237 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_fu_283_p2 == 1'd0))) begin
        indvar_flatten_reg_226 <= add_ln32_2_fu_288_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_226 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_fu_283_p2 == 1'd0))) begin
        wi_reg_248 <= add_ln34_fu_334_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        wi_reg_248 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        TILESIZE_H_assign_reg_412 <= empty_25_dout;
        TILESIZE_W_assign_reg_417 <= empty_26_dout;
        WH_in_assign_reg_423 <= empty_dout;
        co_1_read_reg_387 <= co_1_dout;
        ro_read_reg_402 <= ro_dout;
        so_read_reg_407 <= so_dout;
        trunc_ln30_reg_429 <= trunc_ln30_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln32_reg_460_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add17_i_i_reg_490 <= grp_fu_381_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_455 <= bound_fu_277_p2;
        mul9_i_i_reg_440 <= mul9_i_i_fu_267_p2;
        tmp2_reg_450 <= grp_fu_366_p3;
        tmp_reg_445 <= grp_fu_359_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_fu_283_p2 == 1'd0))) begin
        empty_40_reg_479 <= empty_40_fu_330_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_40_reg_479_pp0_iter1_reg <= empty_40_reg_479;
        icmp_ln32_reg_460 <= icmp_ln32_fu_283_p2;
        icmp_ln32_reg_460_pp0_iter1_reg <= icmp_ln32_reg_460;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln32_reg_460_pp0_iter2_reg <= icmp_ln32_reg_460_pp0_iter1_reg;
        icmp_ln32_reg_460_pp0_iter3_reg <= icmp_ln32_reg_460_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln32_fu_283_p2 == 1'd0))) begin
        select_ln32_1_reg_469 <= select_ln32_1_fu_313_p3;
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_283_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln32_reg_460 == 1'd0))) begin
        ap_phi_mux_hi_phi_fu_241_p4 = select_ln32_1_reg_469;
    end else begin
        ap_phi_mux_hi_phi_fu_241_p4 = hi_reg_237;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_blk_n = co_1_empty_n;
    end else begin
        co_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_read = 1'b1;
    end else begin
        co_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_0_ce0 = 1'b1;
    end else begin
        data_l1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln32_reg_460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_0_we0 = 1'b1;
    end else begin
        data_l1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_1_ce0 = 1'b1;
    end else begin
        data_l1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln32_reg_460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_1_we0 = 1'b1;
    end else begin
        data_l1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_2_ce0 = 1'b1;
    end else begin
        data_l1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln32_reg_460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_2_we0 = 1'b1;
    end else begin
        data_l1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_3_ce0 = 1'b1;
    end else begin
        data_l1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln32_reg_460_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_3_we0 = 1'b1;
    end else begin
        data_l1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_0_ce0 = 1'b1;
    end else begin
        data_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_1_ce0 = 1'b1;
    end else begin
        data_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_2_ce0 = 1'b1;
    end else begin
        data_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_3_ce0 = 1'b1;
    end else begin
        data_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_25_blk_n = empty_25_empty_n;
    end else begin
        empty_25_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_25_read = 1'b1;
    end else begin
        empty_25_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_26_blk_n = empty_26_empty_n;
    end else begin
        empty_26_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_26_read = 1'b1;
    end else begin
        empty_26_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_blk_n = empty_empty_n;
    end else begin
        empty_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_read = 1'b1;
    end else begin
        empty_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_pp0_stage0) | ((1'b1 == ap_CS_fsm_state1) & ((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0))))) begin
        grp_fu_359_ce = 1'b0;
    end else begin
        grp_fu_359_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_pp0_stage0) | ((1'b1 == ap_CS_fsm_state1) & ((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0))))) begin
        grp_fu_366_ce = 1'b0;
    end else begin
        grp_fu_366_ce = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ho_blk_n = ho_empty_n;
    end else begin
        ho_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ho_read = 1'b1;
    end else begin
        ho_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_blk_n = ro_empty_n;
    end else begin
        ro_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_read = 1'b1;
    end else begin
        ro_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_blk_n = so_empty_n;
    end else begin
        so_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_read = 1'b1;
    end else begin
        so_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        wo_blk_n = wo_empty_n;
    end else begin
        wo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        wo_read = 1'b1;
    end else begin
        wo_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_fu_283_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_fu_283_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add13_i_i_fu_340_p2 = ($signed(grp_fu_373_p4) + $signed(tmp2_reg_450));

assign add_ln32_2_fu_288_p2 = (indvar_flatten_reg_226 + 64'd1);

assign add_ln32_3_fu_307_p2 = (32'd1 + ap_phi_mux_hi_phi_fu_241_p4);

assign add_ln34_fu_334_p2 = (32'd1 + select_ln32_fu_299_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((wo_empty_n == 1'b0) | (ho_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_26_empty_n == 1'b0) | (empty_25_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (empty_empty_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_277_p0 = bound_fu_277_p00;

assign bound_fu_277_p00 = TILESIZE_H_assign_reg_412;

assign bound_fu_277_p1 = bound_fu_277_p10;

assign bound_fu_277_p10 = TILESIZE_W_assign_reg_417;

assign data_l1_0_address0 = idxprom18_i_i_fu_352_p1;

assign data_l1_0_d0 = data_l2_0_q0;

assign data_l1_1_address0 = idxprom18_i_i_fu_352_p1;

assign data_l1_1_d0 = data_l2_1_q0;

assign data_l1_2_address0 = idxprom18_i_i_fu_352_p1;

assign data_l1_2_d0 = data_l2_2_q0;

assign data_l1_3_address0 = idxprom18_i_i_fu_352_p1;

assign data_l1_3_d0 = data_l2_3_q0;

assign data_l2_0_address0 = idxprom_i_i_fu_344_p1;

assign data_l2_1_address0 = idxprom_i_i_fu_344_p1;

assign data_l2_2_address0 = idxprom_i_i_fu_344_p1;

assign data_l2_3_address0 = idxprom_i_i_fu_344_p1;

assign empty_40_fu_330_p1 = select_ln32_fu_299_p3[8:0];

assign grp_fu_359_p1 = empty_25_dout[8:0];

assign grp_fu_366_p1 = empty_26_dout[8:0];

assign grp_fu_373_p0 = ($signed(mul9_i_i_reg_440) + $signed(trunc_ln32_fu_321_p1));

assign icmp_ln32_fu_283_p2 = ((indvar_flatten_reg_226 == bound_reg_455) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_294_p2 = ((wi_reg_248 == TILESIZE_W_assign_reg_417) ? 1'b1 : 1'b0);

assign idxprom18_i_i_fu_352_p1 = $unsigned(add17_i_i_reg_490);

assign idxprom_i_i_fu_344_p1 = add13_i_i_fu_340_p2;

assign select_ln32_1_fu_313_p3 = ((icmp_ln34_fu_294_p2[0:0] === 1'b1) ? add_ln32_3_fu_307_p2 : ap_phi_mux_hi_phi_fu_241_p4);

assign select_ln32_fu_299_p3 = ((icmp_ln34_fu_294_p2[0:0] === 1'b1) ? 32'd0 : wi_reg_248);

assign trunc_ln30_fu_259_p1 = empty_26_dout[8:0];

assign trunc_ln32_fu_321_p1 = select_ln32_1_fu_313_p3[8:0];

endmodule //Conv_sysarr_runDataL2toL1
