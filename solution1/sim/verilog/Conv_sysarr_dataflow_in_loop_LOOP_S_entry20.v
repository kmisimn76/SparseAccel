// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_dataflow_in_loop_LOOP_S_entry20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        ko_2,
        co_1,
        r,
        s,
        p_read2,
        p_read3,
        p_out_din,
        p_out_full_n,
        p_out_write,
        p_out1_din,
        p_out1_full_n,
        p_out1_write,
        ko_2_out_din,
        ko_2_out_full_n,
        ko_2_out_write,
        co_1_out_din,
        co_1_out_full_n,
        co_1_out_write,
        co_1_out2_din,
        co_1_out2_full_n,
        co_1_out2_write,
        r_out_din,
        r_out_full_n,
        r_out_write,
        r_out3_din,
        r_out3_full_n,
        r_out3_write,
        s_out_din,
        s_out_full_n,
        s_out_write,
        s_out4_din,
        s_out4_full_n,
        s_out4_write,
        p_out5_din,
        p_out5_full_n,
        p_out5_write,
        p_out6_din,
        p_out6_full_n,
        p_out6_write,
        p_out7_din,
        p_out7_full_n,
        p_out7_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] p_read;
input  [8:0] p_read1;
input  [8:0] ko_2;
input  [9:0] co_1;
input  [31:0] r;
input  [31:0] s;
input  [31:0] p_read2;
input  [9:0] p_read3;
output  [8:0] p_out_din;
input   p_out_full_n;
output   p_out_write;
output  [8:0] p_out1_din;
input   p_out1_full_n;
output   p_out1_write;
output  [8:0] ko_2_out_din;
input   ko_2_out_full_n;
output   ko_2_out_write;
output  [6:0] co_1_out_din;
input   co_1_out_full_n;
output   co_1_out_write;
output  [9:0] co_1_out2_din;
input   co_1_out2_full_n;
output   co_1_out2_write;
output  [31:0] r_out_din;
input   r_out_full_n;
output   r_out_write;
output  [9:0] r_out3_din;
input   r_out3_full_n;
output   r_out3_write;
output  [31:0] s_out_din;
input   s_out_full_n;
output   s_out_write;
output  [9:0] s_out4_din;
input   s_out4_full_n;
output   s_out4_write;
output  [31:0] p_out5_din;
input   p_out5_full_n;
output   p_out5_write;
output  [31:0] p_out6_din;
input   p_out6_full_n;
output   p_out6_write;
output  [9:0] p_out7_din;
input   p_out7_full_n;
output   p_out7_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_out_write;
reg p_out1_write;
reg ko_2_out_write;
reg co_1_out_write;
reg co_1_out2_write;
reg r_out_write;
reg r_out3_write;
reg s_out_write;
reg s_out4_write;
reg p_out5_write;
reg p_out6_write;
reg p_out7_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_out_blk_n;
reg    p_out1_blk_n;
reg    ko_2_out_blk_n;
reg    co_1_out_blk_n;
reg    co_1_out2_blk_n;
reg    r_out_blk_n;
reg    r_out3_blk_n;
reg    s_out_blk_n;
reg    s_out4_blk_n;
reg    p_out5_blk_n;
reg    p_out6_blk_n;
reg    p_out7_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_out2_blk_n = co_1_out2_full_n;
    end else begin
        co_1_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_out2_write = 1'b1;
    end else begin
        co_1_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_out_blk_n = co_1_out_full_n;
    end else begin
        co_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_out_write = 1'b1;
    end else begin
        co_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_2_out_blk_n = ko_2_out_full_n;
    end else begin
        ko_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_2_out_write = 1'b1;
    end else begin
        ko_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out1_blk_n = p_out1_full_n;
    end else begin
        p_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out1_write = 1'b1;
    end else begin
        p_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out5_blk_n = p_out5_full_n;
    end else begin
        p_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out5_write = 1'b1;
    end else begin
        p_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out6_blk_n = p_out6_full_n;
    end else begin
        p_out6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out6_write = 1'b1;
    end else begin
        p_out6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out7_blk_n = p_out7_full_n;
    end else begin
        p_out7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out7_write = 1'b1;
    end else begin
        p_out7_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_blk_n = p_out_full_n;
    end else begin
        p_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_write = 1'b1;
    end else begin
        p_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_out3_blk_n = r_out3_full_n;
    end else begin
        r_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_out3_write = 1'b1;
    end else begin
        r_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_out_blk_n = r_out_full_n;
    end else begin
        r_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_out_write = 1'b1;
    end else begin
        r_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_out4_blk_n = s_out4_full_n;
    end else begin
        s_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_out4_write = 1'b1;
    end else begin
        s_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_out_blk_n = s_out_full_n;
    end else begin
        s_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_out_write = 1'b1;
    end else begin
        s_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((p_out7_full_n == 1'b0) | (p_out6_full_n == 1'b0) | (ap_start == 1'b0) | (p_out5_full_n == 1'b0) | (s_out4_full_n == 1'b0) | (s_out_full_n == 1'b0) | (r_out3_full_n == 1'b0) | (r_out_full_n == 1'b0) | (co_1_out2_full_n == 1'b0) | (co_1_out_full_n == 1'b0) | (ko_2_out_full_n == 1'b0) | (p_out1_full_n == 1'b0) | (p_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign co_1_out2_din = co_1;

assign co_1_out_din = co_1[6:0];

assign ko_2_out_din = ko_2;

assign p_out1_din = p_read1;

assign p_out5_din = p_read2;

assign p_out6_din = p_read2;

assign p_out7_din = p_read3;

assign p_out_din = p_read;

assign r_out3_din = r[9:0];

assign r_out_din = r;

assign s_out4_din = s[9:0];

assign s_out_din = s;

endmodule //Conv_sysarr_dataflow_in_loop_LOOP_S_entry20
