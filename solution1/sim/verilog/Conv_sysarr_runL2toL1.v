// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runL2toL1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_l1buf_017_address0,
        data_l1buf_017_ce0,
        data_l1buf_017_we0,
        data_l1buf_017_d0,
        data_l1buf_118_address0,
        data_l1buf_118_ce0,
        data_l1buf_118_we0,
        data_l1buf_118_d0,
        data_l1buf_219_address0,
        data_l1buf_219_ce0,
        data_l1buf_219_we0,
        data_l1buf_219_d0,
        data_l1buf_320_address0,
        data_l1buf_320_ce0,
        data_l1buf_320_we0,
        data_l1buf_320_d0,
        data_l2_0_address0,
        data_l2_0_ce0,
        data_l2_0_q0,
        data_l2_1_address0,
        data_l2_1_ce0,
        data_l2_1_q0,
        data_l2_2_address0,
        data_l2_2_ce0,
        data_l2_2_q0,
        data_l2_3_address0,
        data_l2_3_ce0,
        data_l2_3_q0,
        empty_15_dout,
        empty_15_empty_n,
        empty_15_read,
        co_1_dout,
        co_1_empty_n,
        co_1_read,
        r_dout,
        r_empty_n,
        r_read,
        s_dout,
        s_empty_n,
        s_read,
        empty_dout,
        empty_empty_n,
        empty_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [8:0] data_l1buf_017_address0;
output   data_l1buf_017_ce0;
output   data_l1buf_017_we0;
output  [7:0] data_l1buf_017_d0;
output  [8:0] data_l1buf_118_address0;
output   data_l1buf_118_ce0;
output   data_l1buf_118_we0;
output  [7:0] data_l1buf_118_d0;
output  [8:0] data_l1buf_219_address0;
output   data_l1buf_219_ce0;
output   data_l1buf_219_we0;
output  [7:0] data_l1buf_219_d0;
output  [8:0] data_l1buf_320_address0;
output   data_l1buf_320_ce0;
output   data_l1buf_320_we0;
output  [7:0] data_l1buf_320_d0;
output  [9:0] data_l2_0_address0;
output   data_l2_0_ce0;
input  [7:0] data_l2_0_q0;
output  [9:0] data_l2_1_address0;
output   data_l2_1_ce0;
input  [7:0] data_l2_1_q0;
output  [9:0] data_l2_2_address0;
output   data_l2_2_ce0;
input  [7:0] data_l2_2_q0;
output  [9:0] data_l2_3_address0;
output   data_l2_3_ce0;
input  [7:0] data_l2_3_q0;
input  [31:0] empty_15_dout;
input   empty_15_empty_n;
output   empty_15_read;
input  [9:0] co_1_dout;
input   co_1_empty_n;
output   co_1_read;
input  [9:0] r_dout;
input   r_empty_n;
output   r_read;
input  [9:0] s_dout;
input   s_empty_n;
output   s_read;
input  [9:0] empty_dout;
input   empty_empty_n;
output   empty_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_l1buf_017_ce0;
reg data_l1buf_017_we0;
reg data_l1buf_118_ce0;
reg data_l1buf_118_we0;
reg data_l1buf_219_ce0;
reg data_l1buf_219_we0;
reg data_l1buf_320_ce0;
reg data_l1buf_320_we0;
reg data_l2_0_ce0;
reg data_l2_1_ce0;
reg data_l2_2_ce0;
reg data_l2_3_ce0;
reg empty_15_read;
reg co_1_read;
reg r_read;
reg s_read;
reg empty_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    empty_15_blk_n;
reg    co_1_blk_n;
reg    r_blk_n;
reg    s_blk_n;
reg    empty_blk_n;
reg   [63:0] indvar_flatten_reg_202;
reg   [31:0] hi_reg_213;
reg   [31:0] wi_reg_224;
reg   [9:0] r_read_reg_353;
reg    ap_block_state1;
reg   [9:0] s_read_reg_358;
reg   [31:0] tmp_reg_363;
reg  signed [9:0] tmp_10_reg_368;
wire  signed [8:0] empty_39_fu_235_p1;
reg  signed [8:0] empty_39_reg_373;
wire   [9:0] mul9_i_i_fu_239_p2;
reg   [9:0] mul9_i_i_reg_378;
wire   [63:0] bound_fu_249_p2;
reg   [63:0] bound_reg_383;
wire   [0:0] icmp_ln25_fu_255_p2;
reg   [0:0] icmp_ln25_reg_388;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln25_reg_388_pp0_iter1_reg;
reg   [0:0] icmp_ln25_reg_388_pp0_iter2_reg;
reg   [0:0] icmp_ln25_reg_388_pp0_iter3_reg;
wire   [63:0] add_ln25_2_fu_260_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] select_ln25_1_fu_285_p3;
reg   [31:0] select_ln25_1_reg_397;
wire   [9:0] empty_40_fu_306_p1;
reg   [9:0] empty_40_reg_407;
reg   [9:0] empty_40_reg_407_pp0_iter1_reg;
wire   [8:0] empty_41_fu_310_p1;
reg   [8:0] empty_41_reg_412;
reg   [8:0] empty_41_reg_412_pp0_iter1_reg;
wire   [31:0] add_ln27_fu_314_p2;
wire  signed [8:0] grp_fu_347_p3;
reg  signed [8:0] add17_i_i_reg_422;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] ap_phi_mux_hi_phi_fu_217_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom_i_i_fu_324_p1;
wire   [63:0] idxprom18_i_i_fu_332_p1;
wire   [31:0] bound_fu_249_p0;
wire   [63:0] cast_fu_245_p1;
wire   [31:0] bound_fu_249_p1;
wire   [0:0] icmp_ln27_fu_266_p2;
wire   [31:0] add_ln25_3_fu_279_p2;
wire   [9:0] trunc_ln25_fu_293_p1;
wire   [31:0] select_ln25_fu_271_p3;
wire  signed [9:0] grp_fu_339_p4;
(* use_dsp48 = "no" *) wire   [9:0] add13_i_i_fu_320_p2;
wire   [9:0] grp_fu_339_p0;
wire  signed [8:0] grp_fu_347_p1;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

Conv_sysarr_mul_10s_10s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
mul_10s_10s_10_1_1_U76(
    .din0(empty_dout),
    .din1(co_1_dout),
    .dout(mul9_i_i_fu_239_p2)
);

Conv_sysarr_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U77(
    .din0(bound_fu_249_p0),
    .din1(bound_fu_249_p1),
    .dout(bound_fu_249_p2)
);

Conv_sysarr_ama_addmuladd_10ns_10ns_10s_10ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
ama_addmuladd_10ns_10ns_10s_10ns_10_4_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_339_p0),
    .din1(mul9_i_i_reg_378),
    .din2(tmp_10_reg_368),
    .din3(empty_40_reg_407_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_339_p4)
);

Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mac_muladd_9s_9s_9ns_9_4_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_39_reg_373),
    .din1(grp_fu_347_p1),
    .din2(empty_41_reg_412_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_347_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_388 == 1'd0))) begin
        hi_reg_213 <= select_ln25_1_reg_397;
    end else if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hi_reg_213 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_255_p2 == 1'd0))) begin
        indvar_flatten_reg_202 <= add_ln25_2_fu_260_p2;
    end else if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_202 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_255_p2 == 1'd0))) begin
        wi_reg_224 <= add_ln27_fu_314_p2;
    end else if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        wi_reg_224 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln25_reg_388_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add17_i_i_reg_422 <= grp_fu_347_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_383 <= bound_fu_249_p2;
        empty_39_reg_373 <= empty_39_fu_235_p1;
        mul9_i_i_reg_378 <= mul9_i_i_fu_239_p2;
        r_read_reg_353 <= r_dout;
        s_read_reg_358 <= s_dout;
        tmp_10_reg_368 <= empty_dout;
        tmp_reg_363 <= empty_15_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_255_p2 == 1'd0))) begin
        empty_40_reg_407 <= empty_40_fu_306_p1;
        empty_41_reg_412 <= empty_41_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_40_reg_407_pp0_iter1_reg <= empty_40_reg_407;
        empty_41_reg_412_pp0_iter1_reg <= empty_41_reg_412;
        icmp_ln25_reg_388 <= icmp_ln25_fu_255_p2;
        icmp_ln25_reg_388_pp0_iter1_reg <= icmp_ln25_reg_388;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln25_reg_388_pp0_iter2_reg <= icmp_ln25_reg_388_pp0_iter1_reg;
        icmp_ln25_reg_388_pp0_iter3_reg <= icmp_ln25_reg_388_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_255_p2 == 1'd0))) begin
        select_ln25_1_reg_397 <= select_ln25_1_fu_285_p3;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_255_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln25_reg_388 == 1'd0))) begin
        ap_phi_mux_hi_phi_fu_217_p4 = select_ln25_1_reg_397;
    end else begin
        ap_phi_mux_hi_phi_fu_217_p4 = hi_reg_213;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_blk_n = co_1_empty_n;
    end else begin
        co_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_1_read = 1'b1;
    end else begin
        co_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_017_ce0 = 1'b1;
    end else begin
        data_l1buf_017_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln25_reg_388_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_017_we0 = 1'b1;
    end else begin
        data_l1buf_017_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_118_ce0 = 1'b1;
    end else begin
        data_l1buf_118_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln25_reg_388_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_118_we0 = 1'b1;
    end else begin
        data_l1buf_118_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_219_ce0 = 1'b1;
    end else begin
        data_l1buf_219_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln25_reg_388_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_219_we0 = 1'b1;
    end else begin
        data_l1buf_219_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_320_ce0 = 1'b1;
    end else begin
        data_l1buf_320_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln25_reg_388_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1buf_320_we0 = 1'b1;
    end else begin
        data_l1buf_320_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_0_ce0 = 1'b1;
    end else begin
        data_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_1_ce0 = 1'b1;
    end else begin
        data_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_2_ce0 = 1'b1;
    end else begin
        data_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l2_3_ce0 = 1'b1;
    end else begin
        data_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_15_blk_n = empty_15_empty_n;
    end else begin
        empty_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_15_read = 1'b1;
    end else begin
        empty_15_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_blk_n = empty_empty_n;
    end else begin
        empty_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_read = 1'b1;
    end else begin
        empty_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_blk_n = r_empty_n;
    end else begin
        r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_read = 1'b1;
    end else begin
        r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_255_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_255_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add13_i_i_fu_320_p2 = ($signed(grp_fu_339_p4) + $signed(s_read_reg_358));

assign add_ln25_2_fu_260_p2 = (indvar_flatten_reg_202 + 64'd1);

assign add_ln25_3_fu_279_p2 = (32'd1 + ap_phi_mux_hi_phi_fu_217_p4);

assign add_ln27_fu_314_p2 = (32'd1 + select_ln25_fu_271_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((empty_empty_n == 1'b0) | (s_empty_n == 1'b0) | (ap_start == 1'b0) | (r_empty_n == 1'b0) | (co_1_empty_n == 1'b0) | (empty_15_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_249_p0 = cast_fu_245_p1;

assign bound_fu_249_p1 = cast_fu_245_p1;

assign cast_fu_245_p1 = empty_15_dout;

assign data_l1buf_017_address0 = idxprom18_i_i_fu_332_p1;

assign data_l1buf_017_d0 = data_l2_0_q0;

assign data_l1buf_118_address0 = idxprom18_i_i_fu_332_p1;

assign data_l1buf_118_d0 = data_l2_1_q0;

assign data_l1buf_219_address0 = idxprom18_i_i_fu_332_p1;

assign data_l1buf_219_d0 = data_l2_2_q0;

assign data_l1buf_320_address0 = idxprom18_i_i_fu_332_p1;

assign data_l1buf_320_d0 = data_l2_3_q0;

assign data_l2_0_address0 = idxprom_i_i_fu_324_p1;

assign data_l2_1_address0 = idxprom_i_i_fu_324_p1;

assign data_l2_2_address0 = idxprom_i_i_fu_324_p1;

assign data_l2_3_address0 = idxprom_i_i_fu_324_p1;

assign empty_39_fu_235_p1 = empty_15_dout[8:0];

assign empty_40_fu_306_p1 = select_ln25_fu_271_p3[9:0];

assign empty_41_fu_310_p1 = select_ln25_fu_271_p3[8:0];

assign grp_fu_339_p0 = (r_read_reg_353 + trunc_ln25_fu_293_p1);

assign grp_fu_347_p1 = select_ln25_1_fu_285_p3[8:0];

assign icmp_ln25_fu_255_p2 = ((indvar_flatten_reg_202 == bound_reg_383) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_266_p2 = ((wi_reg_224 == tmp_reg_363) ? 1'b1 : 1'b0);

assign idxprom18_i_i_fu_332_p1 = $unsigned(add17_i_i_reg_422);

assign idxprom_i_i_fu_324_p1 = add13_i_i_fu_320_p2;

assign select_ln25_1_fu_285_p3 = ((icmp_ln27_fu_266_p2[0:0] === 1'b1) ? add_ln25_3_fu_279_p2 : ap_phi_mux_hi_phi_fu_217_p4);

assign select_ln25_fu_271_p3 = ((icmp_ln27_fu_266_p2[0:0] === 1'b1) ? 32'd0 : wi_reg_224);

assign trunc_ln25_fu_293_p1 = select_ln25_1_fu_285_p3[9:0];

endmodule //Conv_sysarr_runL2toL1
