// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runSysArr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weight_regfile_0_0_read,
        weight_regfile_0_1_read,
        weight_regfile_0_2_read,
        weight_regfile_0_3_read,
        weight_regfile_1_0_read,
        weight_regfile_1_1_read,
        weight_regfile_1_2_read,
        weight_regfile_1_3_read,
        weight_regfile_2_0_read,
        weight_regfile_2_1_read,
        weight_regfile_2_2_read,
        weight_regfile_2_3_read,
        weight_regfile_3_0_read,
        weight_regfile_3_1_read,
        weight_regfile_3_2_read,
        weight_regfile_3_3_read,
        data_l1buf_0_address0,
        data_l1buf_0_ce0,
        data_l1buf_0_q0,
        data_l1buf_1_address0,
        data_l1buf_1_ce0,
        data_l1buf_1_q0,
        data_l1buf_2_address0,
        data_l1buf_2_ce0,
        data_l1buf_2_q0,
        data_l1buf_3_address0,
        data_l1buf_3_ce0,
        data_l1buf_3_q0,
        output_l1_pass_0_address0,
        output_l1_pass_0_ce0,
        output_l1_pass_0_we0,
        output_l1_pass_0_d0,
        output_l1_pass_1_address0,
        output_l1_pass_1_ce0,
        output_l1_pass_1_we0,
        output_l1_pass_1_d0,
        output_l1_pass_2_address0,
        output_l1_pass_2_ce0,
        output_l1_pass_2_we0,
        output_l1_pass_2_d0,
        output_l1_pass_3_address0,
        output_l1_pass_3_ce0,
        output_l1_pass_3_we0,
        output_l1_pass_3_d0,
        empty_dout,
        empty_empty_n,
        empty_read,
        ko_2_dout,
        ko_2_empty_n,
        ko_2_read,
        s_dout,
        s_empty_n,
        s_read,
        r_dout,
        r_empty_n,
        r_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] weight_regfile_0_0_read;
input  [7:0] weight_regfile_0_1_read;
input  [7:0] weight_regfile_0_2_read;
input  [7:0] weight_regfile_0_3_read;
input  [7:0] weight_regfile_1_0_read;
input  [7:0] weight_regfile_1_1_read;
input  [7:0] weight_regfile_1_2_read;
input  [7:0] weight_regfile_1_3_read;
input  [7:0] weight_regfile_2_0_read;
input  [7:0] weight_regfile_2_1_read;
input  [7:0] weight_regfile_2_2_read;
input  [7:0] weight_regfile_2_3_read;
input  [7:0] weight_regfile_3_0_read;
input  [7:0] weight_regfile_3_1_read;
input  [7:0] weight_regfile_3_2_read;
input  [7:0] weight_regfile_3_3_read;
output  [8:0] data_l1buf_0_address0;
output   data_l1buf_0_ce0;
input  [7:0] data_l1buf_0_q0;
output  [8:0] data_l1buf_1_address0;
output   data_l1buf_1_ce0;
input  [7:0] data_l1buf_1_q0;
output  [8:0] data_l1buf_2_address0;
output   data_l1buf_2_ce0;
input  [7:0] data_l1buf_2_q0;
output  [8:0] data_l1buf_3_address0;
output   data_l1buf_3_ce0;
input  [7:0] data_l1buf_3_q0;
output  [8:0] output_l1_pass_0_address0;
output   output_l1_pass_0_ce0;
output   output_l1_pass_0_we0;
output  [31:0] output_l1_pass_0_d0;
output  [8:0] output_l1_pass_1_address0;
output   output_l1_pass_1_ce0;
output   output_l1_pass_1_we0;
output  [31:0] output_l1_pass_1_d0;
output  [8:0] output_l1_pass_2_address0;
output   output_l1_pass_2_ce0;
output   output_l1_pass_2_we0;
output  [31:0] output_l1_pass_2_d0;
output  [8:0] output_l1_pass_3_address0;
output   output_l1_pass_3_ce0;
output   output_l1_pass_3_we0;
output  [31:0] output_l1_pass_3_d0;
input  [31:0] empty_dout;
input   empty_empty_n;
output   empty_read;
input  [8:0] ko_2_dout;
input   ko_2_empty_n;
output   ko_2_read;
input  [31:0] s_dout;
input   s_empty_n;
output   s_read;
input  [31:0] r_dout;
input   r_empty_n;
output   r_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_l1buf_0_ce0;
reg data_l1buf_1_ce0;
reg data_l1buf_2_ce0;
reg data_l1buf_3_ce0;
reg output_l1_pass_0_ce0;
reg output_l1_pass_0_we0;
reg output_l1_pass_1_ce0;
reg output_l1_pass_1_we0;
reg output_l1_pass_2_ce0;
reg output_l1_pass_2_we0;
reg output_l1_pass_3_ce0;
reg output_l1_pass_3_we0;
reg empty_read;
reg ko_2_read;
reg s_read;
reg r_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_l1_local_3_ce0;
reg    output_l1_local_3_we0;
wire   [9:0] output_l1_local_3_address1;
reg    output_l1_local_3_ce1;
wire   [31:0] output_l1_local_3_q1;
reg    output_l1_local_2_ce0;
reg    output_l1_local_2_we0;
wire   [9:0] output_l1_local_2_address1;
reg    output_l1_local_2_ce1;
wire   [31:0] output_l1_local_2_q1;
reg    output_l1_local_1_ce0;
reg    output_l1_local_1_we0;
wire   [9:0] output_l1_local_1_address1;
reg    output_l1_local_1_ce1;
wire   [31:0] output_l1_local_1_q1;
reg    output_l1_local_0_ce0;
reg    output_l1_local_0_we0;
wire   [9:0] output_l1_local_0_address1;
reg    output_l1_local_0_ce1;
wire   [31:0] output_l1_local_0_q1;
reg    empty_blk_n;
reg    ko_2_blk_n;
reg    s_blk_n;
reg    r_blk_n;
reg   [31:0] i_reg_570;
wire   [31:0] mul_ln147_fu_581_p2;
reg   [31:0] mul_ln147_reg_1697;
reg    ap_block_state1;
wire   [31:0] add_ln147_fu_587_p2;
reg   [31:0] add_ln147_reg_1705;
wire   [0:0] icmp_ln197_fu_599_p2;
reg   [0:0] icmp_ln197_reg_1710;
wire  signed [15:0] sext_ln86_fu_615_p1;
reg  signed [15:0] sext_ln86_reg_1718;
wire  signed [15:0] sext_ln86_1_fu_619_p1;
reg  signed [15:0] sext_ln86_1_reg_1723;
wire  signed [15:0] sext_ln86_2_fu_623_p1;
reg  signed [15:0] sext_ln86_2_reg_1728;
wire  signed [15:0] sext_ln86_3_fu_627_p1;
reg  signed [15:0] sext_ln86_3_reg_1733;
wire  signed [15:0] sext_ln86_4_fu_631_p1;
reg  signed [15:0] sext_ln86_4_reg_1738;
wire  signed [15:0] sext_ln86_5_fu_635_p1;
reg  signed [15:0] sext_ln86_5_reg_1743;
wire  signed [15:0] sext_ln86_6_fu_639_p1;
reg  signed [15:0] sext_ln86_6_reg_1748;
wire  signed [15:0] sext_ln86_7_fu_643_p1;
reg  signed [15:0] sext_ln86_7_reg_1753;
wire  signed [15:0] sext_ln86_8_fu_647_p1;
reg  signed [15:0] sext_ln86_8_reg_1758;
wire  signed [15:0] sext_ln86_9_fu_651_p1;
reg  signed [15:0] sext_ln86_9_reg_1763;
wire  signed [15:0] sext_ln86_10_fu_655_p1;
reg  signed [15:0] sext_ln86_10_reg_1768;
wire  signed [15:0] sext_ln86_11_fu_659_p1;
reg  signed [15:0] sext_ln86_11_reg_1773;
wire  signed [15:0] sext_ln86_12_fu_663_p1;
reg  signed [15:0] sext_ln86_12_reg_1778;
wire  signed [15:0] sext_ln86_13_fu_667_p1;
reg  signed [15:0] sext_ln86_13_reg_1783;
wire  signed [15:0] sext_ln86_14_fu_671_p1;
reg  signed [15:0] sext_ln86_14_reg_1788;
wire  signed [15:0] sext_ln55_fu_675_p1;
reg  signed [15:0] sext_ln55_reg_1793;
wire   [8:0] add_ln100_4_fu_679_p2;
reg   [8:0] add_ln100_4_reg_1798;
wire   [8:0] add_ln100_5_fu_685_p2;
reg   [8:0] add_ln100_5_reg_1803;
wire   [8:0] add_ln100_6_fu_691_p2;
reg   [8:0] add_ln100_6_reg_1808;
wire   [8:0] add_ln100_7_fu_697_p2;
reg   [8:0] add_ln100_7_reg_1813;
wire   [0:0] icmp_ln55_fu_703_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] add_ln55_fu_708_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [8:0] trunc_ln55_fu_719_p1;
reg   [8:0] trunc_ln55_reg_1827;
wire   [0:0] icmp_ln68_fu_727_p2;
reg   [0:0] icmp_ln68_reg_1840;
reg   [0:0] tmp_reg_1850;
wire   [0:0] tmp_3_fu_775_p3;
reg   [0:0] tmp_3_reg_1860;
wire   [0:0] and_ln93_fu_944_p2;
reg   [0:0] and_ln93_reg_1915;
reg   [9:0] output_l1_local_3_addr_reg_1919;
wire   [0:0] and_ln93_1_fu_986_p2;
reg   [0:0] and_ln93_1_reg_1925;
reg   [9:0] output_l1_local_2_addr_reg_1929;
wire   [0:0] and_ln93_2_fu_1017_p2;
reg   [0:0] and_ln93_2_reg_1935;
reg   [9:0] output_l1_local_1_addr_reg_1939;
wire   [0:0] and_ln93_3_fu_1034_p2;
reg   [0:0] and_ln93_3_reg_1945;
reg   [9:0] output_l1_local_0_addr_reg_1949;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln55_fu_714_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln70_fu_739_p1;
wire   [63:0] zext_ln68_fu_750_p1;
wire   [63:0] zext_ln68_1_fu_769_p1;
wire   [63:0] zext_ln93_1_fu_914_p1;
wire   [63:0] zext_ln93_2_fu_956_p1;
wire   [63:0] zext_ln93_fu_903_p1;
wire   [63:0] zext_ln100_fu_1336_p1;
wire   [63:0] zext_ln100_1_fu_1360_p1;
wire   [63:0] zext_ln100_2_fu_1384_p1;
wire   [63:0] zext_ln100_3_fu_1408_p1;
reg  signed [7:0] data_reg_0_0_fu_150;
reg   [7:0] data_reg_0_1_fu_154;
wire  signed [7:0] data_reg_0_1_1_fu_1040_p3;
reg  signed [7:0] ap_sig_allocacmp_data_reg_1_1_1;
reg   [7:0] data_reg_0_2_fu_158;
wire  signed [7:0] data_reg_0_2_1_fu_1047_p3;
reg  signed [7:0] ap_sig_allocacmp_data_reg_1_2_1;
reg   [7:0] data_reg_0_3_fu_162;
wire  signed [7:0] data_reg_0_3_1_fu_1054_p3;
reg  signed [7:0] ap_sig_allocacmp_data_reg_1_3_1;
reg  signed [7:0] data_reg_1_0_fu_166;
reg  signed [7:0] data_reg_1_1_fu_170;
reg  signed [7:0] data_reg_1_2_fu_174;
reg  signed [7:0] data_reg_1_3_fu_178;
reg  signed [7:0] data_reg_2_0_fu_182;
reg  signed [7:0] data_reg_2_1_fu_186;
reg  signed [7:0] data_reg_2_2_fu_190;
reg  signed [7:0] data_reg_2_3_fu_194;
reg  signed [15:0] output_reg_0_0_fu_214;
wire   [15:0] output_reg_0_0_1_fu_1307_p2;
reg  signed [16:0] output_reg_0_1_fu_218;
wire  signed [16:0] grp_fu_1505_p3;
reg  signed [17:0] output_reg_0_2_fu_222;
wire  signed [17:0] grp_fu_1497_p3;
wire  signed [18:0] grp_fu_1488_p3;
reg  signed [15:0] output_reg_1_0_fu_230;
wire   [15:0] output_reg_1_0_1_fu_1225_p2;
reg  signed [16:0] output_reg_1_1_fu_234;
wire  signed [16:0] grp_fu_1480_p3;
reg  signed [17:0] output_reg_1_2_fu_238;
wire  signed [17:0] grp_fu_1472_p3;
wire  signed [18:0] grp_fu_1463_p3;
reg  signed [15:0] output_reg_2_0_fu_246;
wire   [15:0] output_reg_2_0_1_fu_1167_p2;
reg  signed [16:0] output_reg_2_1_fu_250;
wire  signed [16:0] grp_fu_1455_p3;
reg  signed [17:0] output_reg_2_2_fu_254;
wire  signed [17:0] grp_fu_1447_p3;
wire  signed [18:0] grp_fu_1438_p3;
reg  signed [15:0] output_reg_3_0_fu_262;
wire   [15:0] output_reg_3_0_1_fu_1109_p2;
reg  signed [16:0] output_reg_3_1_fu_266;
wire  signed [16:0] grp_fu_1430_p3;
reg  signed [17:0] output_reg_3_2_fu_270;
wire  signed [17:0] grp_fu_1422_p3;
wire  signed [18:0] grp_fu_1413_p3;
wire   [31:0] select_ln197_fu_1323_p3;
wire   [31:0] select_ln197_1_fu_1347_p3;
wire   [31:0] select_ln197_2_fu_1371_p3;
wire   [31:0] select_ln197_3_fu_1395_p3;
wire   [31:0] or_ln197_fu_593_p2;
wire  signed [8:0] mul86_i_i_fu_609_p1;
wire   [8:0] mul86_i_i_fu_609_p2;
wire   [8:0] add_ln70_fu_733_p2;
wire   [32:0] zext_ln55_1_fu_723_p1;
wire   [32:0] add_ln68_fu_744_p2;
wire   [32:0] add_ln68_1_fu_763_p2;
wire   [32:0] empty_30_fu_897_p2;
wire   [32:0] add_ln93_fu_908_p2;
wire   [0:0] tmp_4_fu_919_p3;
wire   [31:0] add_ln93_1_fu_933_p2;
wire   [0:0] icmp_ln93_fu_939_p2;
wire   [0:0] xor_ln93_fu_927_p2;
wire   [32:0] add_ln93_2_fu_950_p2;
wire   [0:0] tmp_5_fu_961_p3;
wire   [31:0] add_ln93_3_fu_975_p2;
wire   [0:0] icmp_ln93_1_fu_981_p2;
wire   [0:0] xor_ln93_1_fu_969_p2;
wire   [0:0] tmp_6_fu_992_p3;
wire   [31:0] add_ln93_4_fu_1006_p2;
wire   [0:0] icmp_ln93_2_fu_1012_p2;
wire   [0:0] xor_ln93_2_fu_1000_p2;
wire   [31:0] add_ln93_5_fu_1023_p2;
wire   [0:0] icmp_ln93_3_fu_1029_p2;
wire   [0:0] xor_ln68_fu_783_p2;
wire  signed [7:0] output_reg_3_0_1_fu_1109_p1;
wire  signed [7:0] output_reg_2_0_1_fu_1167_p1;
wire  signed [7:0] output_reg_1_0_1_fu_1225_p1;
wire  signed [7:0] output_reg_0_0_1_fu_1307_p1;
wire  signed [31:0] sext_ln85_fu_1068_p1;
wire   [31:0] add_ln98_fu_1317_p2;
wire   [8:0] add_ln100_fu_1332_p2;
wire  signed [31:0] sext_ln85_1_fu_1126_p1;
wire   [31:0] add_ln98_1_fu_1341_p2;
wire   [8:0] add_ln100_1_fu_1356_p2;
wire  signed [31:0] sext_ln85_2_fu_1184_p1;
wire   [31:0] add_ln98_2_fu_1365_p2;
wire   [8:0] add_ln100_2_fu_1380_p2;
wire  signed [31:0] sext_ln85_3_fu_1251_p1;
wire   [31:0] add_ln98_3_fu_1389_p2;
wire   [8:0] add_ln100_3_fu_1404_p2;
wire  signed [7:0] grp_fu_1413_p1;
wire  signed [7:0] grp_fu_1422_p1;
wire  signed [7:0] grp_fu_1430_p1;
wire  signed [7:0] grp_fu_1438_p1;
wire  signed [7:0] grp_fu_1447_p1;
wire  signed [7:0] grp_fu_1455_p1;
wire  signed [7:0] grp_fu_1463_p1;
wire  signed [7:0] grp_fu_1472_p1;
wire  signed [7:0] grp_fu_1480_p1;
wire  signed [7:0] grp_fu_1488_p1;
wire  signed [7:0] grp_fu_1497_p1;
wire  signed [7:0] grp_fu_1505_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Conv_sysarr_runSysArr_output_l1_local_3 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
output_l1_local_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l1_local_3_addr_reg_1919),
    .ce0(output_l1_local_3_ce0),
    .we0(output_l1_local_3_we0),
    .d0(select_ln197_fu_1323_p3),
    .address1(output_l1_local_3_address1),
    .ce1(output_l1_local_3_ce1),
    .q1(output_l1_local_3_q1)
);

Conv_sysarr_runSysArr_output_l1_local_3 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
output_l1_local_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l1_local_2_addr_reg_1929),
    .ce0(output_l1_local_2_ce0),
    .we0(output_l1_local_2_we0),
    .d0(select_ln197_1_fu_1347_p3),
    .address1(output_l1_local_2_address1),
    .ce1(output_l1_local_2_ce1),
    .q1(output_l1_local_2_q1)
);

Conv_sysarr_runSysArr_output_l1_local_3 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
output_l1_local_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l1_local_1_addr_reg_1939),
    .ce0(output_l1_local_1_ce0),
    .we0(output_l1_local_1_we0),
    .d0(select_ln197_2_fu_1371_p3),
    .address1(output_l1_local_1_address1),
    .ce1(output_l1_local_1_ce1),
    .q1(output_l1_local_1_q1)
);

Conv_sysarr_runSysArr_output_l1_local_3 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
output_l1_local_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l1_local_0_addr_reg_1949),
    .ce0(output_l1_local_0_ce0),
    .we0(output_l1_local_0_we0),
    .d0(select_ln197_3_fu_1395_p3),
    .address1(output_l1_local_0_address1),
    .ce1(output_l1_local_0_ce1),
    .q1(output_l1_local_0_q1)
);

Conv_sysarr_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U98(
    .din0(empty_dout),
    .din1(empty_dout),
    .dout(mul_ln147_fu_581_p2)
);

Conv_sysarr_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U99(
    .din0(ko_2_dout),
    .din1(mul86_i_i_fu_609_p1),
    .dout(mul86_i_i_fu_609_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U100(
    .din0(data_reg_2_0_fu_182),
    .din1(output_reg_3_0_1_fu_1109_p1),
    .dout(output_reg_3_0_1_fu_1109_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U101(
    .din0(data_reg_1_0_fu_166),
    .din1(output_reg_2_0_1_fu_1167_p1),
    .dout(output_reg_2_0_1_fu_1167_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U102(
    .din0(data_reg_0_0_fu_150),
    .din1(output_reg_1_0_1_fu_1225_p1),
    .dout(output_reg_1_0_1_fu_1225_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U103(
    .din0(data_l1buf_0_q0),
    .din1(output_reg_0_0_1_fu_1307_p1),
    .dout(output_reg_0_0_1_fu_1307_p2)
);

Conv_sysarr_mac_muladd_8s_8s_18s_19_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_2_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_2_3_fu_194),
    .din1(grp_fu_1413_p1),
    .din2(output_reg_3_2_fu_270),
    .ce(1'b1),
    .dout(grp_fu_1413_p3)
);

Conv_sysarr_mac_muladd_8s_8s_17s_18_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_2_1_U105(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_2_2_fu_190),
    .din1(grp_fu_1422_p1),
    .din2(output_reg_3_1_fu_266),
    .ce(1'b1),
    .dout(grp_fu_1422_p3)
);

Conv_sysarr_mac_muladd_8s_8s_16s_17_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_2_1_U106(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_2_1_fu_186),
    .din1(grp_fu_1430_p1),
    .din2(output_reg_3_0_fu_262),
    .ce(1'b1),
    .dout(grp_fu_1430_p3)
);

Conv_sysarr_mac_muladd_8s_8s_18s_19_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_2_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_1_3_fu_178),
    .din1(grp_fu_1438_p1),
    .din2(output_reg_2_2_fu_254),
    .ce(1'b1),
    .dout(grp_fu_1438_p3)
);

Conv_sysarr_mac_muladd_8s_8s_17s_18_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_2_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_1_2_fu_174),
    .din1(grp_fu_1447_p1),
    .din2(output_reg_2_1_fu_250),
    .ce(1'b1),
    .dout(grp_fu_1447_p3)
);

Conv_sysarr_mac_muladd_8s_8s_16s_17_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_2_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_1_1_fu_170),
    .din1(grp_fu_1455_p1),
    .din2(output_reg_2_0_fu_246),
    .ce(1'b1),
    .dout(grp_fu_1455_p3)
);

Conv_sysarr_mac_muladd_8s_8s_18s_19_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_2_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_data_reg_1_3_1),
    .din1(grp_fu_1463_p1),
    .din2(output_reg_1_2_fu_238),
    .ce(1'b1),
    .dout(grp_fu_1463_p3)
);

Conv_sysarr_mac_muladd_8s_8s_17s_18_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_2_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_data_reg_1_2_1),
    .din1(grp_fu_1472_p1),
    .din2(output_reg_1_1_fu_234),
    .ce(1'b1),
    .dout(grp_fu_1472_p3)
);

Conv_sysarr_mac_muladd_8s_8s_16s_17_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_2_1_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_data_reg_1_1_1),
    .din1(grp_fu_1480_p1),
    .din2(output_reg_1_0_fu_230),
    .ce(1'b1),
    .dout(grp_fu_1480_p3)
);

Conv_sysarr_mac_muladd_8s_8s_18s_19_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_8s_18s_19_1_1_U113(
    .din0(data_reg_0_3_1_fu_1054_p3),
    .din1(grp_fu_1488_p1),
    .din2(output_reg_0_2_fu_222),
    .dout(grp_fu_1488_p3)
);

Conv_sysarr_mac_muladd_8s_8s_17s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_17s_18_1_1_U114(
    .din0(data_reg_0_2_1_fu_1047_p3),
    .din1(grp_fu_1497_p1),
    .din2(output_reg_0_1_fu_218),
    .dout(grp_fu_1497_p3)
);

Conv_sysarr_mac_muladd_8s_8s_16s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_1_1_U115(
    .din0(data_reg_0_1_1_fu_1040_p3),
    .din1(grp_fu_1505_p1),
    .din2(output_reg_0_0_fu_214),
    .dout(grp_fu_1505_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_570 <= add_ln55_fu_708_p2;
    end else if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_570 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln100_4_reg_1798 <= add_ln100_4_fu_679_p2;
        add_ln100_5_reg_1803 <= add_ln100_5_fu_685_p2;
        add_ln100_6_reg_1808 <= add_ln100_6_fu_691_p2;
        add_ln100_7_reg_1813 <= add_ln100_7_fu_697_p2;
        add_ln147_reg_1705 <= add_ln147_fu_587_p2;
        icmp_ln197_reg_1710 <= icmp_ln197_fu_599_p2;
        mul_ln147_reg_1697 <= mul_ln147_fu_581_p2;
        sext_ln55_reg_1793 <= sext_ln55_fu_675_p1;
        sext_ln86_10_reg_1768 <= sext_ln86_10_fu_655_p1;
        sext_ln86_11_reg_1773 <= sext_ln86_11_fu_659_p1;
        sext_ln86_12_reg_1778 <= sext_ln86_12_fu_663_p1;
        sext_ln86_13_reg_1783 <= sext_ln86_13_fu_667_p1;
        sext_ln86_14_reg_1788 <= sext_ln86_14_fu_671_p1;
        sext_ln86_1_reg_1723 <= sext_ln86_1_fu_619_p1;
        sext_ln86_2_reg_1728 <= sext_ln86_2_fu_623_p1;
        sext_ln86_3_reg_1733 <= sext_ln86_3_fu_627_p1;
        sext_ln86_4_reg_1738 <= sext_ln86_4_fu_631_p1;
        sext_ln86_5_reg_1743 <= sext_ln86_5_fu_635_p1;
        sext_ln86_6_reg_1748 <= sext_ln86_6_fu_639_p1;
        sext_ln86_7_reg_1753 <= sext_ln86_7_fu_643_p1;
        sext_ln86_8_reg_1758 <= sext_ln86_8_fu_647_p1;
        sext_ln86_9_reg_1763 <= sext_ln86_9_fu_651_p1;
        sext_ln86_reg_1718 <= sext_ln86_fu_615_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln93_1_reg_1925 <= and_ln93_1_fu_986_p2;
        and_ln93_2_reg_1935 <= and_ln93_2_fu_1017_p2;
        and_ln93_3_reg_1945 <= and_ln93_3_fu_1034_p2;
        and_ln93_reg_1915 <= and_ln93_fu_944_p2;
        icmp_ln68_reg_1840 <= icmp_ln68_fu_727_p2;
        tmp_3_reg_1860 <= add_ln68_1_fu_763_p2[32'd32];
        tmp_reg_1850 <= add_ln68_fu_744_p2[32'd32];
        trunc_ln55_reg_1827 <= trunc_ln55_fu_719_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_reg_0_0_fu_150 <= data_l1buf_0_q0;
        data_reg_0_1_fu_154 <= data_reg_0_1_1_fu_1040_p3;
        data_reg_0_2_fu_158 <= data_reg_0_2_1_fu_1047_p3;
        data_reg_0_3_fu_162 <= data_reg_0_3_1_fu_1054_p3;
        data_reg_1_0_fu_166 <= data_reg_0_0_fu_150;
        data_reg_2_0_fu_182 <= data_reg_1_0_fu_166;
        output_reg_0_0_fu_214 <= output_reg_0_0_1_fu_1307_p2;
        output_reg_0_1_fu_218 <= grp_fu_1505_p3;
        output_reg_0_2_fu_222 <= grp_fu_1497_p3;
        output_reg_1_0_fu_230 <= output_reg_1_0_1_fu_1225_p2;
        output_reg_1_1_fu_234 <= grp_fu_1480_p3;
        output_reg_1_2_fu_238 <= grp_fu_1472_p3;
        output_reg_2_0_fu_246 <= output_reg_2_0_1_fu_1167_p2;
        output_reg_2_1_fu_250 <= grp_fu_1455_p3;
        output_reg_2_2_fu_254 <= grp_fu_1447_p3;
        output_reg_3_0_fu_262 <= output_reg_3_0_1_fu_1109_p2;
        output_reg_3_1_fu_266 <= grp_fu_1430_p3;
        output_reg_3_2_fu_270 <= grp_fu_1422_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_reg_1_1_fu_170 <= ap_sig_allocacmp_data_reg_1_1_1;
        data_reg_1_2_fu_174 <= ap_sig_allocacmp_data_reg_1_2_1;
        data_reg_1_3_fu_178 <= ap_sig_allocacmp_data_reg_1_3_1;
        data_reg_2_1_fu_186 <= data_reg_1_1_fu_170;
        data_reg_2_2_fu_190 <= data_reg_1_2_fu_174;
        data_reg_2_3_fu_194 <= data_reg_1_3_fu_178;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln93_3_fu_1034_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_0_addr_reg_1949 <= zext_ln68_1_fu_769_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln93_2_fu_1017_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_1_addr_reg_1939 <= zext_ln93_fu_903_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln93_1_fu_986_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_2_addr_reg_1929 <= zext_ln93_2_fu_956_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln93_fu_944_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_3_addr_reg_1919 <= zext_ln93_1_fu_914_p1;
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_703_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_data_reg_1_1_1 = data_reg_0_1_1_fu_1040_p3;
    end else begin
        ap_sig_allocacmp_data_reg_1_1_1 = data_reg_0_1_fu_154;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_data_reg_1_2_1 = data_reg_0_2_1_fu_1047_p3;
    end else begin
        ap_sig_allocacmp_data_reg_1_2_1 = data_reg_0_2_fu_158;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_data_reg_1_3_1 = data_reg_0_3_1_fu_1054_p3;
    end else begin
        ap_sig_allocacmp_data_reg_1_3_1 = data_reg_0_3_fu_162;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_l1buf_0_ce0 = 1'b1;
    end else begin
        data_l1buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_l1buf_1_ce0 = 1'b1;
    end else begin
        data_l1buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_l1buf_2_ce0 = 1'b1;
    end else begin
        data_l1buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_l1buf_3_ce0 = 1'b1;
    end else begin
        data_l1buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_blk_n = empty_empty_n;
    end else begin
        empty_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_read = 1'b1;
    end else begin
        empty_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_2_blk_n = ko_2_empty_n;
    end else begin
        ko_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_2_read = 1'b1;
    end else begin
        ko_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_0_ce0 = 1'b1;
    end else begin
        output_l1_local_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_0_ce1 = 1'b1;
    end else begin
        output_l1_local_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_3_reg_1945) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_0_we0 = 1'b1;
    end else begin
        output_l1_local_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_1_ce0 = 1'b1;
    end else begin
        output_l1_local_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_1_ce1 = 1'b1;
    end else begin
        output_l1_local_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_2_reg_1935) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_1_we0 = 1'b1;
    end else begin
        output_l1_local_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_2_ce0 = 1'b1;
    end else begin
        output_l1_local_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_2_ce1 = 1'b1;
    end else begin
        output_l1_local_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_1_reg_1925) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_2_we0 = 1'b1;
    end else begin
        output_l1_local_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_3_ce0 = 1'b1;
    end else begin
        output_l1_local_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_3_ce1 = 1'b1;
    end else begin
        output_l1_local_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_reg_1915) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_local_3_we0 = 1'b1;
    end else begin
        output_l1_local_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_0_ce0 = 1'b1;
    end else begin
        output_l1_pass_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_3_reg_1945) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_0_we0 = 1'b1;
    end else begin
        output_l1_pass_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_1_ce0 = 1'b1;
    end else begin
        output_l1_pass_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_2_reg_1935) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_1_we0 = 1'b1;
    end else begin
        output_l1_pass_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_2_ce0 = 1'b1;
    end else begin
        output_l1_pass_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_1_reg_1925) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_2_we0 = 1'b1;
    end else begin
        output_l1_pass_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_3_ce0 = 1'b1;
    end else begin
        output_l1_pass_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd1 == and_ln93_reg_1915) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_l1_pass_3_we0 = 1'b1;
    end else begin
        output_l1_pass_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_blk_n = r_empty_n;
    end else begin
        r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_read = 1'b1;
    end else begin
        r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln55_fu_703_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln55_fu_703_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_1_fu_1356_p2 = (add_ln100_5_reg_1803 + trunc_ln55_reg_1827);

assign add_ln100_2_fu_1380_p2 = (add_ln100_6_reg_1808 + trunc_ln55_reg_1827);

assign add_ln100_3_fu_1404_p2 = (add_ln100_7_reg_1813 + trunc_ln55_reg_1827);

assign add_ln100_4_fu_679_p2 = ($signed(9'd506) + $signed(mul86_i_i_fu_609_p2));

assign add_ln100_5_fu_685_p2 = ($signed(9'd507) + $signed(mul86_i_i_fu_609_p2));

assign add_ln100_6_fu_691_p2 = ($signed(9'd508) + $signed(mul86_i_i_fu_609_p2));

assign add_ln100_7_fu_697_p2 = ($signed(9'd509) + $signed(mul86_i_i_fu_609_p2));

assign add_ln100_fu_1332_p2 = (add_ln100_4_reg_1798 + trunc_ln55_reg_1827);

assign add_ln147_fu_587_p2 = (32'd6 + mul_ln147_fu_581_p2);

assign add_ln55_fu_708_p2 = (i_reg_570 + 32'd1);

assign add_ln68_1_fu_763_p2 = ($signed(33'd8589934589) + $signed(zext_ln55_1_fu_723_p1));

assign add_ln68_fu_744_p2 = ($signed(33'd8589934590) + $signed(zext_ln55_1_fu_723_p1));

assign add_ln70_fu_733_p2 = ($signed(9'd511) + $signed(trunc_ln55_fu_719_p1));

assign add_ln93_1_fu_933_p2 = ($signed(32'd4294967290) + $signed(i_reg_570));

assign add_ln93_2_fu_950_p2 = ($signed(zext_ln55_1_fu_723_p1) + $signed(33'd8589934587));

assign add_ln93_3_fu_975_p2 = ($signed(i_reg_570) + $signed(32'd4294967291));

assign add_ln93_4_fu_1006_p2 = ($signed(i_reg_570) + $signed(32'd4294967292));

assign add_ln93_5_fu_1023_p2 = ($signed(i_reg_570) + $signed(32'd4294967293));

assign add_ln93_fu_908_p2 = ($signed(33'd8589934586) + $signed(zext_ln55_1_fu_723_p1));

assign add_ln98_1_fu_1341_p2 = ($signed(output_l1_local_2_q1) + $signed(sext_ln85_1_fu_1126_p1));

assign add_ln98_2_fu_1365_p2 = ($signed(output_l1_local_1_q1) + $signed(sext_ln85_2_fu_1184_p1));

assign add_ln98_3_fu_1389_p2 = ($signed(output_l1_local_0_q1) + $signed(sext_ln85_3_fu_1251_p1));

assign add_ln98_fu_1317_p2 = ($signed(output_l1_local_3_q1) + $signed(sext_ln85_fu_1068_p1));

assign and_ln93_1_fu_986_p2 = (xor_ln93_1_fu_969_p2 & icmp_ln93_1_fu_981_p2);

assign and_ln93_2_fu_1017_p2 = (xor_ln93_2_fu_1000_p2 & icmp_ln93_2_fu_1012_p2);

assign and_ln93_3_fu_1034_p2 = (xor_ln68_fu_783_p2 & icmp_ln93_3_fu_1029_p2);

assign and_ln93_fu_944_p2 = (xor_ln93_fu_927_p2 & icmp_ln93_fu_939_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ko_2_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1) | (r_empty_n == 1'b0) | (s_empty_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_l1buf_0_address0 = zext_ln55_fu_714_p1;

assign data_l1buf_1_address0 = zext_ln70_fu_739_p1;

assign data_l1buf_2_address0 = zext_ln68_fu_750_p1;

assign data_l1buf_3_address0 = zext_ln68_1_fu_769_p1;

assign data_reg_0_1_1_fu_1040_p3 = ((icmp_ln68_reg_1840[0:0] === 1'b1) ? 8'd0 : data_l1buf_1_q0);

assign data_reg_0_2_1_fu_1047_p3 = ((tmp_reg_1850[0:0] === 1'b1) ? 8'd0 : data_l1buf_2_q0);

assign data_reg_0_3_1_fu_1054_p3 = ((tmp_3_reg_1860[0:0] === 1'b1) ? 8'd0 : data_l1buf_3_q0);

assign empty_30_fu_897_p2 = ($signed(33'd8589934588) + $signed(zext_ln55_1_fu_723_p1));

assign grp_fu_1413_p1 = sext_ln86_reg_1718;

assign grp_fu_1422_p1 = sext_ln86_1_reg_1723;

assign grp_fu_1430_p1 = sext_ln86_2_reg_1728;

assign grp_fu_1438_p1 = sext_ln86_4_reg_1738;

assign grp_fu_1447_p1 = sext_ln86_5_reg_1743;

assign grp_fu_1455_p1 = sext_ln86_6_reg_1748;

assign grp_fu_1463_p1 = sext_ln86_8_reg_1758;

assign grp_fu_1472_p1 = sext_ln86_9_reg_1763;

assign grp_fu_1480_p1 = sext_ln86_10_reg_1768;

assign grp_fu_1488_p1 = sext_ln86_12_reg_1778;

assign grp_fu_1497_p1 = sext_ln86_13_reg_1783;

assign grp_fu_1505_p1 = sext_ln86_14_reg_1788;

assign icmp_ln197_fu_599_p2 = ((or_ln197_fu_593_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_703_p2 = ((i_reg_570 == add_ln147_reg_1705) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_727_p2 = ((i_reg_570 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_1_fu_981_p2 = ((add_ln93_3_fu_975_p2 < mul_ln147_reg_1697) ? 1'b1 : 1'b0);

assign icmp_ln93_2_fu_1012_p2 = ((add_ln93_4_fu_1006_p2 < mul_ln147_reg_1697) ? 1'b1 : 1'b0);

assign icmp_ln93_3_fu_1029_p2 = ((add_ln93_5_fu_1023_p2 < mul_ln147_reg_1697) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_939_p2 = ((add_ln93_1_fu_933_p2 < mul_ln147_reg_1697) ? 1'b1 : 1'b0);

assign mul86_i_i_fu_609_p1 = mul_ln147_fu_581_p2[8:0];

assign or_ln197_fu_593_p2 = (s_dout | r_dout);

assign output_l1_local_0_address1 = zext_ln68_1_fu_769_p1;

assign output_l1_local_1_address1 = zext_ln93_fu_903_p1;

assign output_l1_local_2_address1 = zext_ln93_2_fu_956_p1;

assign output_l1_local_3_address1 = zext_ln93_1_fu_914_p1;

assign output_l1_pass_0_address0 = zext_ln100_3_fu_1408_p1;

assign output_l1_pass_0_d0 = select_ln197_3_fu_1395_p3;

assign output_l1_pass_1_address0 = zext_ln100_2_fu_1384_p1;

assign output_l1_pass_1_d0 = select_ln197_2_fu_1371_p3;

assign output_l1_pass_2_address0 = zext_ln100_1_fu_1360_p1;

assign output_l1_pass_2_d0 = select_ln197_1_fu_1347_p3;

assign output_l1_pass_3_address0 = zext_ln100_fu_1336_p1;

assign output_l1_pass_3_d0 = select_ln197_fu_1323_p3;

assign output_reg_0_0_1_fu_1307_p1 = sext_ln55_reg_1793;

assign output_reg_1_0_1_fu_1225_p1 = sext_ln86_11_reg_1773;

assign output_reg_2_0_1_fu_1167_p1 = sext_ln86_7_reg_1753;

assign output_reg_3_0_1_fu_1109_p1 = sext_ln86_3_reg_1733;

assign select_ln197_1_fu_1347_p3 = ((icmp_ln197_reg_1710[0:0] === 1'b1) ? sext_ln85_1_fu_1126_p1 : add_ln98_1_fu_1341_p2);

assign select_ln197_2_fu_1371_p3 = ((icmp_ln197_reg_1710[0:0] === 1'b1) ? sext_ln85_2_fu_1184_p1 : add_ln98_2_fu_1365_p2);

assign select_ln197_3_fu_1395_p3 = ((icmp_ln197_reg_1710[0:0] === 1'b1) ? sext_ln85_3_fu_1251_p1 : add_ln98_3_fu_1389_p2);

assign select_ln197_fu_1323_p3 = ((icmp_ln197_reg_1710[0:0] === 1'b1) ? sext_ln85_fu_1068_p1 : add_ln98_fu_1317_p2);

assign sext_ln55_fu_675_p1 = $signed(weight_regfile_0_0_read);

assign sext_ln85_1_fu_1126_p1 = grp_fu_1438_p3;

assign sext_ln85_2_fu_1184_p1 = grp_fu_1463_p3;

assign sext_ln85_3_fu_1251_p1 = grp_fu_1488_p3;

assign sext_ln85_fu_1068_p1 = grp_fu_1413_p3;

assign sext_ln86_10_fu_655_p1 = $signed(weight_regfile_1_1_read);

assign sext_ln86_11_fu_659_p1 = $signed(weight_regfile_1_0_read);

assign sext_ln86_12_fu_663_p1 = $signed(weight_regfile_0_3_read);

assign sext_ln86_13_fu_667_p1 = $signed(weight_regfile_0_2_read);

assign sext_ln86_14_fu_671_p1 = $signed(weight_regfile_0_1_read);

assign sext_ln86_1_fu_619_p1 = $signed(weight_regfile_3_2_read);

assign sext_ln86_2_fu_623_p1 = $signed(weight_regfile_3_1_read);

assign sext_ln86_3_fu_627_p1 = $signed(weight_regfile_3_0_read);

assign sext_ln86_4_fu_631_p1 = $signed(weight_regfile_2_3_read);

assign sext_ln86_5_fu_635_p1 = $signed(weight_regfile_2_2_read);

assign sext_ln86_6_fu_639_p1 = $signed(weight_regfile_2_1_read);

assign sext_ln86_7_fu_643_p1 = $signed(weight_regfile_2_0_read);

assign sext_ln86_8_fu_647_p1 = $signed(weight_regfile_1_3_read);

assign sext_ln86_9_fu_651_p1 = $signed(weight_regfile_1_2_read);

assign sext_ln86_fu_615_p1 = $signed(weight_regfile_3_3_read);

assign tmp_3_fu_775_p3 = add_ln68_1_fu_763_p2[32'd32];

assign tmp_4_fu_919_p3 = add_ln93_fu_908_p2[32'd32];

assign tmp_5_fu_961_p3 = add_ln93_2_fu_950_p2[32'd32];

assign tmp_6_fu_992_p3 = empty_30_fu_897_p2[32'd32];

assign trunc_ln55_fu_719_p1 = i_reg_570[8:0];

assign xor_ln68_fu_783_p2 = (tmp_3_fu_775_p3 ^ 1'd1);

assign xor_ln93_1_fu_969_p2 = (tmp_5_fu_961_p3 ^ 1'd1);

assign xor_ln93_2_fu_1000_p2 = (tmp_6_fu_992_p3 ^ 1'd1);

assign xor_ln93_fu_927_p2 = (tmp_4_fu_919_p3 ^ 1'd1);

assign zext_ln100_1_fu_1360_p1 = add_ln100_1_fu_1356_p2;

assign zext_ln100_2_fu_1384_p1 = add_ln100_2_fu_1380_p2;

assign zext_ln100_3_fu_1408_p1 = add_ln100_3_fu_1404_p2;

assign zext_ln100_fu_1336_p1 = add_ln100_fu_1332_p2;

assign zext_ln55_1_fu_723_p1 = i_reg_570;

assign zext_ln55_fu_714_p1 = i_reg_570;

assign zext_ln68_1_fu_769_p1 = add_ln68_1_fu_763_p2;

assign zext_ln68_fu_750_p1 = add_ln68_fu_744_p2;

assign zext_ln70_fu_739_p1 = add_ln70_fu_733_p2;

assign zext_ln93_1_fu_914_p1 = add_ln93_fu_908_p2;

assign zext_ln93_2_fu_956_p1 = add_ln93_2_fu_950_p2;

assign zext_ln93_fu_903_p1 = empty_30_fu_897_p2;

endmodule //Conv_sysarr_runSysArr
