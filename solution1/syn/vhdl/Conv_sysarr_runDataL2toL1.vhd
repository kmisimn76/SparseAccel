-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runDataL2toL1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_l1_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1_0_ce0 : OUT STD_LOGIC;
    data_l1_0_we0 : OUT STD_LOGIC;
    data_l1_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l1_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1_1_ce0 : OUT STD_LOGIC;
    data_l1_1_we0 : OUT STD_LOGIC;
    data_l1_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l1_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1_2_ce0 : OUT STD_LOGIC;
    data_l1_2_we0 : OUT STD_LOGIC;
    data_l1_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l1_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1_3_ce0 : OUT STD_LOGIC;
    data_l1_3_we0 : OUT STD_LOGIC;
    data_l1_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_l2_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l2_0_ce0 : OUT STD_LOGIC;
    data_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l2_1_ce0 : OUT STD_LOGIC;
    data_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l2_2_ce0 : OUT STD_LOGIC;
    data_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l2_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l2_3_ce0 : OUT STD_LOGIC;
    data_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_25_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_25_empty_n : IN STD_LOGIC;
    empty_25_read : OUT STD_LOGIC;
    empty_26_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_26_empty_n : IN STD_LOGIC;
    empty_26_read : OUT STD_LOGIC;
    co_1_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    co_1_empty_n : IN STD_LOGIC;
    co_1_read : OUT STD_LOGIC;
    ho_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    ho_empty_n : IN STD_LOGIC;
    ho_read : OUT STD_LOGIC;
    wo_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    wo_empty_n : IN STD_LOGIC;
    wo_read : OUT STD_LOGIC;
    ro_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    ro_empty_n : IN STD_LOGIC;
    ro_read : OUT STD_LOGIC;
    so_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    so_empty_n : IN STD_LOGIC;
    so_read : OUT STD_LOGIC;
    empty_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    empty_empty_n : IN STD_LOGIC;
    empty_read : OUT STD_LOGIC );
end;


architecture behav of Conv_sysarr_runDataL2toL1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_25_blk_n : STD_LOGIC;
    signal empty_26_blk_n : STD_LOGIC;
    signal co_1_blk_n : STD_LOGIC;
    signal ho_blk_n : STD_LOGIC;
    signal wo_blk_n : STD_LOGIC;
    signal ro_blk_n : STD_LOGIC;
    signal so_blk_n : STD_LOGIC;
    signal empty_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_226 : STD_LOGIC_VECTOR (63 downto 0);
    signal hi_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal wi_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal co_1_read_reg_387 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ro_read_reg_402 : STD_LOGIC_VECTOR (8 downto 0);
    signal so_read_reg_407 : STD_LOGIC_VECTOR (8 downto 0);
    signal TILESIZE_H_assign_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal TILESIZE_W_assign_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal WH_in_assign_reg_423 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln30_fu_259_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln30_reg_429 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul9_i_i_fu_267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul9_i_i_reg_440 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_359_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_445 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_366_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_450 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln32_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_460_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_460_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_460_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_2_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln32_1_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_1_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln32_fu_321_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_40_fu_330_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_40_reg_479 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_40_reg_479_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln34_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add17_i_i_reg_490 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_hi_phi_fu_241_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal idxprom_i_i_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom18_i_i_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_3_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add13_i_i_fu_340_p2 : STD_LOGIC_VECTOR (8 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add13_i_i_fu_340_p2 : signal is "no";
    signal grp_fu_359_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_366_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_373_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_359_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_366_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_277_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_277_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component Conv_sysarr_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_ama_addmuladd_9ns_9s_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    mul_9s_9s_9_1_1_U92 : component Conv_sysarr_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => WH_in_assign_reg_423,
        din1 => co_1_read_reg_387,
        dout => mul9_i_i_fu_267_p2);

    mul_32ns_32ns_64_1_1_U93 : component Conv_sysarr_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => bound_fu_277_p0,
        din1 => bound_fu_277_p1,
        dout => bound_fu_277_p2);

    mac_muladd_9s_9s_9ns_9_4_1_U94 : component Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ho_dout,
        din1 => grp_fu_359_p1,
        din2 => ro_read_reg_402,
        ce => grp_fu_359_ce,
        dout => grp_fu_359_p3);

    mac_muladd_9s_9s_9ns_9_4_1_U95 : component Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => wo_dout,
        din1 => grp_fu_366_p1,
        din2 => so_read_reg_407,
        ce => grp_fu_366_ce,
        dout => grp_fu_366_p3);

    ama_addmuladd_9ns_9s_9s_9ns_9_4_1_U96 : component Conv_sysarr_ama_addmuladd_9ns_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_373_p0,
        din1 => tmp_reg_445,
        din2 => WH_in_assign_reg_423,
        din3 => empty_40_reg_479_pp0_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p4);

    mac_muladd_9s_9s_9ns_9_4_1_U97 : component Conv_sysarr_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln30_reg_429,
        din1 => trunc_ln32_fu_321_p1,
        din2 => empty_40_reg_479_pp0_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hi_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_reg_460 = ap_const_lv1_0))) then 
                hi_reg_237 <= select_ln32_1_reg_469;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                hi_reg_237 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_fu_283_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_226 <= add_ln32_2_fu_288_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_226 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    wi_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_fu_283_p2 = ap_const_lv1_0))) then 
                wi_reg_248 <= add_ln34_fu_334_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                wi_reg_248 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                TILESIZE_H_assign_reg_412 <= empty_25_dout;
                TILESIZE_W_assign_reg_417 <= empty_26_dout;
                WH_in_assign_reg_423 <= empty_dout;
                co_1_read_reg_387 <= co_1_dout;
                ro_read_reg_402 <= ro_dout;
                so_read_reg_407 <= so_dout;
                trunc_ln30_reg_429 <= trunc_ln30_fu_259_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln32_reg_460_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add17_i_i_reg_490 <= grp_fu_381_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_455 <= bound_fu_277_p2;
                mul9_i_i_reg_440 <= mul9_i_i_fu_267_p2;
                tmp2_reg_450 <= grp_fu_366_p3;
                tmp_reg_445 <= grp_fu_359_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_fu_283_p2 = ap_const_lv1_0))) then
                empty_40_reg_479 <= empty_40_fu_330_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_40_reg_479_pp0_iter1_reg <= empty_40_reg_479;
                icmp_ln32_reg_460 <= icmp_ln32_fu_283_p2;
                icmp_ln32_reg_460_pp0_iter1_reg <= icmp_ln32_reg_460;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln32_reg_460_pp0_iter2_reg <= icmp_ln32_reg_460_pp0_iter1_reg;
                icmp_ln32_reg_460_pp0_iter3_reg <= icmp_ln32_reg_460_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln32_fu_283_p2 = ap_const_lv1_0))) then
                select_ln32_1_reg_469 <= select_ln32_1_fu_313_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n, icmp_ln32_fu_283_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln32_fu_283_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln32_fu_283_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add13_i_i_fu_340_p2 <= std_logic_vector(signed(grp_fu_373_p4) + signed(tmp2_reg_450));
    add_ln32_2_fu_288_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_226) + unsigned(ap_const_lv64_1));
    add_ln32_3_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_hi_phi_fu_241_p4));
    add_ln34_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln32_fu_299_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
                ap_block_state1 <= ((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln32_fu_283_p2)
    begin
        if ((icmp_ln32_fu_283_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_hi_phi_fu_241_p4_assign_proc : process(hi_reg_237, icmp_ln32_reg_460, ap_CS_fsm_pp0_stage0, select_ln32_1_reg_469, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln32_reg_460 = ap_const_lv1_0))) then 
            ap_phi_mux_hi_phi_fu_241_p4 <= select_ln32_1_reg_469;
        else 
            ap_phi_mux_hi_phi_fu_241_p4 <= hi_reg_237;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_277_p0 <= bound_fu_277_p00(32 - 1 downto 0);
    bound_fu_277_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TILESIZE_H_assign_reg_412),64));
    bound_fu_277_p1 <= bound_fu_277_p10(32 - 1 downto 0);
    bound_fu_277_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(TILESIZE_W_assign_reg_417),64));

    co_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_1_blk_n <= co_1_empty_n;
        else 
            co_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    co_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_1_read <= ap_const_logic_1;
        else 
            co_1_read <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_0_address0 <= idxprom18_i_i_fu_352_p1(9 - 1 downto 0);

    data_l1_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_0_ce0 <= ap_const_logic_1;
        else 
            data_l1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_0_d0 <= data_l2_0_q0;

    data_l1_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln32_reg_460_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln32_reg_460_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_0_we0 <= ap_const_logic_1;
        else 
            data_l1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_1_address0 <= idxprom18_i_i_fu_352_p1(9 - 1 downto 0);

    data_l1_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_1_ce0 <= ap_const_logic_1;
        else 
            data_l1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_1_d0 <= data_l2_1_q0;

    data_l1_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln32_reg_460_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln32_reg_460_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_1_we0 <= ap_const_logic_1;
        else 
            data_l1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_2_address0 <= idxprom18_i_i_fu_352_p1(9 - 1 downto 0);

    data_l1_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_2_ce0 <= ap_const_logic_1;
        else 
            data_l1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_2_d0 <= data_l2_2_q0;

    data_l1_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln32_reg_460_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln32_reg_460_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_2_we0 <= ap_const_logic_1;
        else 
            data_l1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_3_address0 <= idxprom18_i_i_fu_352_p1(9 - 1 downto 0);

    data_l1_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_3_ce0 <= ap_const_logic_1;
        else 
            data_l1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1_3_d0 <= data_l2_3_q0;

    data_l1_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln32_reg_460_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln32_reg_460_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1_3_we0 <= ap_const_logic_1;
        else 
            data_l1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_0_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    data_l2_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l2_0_ce0 <= ap_const_logic_1;
        else 
            data_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_1_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    data_l2_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l2_1_ce0 <= ap_const_logic_1;
        else 
            data_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_2_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    data_l2_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l2_2_ce0 <= ap_const_logic_1;
        else 
            data_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_3_address0 <= idxprom_i_i_fu_344_p1(9 - 1 downto 0);

    data_l2_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l2_3_ce0 <= ap_const_logic_1;
        else 
            data_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_25_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_25_blk_n <= empty_25_empty_n;
        else 
            empty_25_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_25_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_25_read <= ap_const_logic_1;
        else 
            empty_25_read <= ap_const_logic_0;
        end if; 
    end process;


    empty_26_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_26_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_26_blk_n <= empty_26_empty_n;
        else 
            empty_26_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_26_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_26_read <= ap_const_logic_1;
        else 
            empty_26_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_40_fu_330_p1 <= select_ln32_fu_299_p3(9 - 1 downto 0);

    empty_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_blk_n <= empty_empty_n;
        else 
            empty_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_read <= ap_const_logic_1;
        else 
            empty_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_359_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))))) then 
            grp_fu_359_ce <= ap_const_logic_0;
        else 
            grp_fu_359_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_359_p1 <= empty_25_dout(9 - 1 downto 0);

    grp_fu_366_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))))) then 
            grp_fu_366_ce <= ap_const_logic_0;
        else 
            grp_fu_366_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_366_p1 <= empty_26_dout(9 - 1 downto 0);
    grp_fu_373_p0 <= std_logic_vector(unsigned(mul9_i_i_reg_440) + unsigned(trunc_ln32_fu_321_p1));

    ho_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ho_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ho_blk_n <= ho_empty_n;
        else 
            ho_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ho_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ho_read <= ap_const_logic_1;
        else 
            ho_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln32_fu_283_p2 <= "1" when (indvar_flatten_reg_226 = bound_reg_455) else "0";
    icmp_ln34_fu_294_p2 <= "1" when (wi_reg_248 = TILESIZE_W_assign_reg_417) else "0";
    idxprom18_i_i_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add17_i_i_reg_490),64));
    idxprom_i_i_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add13_i_i_fu_340_p2),64));

    ro_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_blk_n <= ro_empty_n;
        else 
            ro_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ro_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_read <= ap_const_logic_1;
        else 
            ro_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln32_1_fu_313_p3 <= 
        add_ln32_3_fu_307_p2 when (icmp_ln34_fu_294_p2(0) = '1') else 
        ap_phi_mux_hi_phi_fu_241_p4;
    select_ln32_fu_299_p3 <= 
        ap_const_lv32_0 when (icmp_ln34_fu_294_p2(0) = '1') else 
        wi_reg_248;

    so_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_blk_n <= so_empty_n;
        else 
            so_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    so_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_read <= ap_const_logic_1;
        else 
            so_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln30_fu_259_p1 <= empty_26_dout(9 - 1 downto 0);
    trunc_ln32_fu_321_p1 <= select_ln32_1_fu_313_p3(9 - 1 downto 0);

    wo_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, wo_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            wo_blk_n <= wo_empty_n;
        else 
            wo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    wo_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_25_empty_n, empty_26_empty_n, co_1_empty_n, ho_empty_n, wo_empty_n, ro_empty_n, so_empty_n, empty_empty_n)
    begin
        if ((not(((wo_empty_n = ap_const_logic_0) or (ho_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (empty_26_empty_n = ap_const_logic_0) or (empty_25_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            wo_read <= ap_const_logic_1;
        else 
            wo_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
