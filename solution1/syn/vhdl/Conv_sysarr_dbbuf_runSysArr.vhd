-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_dbbuf_runSysArr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_regfile_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_0_ce0 : OUT STD_LOGIC;
    data_l1buf_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_1_ce0 : OUT STD_LOGIC;
    data_l1buf_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_2_ce0 : OUT STD_LOGIC;
    data_l1buf_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_3_ce0 : OUT STD_LOGIC;
    data_l1buf_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_empty_n : IN STD_LOGIC;
    empty_read : OUT STD_LOGIC;
    ko_1_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    ko_1_empty_n : IN STD_LOGIC;
    ko_1_read : OUT STD_LOGIC;
    output_l1_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_3_ce0 : OUT STD_LOGIC;
    output_l1_3_we0 : OUT STD_LOGIC;
    output_l1_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_3_ce1 : OUT STD_LOGIC;
    output_l1_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l1_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_2_ce0 : OUT STD_LOGIC;
    output_l1_2_we0 : OUT STD_LOGIC;
    output_l1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_2_ce1 : OUT STD_LOGIC;
    output_l1_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l1_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_1_ce0 : OUT STD_LOGIC;
    output_l1_1_we0 : OUT STD_LOGIC;
    output_l1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_1_ce1 : OUT STD_LOGIC;
    output_l1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_l1_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_0_ce0 : OUT STD_LOGIC;
    output_l1_0_we0 : OUT STD_LOGIC;
    output_l1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_0_ce1 : OUT STD_LOGIC;
    output_l1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Conv_sysarr_dbbuf_runSysArr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";
    constant ap_const_lv9_1FA : STD_LOGIC_VECTOR (8 downto 0) := "111111010";
    constant ap_const_lv9_1FB : STD_LOGIC_VECTOR (8 downto 0) := "111111011";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv32_FFFFFFFA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111010";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv32_FFFFFFFC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111100";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_blk_n : STD_LOGIC;
    signal ko_1_blk_n : STD_LOGIC;
    signal i_reg_502 : STD_LOGIC_VECTOR (30 downto 0);
    signal psum_14_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_13_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_12_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_10_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_9_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_8_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_6_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_5_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_4_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_2_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_1_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln111_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln111_reg_1523 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mul24_i_i_fu_673_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul24_i_i_reg_1531 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln114_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_3_load_cast_i_i_fu_685_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_3_3_load_cast_i_i_reg_1618 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_3_2_load_cast_i_i_fu_689_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_3_2_load_cast_i_i_reg_1623 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_3_1_load_cast_i_i_fu_693_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_3_1_load_cast_i_i_reg_1628 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_3_0_load_cast_i_i_fu_697_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_3_0_load_cast_i_i_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_3_load_cast_i_i_fu_701_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_3_load_cast_i_i_reg_1638 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_2_load_cast_i_i_fu_705_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_2_load_cast_i_i_reg_1643 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_1_load_cast_i_i_fu_709_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_1_load_cast_i_i_reg_1648 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_0_load_cast_i_i_fu_713_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_2_0_load_cast_i_i_reg_1653 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_3_load_cast_i_i_fu_717_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_3_load_cast_i_i_reg_1658 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_2_load_cast_i_i_fu_721_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_2_load_cast_i_i_reg_1663 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_1_load_cast_i_i_fu_725_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_1_load_cast_i_i_reg_1668 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_0_load_cast_i_i_fu_729_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_1_0_load_cast_i_i_reg_1673 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_3_load_cast_i_i_fu_733_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_3_load_cast_i_i_reg_1678 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_2_load_cast_i_i_fu_737_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_2_load_cast_i_i_reg_1683 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_1_load_cast_i_i_fu_741_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_1_load_cast_i_i_reg_1688 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_0_load_cast_i_i_fu_745_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_0_0_load_cast_i_i_reg_1693 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln114_fu_749_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln114_reg_1698 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln139_4_fu_753_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln139_4_reg_1703 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_3_fu_759_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_3_reg_1708 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_4_fu_765_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_4_reg_1713 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_5_fu_771_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_5_reg_1718 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln114_1_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_1_reg_1723 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln114_1_reg_1723_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_1_reg_1723_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_1_reg_1723_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_1_reg_1723_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_1_reg_1723_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_1_reg_1723_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln114_fu_782_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln129_fu_792_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln129_reg_1732 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln129_reg_1732_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln129_reg_1732_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln129_reg_1732_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln129_reg_1732_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln129_reg_1732_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln129_reg_1732_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln128_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_1748 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_1748_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_reg_1748_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1754 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1754_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1754_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln126_3_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln126_3_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln126_3_reg_1760_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln126_3_reg_1760_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_827_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1765 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1765_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1765_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1765_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_reg_1771 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_reg_1771_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_reg_1771_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_reg_1771_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_reg_1771_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_reg_1771_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_reg_1771_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_reg_1775 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_reg_1775_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_reg_1775_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_reg_1775_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_reg_1775_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_reg_1775_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_1_reg_1775_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_reg_1779 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_reg_1779_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_reg_1779_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_reg_1779_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_reg_1779_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_reg_1779_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_2_reg_1779_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_reg_1783 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_reg_1783_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_reg_1783_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_reg_1783_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_reg_1783_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_reg_1783_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln173_3_reg_1783_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln126_fu_967_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln126_reg_1787 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln139_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_reg_1822 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_reg_1822_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_reg_1822_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_reg_1822_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_reg_1822_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_1323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_2_reg_1932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_1330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_5_reg_1937 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1337_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_8_reg_1942 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_11_reg_1947 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_1_reg_1952 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_1358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_4_reg_1957 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_7_reg_1962 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1372_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_10_reg_1967 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1379_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_reg_1972 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal grp_fu_1386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_3_reg_1977 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_6_reg_1982 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln165_9_reg_1987 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_psum_14_phi_fu_517_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_psum_13_phi_fu_529_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_12_phi_fu_541_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_10_phi_fu_553_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_9_phi_fu_565_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_8_phi_fu_577_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_6_phi_fu_589_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_5_phi_fu_601_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_4_phi_fu_613_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_2_phi_fu_625_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_1_phi_fu_637_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_phi_fu_649_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln129_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_2_fu_1032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_1_fu_1051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_2_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_3_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_3_fu_1124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln177_fu_1240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln177_1_fu_1249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln177_2_fu_1258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_1434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_33_fu_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_34_fu_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_35_fu_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_36_fu_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_37_fu_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_38_fu_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_39_fu_226 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln128_2_fu_1192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_40_fu_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln128_1_fu_1117_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_41_fu_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln128_fu_1020_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_42_fu_238 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul24_i_i_fu_673_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_rows_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln114_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln126_1_fu_807_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln172_fu_841_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_847_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln172_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln172_1_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_1_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln172_1_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln172_2_fu_903_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_909_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_2_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln172_2_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_3_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln128_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln126_2_fu_1027_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln139_fu_1037_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln139_1_fu_1046_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln139_2_fu_1056_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln139_3_fu_1065_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_fu_1236_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_1_fu_1245_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln177_2_fu_1254_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1323_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1358_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1400_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1425_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_predicate_op158_load_state4 : BOOLEAN;
    signal ap_enable_operation_158 : BOOLEAN;
    signal ap_enable_state4_pp0_iter2_stage0 : BOOLEAN;
    signal ap_predicate_op195_load_state5 : BOOLEAN;
    signal ap_enable_operation_195 : BOOLEAN;
    signal ap_enable_state5_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_327 : BOOLEAN;
    signal ap_enable_state9_pp0_iter7_stage0 : BOOLEAN;
    signal ap_predicate_op162_load_state4 : BOOLEAN;
    signal ap_enable_operation_162 : BOOLEAN;
    signal ap_predicate_op197_load_state5 : BOOLEAN;
    signal ap_enable_operation_197 : BOOLEAN;
    signal ap_enable_operation_332 : BOOLEAN;
    signal ap_predicate_op166_load_state4 : BOOLEAN;
    signal ap_enable_operation_166 : BOOLEAN;
    signal ap_predicate_op199_load_state5 : BOOLEAN;
    signal ap_enable_operation_199 : BOOLEAN;
    signal ap_enable_operation_337 : BOOLEAN;
    signal ap_enable_operation_170 : BOOLEAN;
    signal ap_enable_operation_201 : BOOLEAN;
    signal ap_enable_operation_340 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U98 : component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_dout,
        din1 => empty_dout,
        dout => mul_ln111_fu_657_p2);

    mul_9s_9s_9_1_1_U99 : component Conv_sysarr_dbbuf_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => ko_1_dout,
        din1 => mul24_i_i_fu_673_p1,
        dout => mul24_i_i_fu_673_p2);

    mac_muladd_8s_8s_32ns_32_4_1_U100 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_34_fu_206,
        din1 => grp_fu_1323_p1,
        din2 => grp_fu_1323_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1323_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U101 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_38_fu_222,
        din1 => grp_fu_1330_p1,
        din2 => grp_fu_1330_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1330_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U102 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_42_fu_238,
        din1 => grp_fu_1337_p1,
        din2 => grp_fu_1337_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1337_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U103 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_l1buf_0_q0,
        din1 => grp_fu_1344_p1,
        din2 => output_l1_0_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_1344_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U104 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_33_fu_202,
        din1 => grp_fu_1351_p1,
        din2 => ap_phi_mux_psum_2_phi_fu_625_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1351_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U105 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_37_fu_218,
        din1 => grp_fu_1358_p1,
        din2 => ap_phi_mux_psum_6_phi_fu_589_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1358_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U106 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_41_fu_234,
        din1 => grp_fu_1365_p1,
        din2 => ap_phi_mux_psum_10_phi_fu_553_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1365_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U107 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln128_fu_1020_p3,
        din1 => grp_fu_1372_p1,
        din2 => ap_phi_mux_psum_14_phi_fu_517_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1372_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U108 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_32_fu_198,
        din1 => grp_fu_1379_p1,
        din2 => ap_phi_mux_psum_1_phi_fu_637_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1379_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U109 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_36_fu_214,
        din1 => grp_fu_1386_p1,
        din2 => ap_phi_mux_psum_5_phi_fu_601_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1386_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U110 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_40_fu_230,
        din1 => grp_fu_1393_p1,
        din2 => ap_phi_mux_psum_9_phi_fu_565_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1393_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U111 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln128_1_fu_1117_p3,
        din1 => grp_fu_1400_p1,
        din2 => ap_phi_mux_psum_13_phi_fu_529_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1400_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U112 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_31_fu_194,
        din1 => grp_fu_1407_p1,
        din2 => ap_phi_mux_psum_phi_fu_649_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1407_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U113 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_35_fu_210,
        din1 => grp_fu_1416_p1,
        din2 => ap_phi_mux_psum_4_phi_fu_613_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1416_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U114 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_39_fu_226,
        din1 => grp_fu_1425_p1,
        din2 => ap_phi_mux_psum_8_phi_fu_577_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1425_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U115 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln128_2_fu_1192_p3,
        din1 => grp_fu_1434_p1,
        din2 => ap_phi_mux_psum_12_phi_fu_541_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1434_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln114_fu_679_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state6)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln114_fu_679_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln114_fu_679_p2 = ap_const_lv1_1))) then 
                i_reg_502 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_1_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_502 <= add_ln114_fu_782_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_1_fu_777_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln126_3_reg_1760 <= add_ln126_3_fu_821_p2;
                and_ln173_1_reg_1775 <= and_ln173_1_fu_897_p2;
                and_ln173_2_reg_1779 <= and_ln173_2_fu_928_p2;
                and_ln173_3_reg_1783 <= and_ln173_3_fu_939_p2;
                and_ln173_reg_1771 <= and_ln173_fu_866_p2;
                icmp_ln128_reg_1748 <= icmp_ln128_fu_801_p2;
                tmp_1_reg_1765 <= add_ln126_3_fu_821_p2(31 downto 31);
                tmp_reg_1754 <= add_ln126_1_fu_807_p2(31 downto 31);
                trunc_ln129_reg_1732 <= trunc_ln129_fu_792_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln126_3_reg_1760_pp0_iter1_reg <= add_ln126_3_reg_1760;
                and_ln173_1_reg_1775_pp0_iter1_reg <= and_ln173_1_reg_1775;
                and_ln173_2_reg_1779_pp0_iter1_reg <= and_ln173_2_reg_1779;
                and_ln173_3_reg_1783_pp0_iter1_reg <= and_ln173_3_reg_1783;
                and_ln173_reg_1771_pp0_iter1_reg <= and_ln173_reg_1771;
                icmp_ln114_1_reg_1723 <= icmp_ln114_1_fu_777_p2;
                icmp_ln114_1_reg_1723_pp0_iter1_reg <= icmp_ln114_1_reg_1723;
                icmp_ln128_reg_1748_pp0_iter1_reg <= icmp_ln128_reg_1748;
                tmp_1_reg_1765_pp0_iter1_reg <= tmp_1_reg_1765;
                tmp_reg_1754_pp0_iter1_reg <= tmp_reg_1754;
                trunc_ln129_reg_1732_pp0_iter1_reg <= trunc_ln129_reg_1732;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln126_3_reg_1760_pp0_iter2_reg <= add_ln126_3_reg_1760_pp0_iter1_reg;
                and_ln173_1_reg_1775_pp0_iter2_reg <= and_ln173_1_reg_1775_pp0_iter1_reg;
                and_ln173_1_reg_1775_pp0_iter3_reg <= and_ln173_1_reg_1775_pp0_iter2_reg;
                and_ln173_1_reg_1775_pp0_iter4_reg <= and_ln173_1_reg_1775_pp0_iter3_reg;
                and_ln173_1_reg_1775_pp0_iter5_reg <= and_ln173_1_reg_1775_pp0_iter4_reg;
                and_ln173_1_reg_1775_pp0_iter6_reg <= and_ln173_1_reg_1775_pp0_iter5_reg;
                and_ln173_2_reg_1779_pp0_iter2_reg <= and_ln173_2_reg_1779_pp0_iter1_reg;
                and_ln173_2_reg_1779_pp0_iter3_reg <= and_ln173_2_reg_1779_pp0_iter2_reg;
                and_ln173_2_reg_1779_pp0_iter4_reg <= and_ln173_2_reg_1779_pp0_iter3_reg;
                and_ln173_2_reg_1779_pp0_iter5_reg <= and_ln173_2_reg_1779_pp0_iter4_reg;
                and_ln173_2_reg_1779_pp0_iter6_reg <= and_ln173_2_reg_1779_pp0_iter5_reg;
                and_ln173_3_reg_1783_pp0_iter2_reg <= and_ln173_3_reg_1783_pp0_iter1_reg;
                and_ln173_3_reg_1783_pp0_iter3_reg <= and_ln173_3_reg_1783_pp0_iter2_reg;
                and_ln173_3_reg_1783_pp0_iter4_reg <= and_ln173_3_reg_1783_pp0_iter3_reg;
                and_ln173_3_reg_1783_pp0_iter5_reg <= and_ln173_3_reg_1783_pp0_iter4_reg;
                and_ln173_3_reg_1783_pp0_iter6_reg <= and_ln173_3_reg_1783_pp0_iter5_reg;
                and_ln173_reg_1771_pp0_iter2_reg <= and_ln173_reg_1771_pp0_iter1_reg;
                and_ln173_reg_1771_pp0_iter3_reg <= and_ln173_reg_1771_pp0_iter2_reg;
                and_ln173_reg_1771_pp0_iter4_reg <= and_ln173_reg_1771_pp0_iter3_reg;
                and_ln173_reg_1771_pp0_iter5_reg <= and_ln173_reg_1771_pp0_iter4_reg;
                and_ln173_reg_1771_pp0_iter6_reg <= and_ln173_reg_1771_pp0_iter5_reg;
                icmp_ln114_1_reg_1723_pp0_iter2_reg <= icmp_ln114_1_reg_1723_pp0_iter1_reg;
                icmp_ln114_1_reg_1723_pp0_iter3_reg <= icmp_ln114_1_reg_1723_pp0_iter2_reg;
                icmp_ln114_1_reg_1723_pp0_iter4_reg <= icmp_ln114_1_reg_1723_pp0_iter3_reg;
                icmp_ln114_1_reg_1723_pp0_iter5_reg <= icmp_ln114_1_reg_1723_pp0_iter4_reg;
                icmp_ln114_1_reg_1723_pp0_iter6_reg <= icmp_ln114_1_reg_1723_pp0_iter5_reg;
                icmp_ln128_reg_1748_pp0_iter2_reg <= icmp_ln128_reg_1748_pp0_iter1_reg;
                tmp_1_reg_1765_pp0_iter2_reg <= tmp_1_reg_1765_pp0_iter1_reg;
                tmp_1_reg_1765_pp0_iter3_reg <= tmp_1_reg_1765_pp0_iter2_reg;
                tmp_reg_1754_pp0_iter2_reg <= tmp_reg_1754_pp0_iter1_reg;
                trunc_ln129_reg_1732_pp0_iter2_reg <= trunc_ln129_reg_1732_pp0_iter1_reg;
                trunc_ln129_reg_1732_pp0_iter3_reg <= trunc_ln129_reg_1732_pp0_iter2_reg;
                trunc_ln129_reg_1732_pp0_iter4_reg <= trunc_ln129_reg_1732_pp0_iter3_reg;
                trunc_ln129_reg_1732_pp0_iter5_reg <= trunc_ln129_reg_1732_pp0_iter4_reg;
                trunc_ln129_reg_1732_pp0_iter6_reg <= trunc_ln129_reg_1732_pp0_iter5_reg;
                    zext_ln139_reg_1822_pp0_iter3_reg(8 downto 0) <= zext_ln139_reg_1822(8 downto 0);
                    zext_ln139_reg_1822_pp0_iter4_reg(8 downto 0) <= zext_ln139_reg_1822_pp0_iter3_reg(8 downto 0);
                    zext_ln139_reg_1822_pp0_iter5_reg(8 downto 0) <= zext_ln139_reg_1822_pp0_iter4_reg(8 downto 0);
                    zext_ln139_reg_1822_pp0_iter6_reg(8 downto 0) <= zext_ln139_reg_1822_pp0_iter5_reg(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_1_reg_1723 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln126_reg_1787 <= add_ln126_fu_967_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln114_fu_679_p2 = ap_const_lv1_1))) then
                add_ln139_4_reg_1703 <= add_ln139_4_fu_753_p2;
                add_ln177_3_reg_1708 <= add_ln177_3_fu_759_p2;
                add_ln177_4_reg_1713 <= add_ln177_4_fu_765_p2;
                add_ln177_5_reg_1718 <= add_ln177_5_fu_771_p2;
                trunc_ln114_reg_1698 <= trunc_ln114_fu_749_p1;
                weight_regfile_0_0_load_cast_i_i_reg_1693 <= weight_regfile_0_0_load_cast_i_i_fu_745_p1;
                weight_regfile_0_1_load_cast_i_i_reg_1688 <= weight_regfile_0_1_load_cast_i_i_fu_741_p1;
                weight_regfile_0_2_load_cast_i_i_reg_1683 <= weight_regfile_0_2_load_cast_i_i_fu_737_p1;
                weight_regfile_0_3_load_cast_i_i_reg_1678 <= weight_regfile_0_3_load_cast_i_i_fu_733_p1;
                weight_regfile_1_0_load_cast_i_i_reg_1673 <= weight_regfile_1_0_load_cast_i_i_fu_729_p1;
                weight_regfile_1_1_load_cast_i_i_reg_1668 <= weight_regfile_1_1_load_cast_i_i_fu_725_p1;
                weight_regfile_1_2_load_cast_i_i_reg_1663 <= weight_regfile_1_2_load_cast_i_i_fu_721_p1;
                weight_regfile_1_3_load_cast_i_i_reg_1658 <= weight_regfile_1_3_load_cast_i_i_fu_717_p1;
                weight_regfile_2_0_load_cast_i_i_reg_1653 <= weight_regfile_2_0_load_cast_i_i_fu_713_p1;
                weight_regfile_2_1_load_cast_i_i_reg_1648 <= weight_regfile_2_1_load_cast_i_i_fu_709_p1;
                weight_regfile_2_2_load_cast_i_i_reg_1643 <= weight_regfile_2_2_load_cast_i_i_fu_705_p1;
                weight_regfile_2_3_load_cast_i_i_reg_1638 <= weight_regfile_2_3_load_cast_i_i_fu_701_p1;
                weight_regfile_3_0_load_cast_i_i_reg_1633 <= weight_regfile_3_0_load_cast_i_i_fu_697_p1;
                weight_regfile_3_1_load_cast_i_i_reg_1628 <= weight_regfile_3_1_load_cast_i_i_fu_693_p1;
                weight_regfile_3_2_load_cast_i_i_reg_1623 <= weight_regfile_3_2_load_cast_i_i_fu_689_p1;
                weight_regfile_3_3_load_cast_i_i_reg_1618 <= weight_regfile_3_3_load_cast_i_i_fu_685_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln165_10_reg_1967 <= grp_fu_1372_p3;
                add_ln165_1_reg_1952 <= grp_fu_1351_p3;
                add_ln165_4_reg_1957 <= grp_fu_1358_p3;
                add_ln165_7_reg_1962 <= grp_fu_1365_p3;
                psum_10_reg_549 <= add_ln165_8_reg_1942;
                psum_14_reg_513 <= add_ln165_11_reg_1947;
                psum_2_reg_621 <= add_ln165_2_reg_1932;
                psum_6_reg_585 <= add_ln165_5_reg_1937;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln165_11_reg_1947 <= grp_fu_1344_p3;
                add_ln165_2_reg_1932 <= grp_fu_1323_p3;
                add_ln165_5_reg_1937 <= grp_fu_1330_p3;
                add_ln165_8_reg_1942 <= grp_fu_1337_p3;
                empty_39_fu_226 <= select_ln128_2_fu_1192_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln165_3_reg_1977 <= grp_fu_1386_p3;
                add_ln165_6_reg_1982 <= grp_fu_1393_p3;
                add_ln165_9_reg_1987 <= grp_fu_1400_p3;
                add_ln165_reg_1972 <= grp_fu_1379_p3;
                psum_13_reg_525 <= add_ln165_10_reg_1967;
                psum_1_reg_633 <= add_ln165_1_reg_1952;
                psum_5_reg_597 <= add_ln165_4_reg_1957;
                psum_9_reg_561 <= add_ln165_7_reg_1962;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_31_fu_194 <= empty_35_fu_210;
                empty_35_fu_210 <= empty_39_fu_226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_32_fu_198 <= empty_36_fu_214;
                empty_36_fu_214 <= empty_40_fu_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_33_fu_202 <= empty_37_fu_218;
                empty_37_fu_218 <= empty_41_fu_234;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_34_fu_206 <= empty_38_fu_222;
                empty_38_fu_222 <= empty_42_fu_238;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_40_fu_230 <= select_ln128_1_fu_1117_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_41_fu_234 <= select_ln128_fu_1020_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_1_reg_1723 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_42_fu_238 <= data_l1buf_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mul24_i_i_reg_1531 <= mul24_i_i_fu_673_p2;
                mul_ln111_reg_1523 <= mul_ln111_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                psum_12_reg_537 <= add_ln165_9_reg_1987;
                psum_4_reg_609 <= add_ln165_3_reg_1977;
                psum_8_reg_573 <= add_ln165_6_reg_1982;
                psum_reg_645 <= add_ln165_reg_1972;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_1_reg_1723_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln139_reg_1822(8 downto 0) <= zext_ln139_fu_1041_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln139_reg_1822(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln139_reg_1822_pp0_iter3_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln139_reg_1822_pp0_iter4_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln139_reg_1822_pp0_iter5_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln139_reg_1822_pp0_iter6_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, empty_empty_n, ko_1_empty_n, icmp_ln114_fu_679_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln114_fu_679_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln114_fu_679_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln114_fu_782_p2 <= std_logic_vector(unsigned(i_reg_502) + unsigned(ap_const_lv31_1));
    add_ln126_1_fu_807_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFE) + signed(zext_ln114_fu_788_p1));
    add_ln126_2_fu_1027_p2 <= std_logic_vector(signed(ap_const_lv9_1FE) + signed(trunc_ln129_reg_1732_pp0_iter1_reg));
    add_ln126_3_fu_821_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFD) + signed(zext_ln114_fu_788_p1));
    add_ln126_fu_967_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(trunc_ln129_reg_1732));
    add_ln139_1_fu_1046_p2 <= std_logic_vector(unsigned(add_ln126_2_fu_1027_p2) + unsigned(mul24_i_i_reg_1531));
    add_ln139_2_fu_1056_p2 <= std_logic_vector(unsigned(add_ln126_reg_1787) + unsigned(mul24_i_i_reg_1531));
    add_ln139_3_fu_1065_p2 <= std_logic_vector(unsigned(mul24_i_i_reg_1531) + unsigned(trunc_ln129_reg_1732_pp0_iter1_reg));
    add_ln139_4_fu_753_p2 <= std_logic_vector(signed(ap_const_lv9_1FD) + signed(mul24_i_i_fu_673_p2));
    add_ln139_fu_1037_p2 <= std_logic_vector(unsigned(add_ln139_4_reg_1703) + unsigned(trunc_ln129_reg_1732_pp0_iter1_reg));
    add_ln172_1_fu_872_p2 <= std_logic_vector(unsigned(zext_ln114_fu_788_p1) + unsigned(ap_const_lv32_FFFFFFFB));
    add_ln172_2_fu_903_p2 <= std_logic_vector(unsigned(zext_ln114_fu_788_p1) + unsigned(ap_const_lv32_FFFFFFFC));
    add_ln172_fu_841_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFA) + signed(zext_ln114_fu_788_p1));
    add_ln177_1_fu_1245_p2 <= std_logic_vector(unsigned(add_ln177_4_reg_1713) + unsigned(trunc_ln129_reg_1732_pp0_iter6_reg));
    add_ln177_2_fu_1254_p2 <= std_logic_vector(unsigned(add_ln177_5_reg_1718) + unsigned(trunc_ln129_reg_1732_pp0_iter6_reg));
    add_ln177_3_fu_759_p2 <= std_logic_vector(signed(ap_const_lv9_1FA) + signed(mul24_i_i_fu_673_p2));
    add_ln177_4_fu_765_p2 <= std_logic_vector(signed(ap_const_lv9_1FB) + signed(mul24_i_i_fu_673_p2));
    add_ln177_5_fu_771_p2 <= std_logic_vector(signed(ap_const_lv9_1FC) + signed(mul24_i_i_fu_673_p2));
    add_ln177_fu_1236_p2 <= std_logic_vector(unsigned(add_ln177_3_reg_1708) + unsigned(trunc_ln129_reg_1732_pp0_iter6_reg));
    and_ln173_1_fu_897_p2 <= (xor_ln172_1_fu_886_p2 and icmp_ln173_1_fu_892_p2);
    and_ln173_2_fu_928_p2 <= (xor_ln172_2_fu_917_p2 and icmp_ln173_2_fu_923_p2);
    and_ln173_3_fu_939_p2 <= (xor_ln128_fu_835_p2 and icmp_ln173_3_fu_934_p2);
    and_ln173_fu_866_p2 <= (xor_ln172_fu_855_p2 and icmp_ln173_fu_861_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, empty_empty_n, ko_1_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter4_state6_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln114_1_fu_777_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln114_1_fu_777_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_158_assign_proc : process(ap_predicate_op158_load_state4)
    begin
                ap_enable_operation_158 <= (ap_predicate_op158_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_162_assign_proc : process(ap_predicate_op162_load_state4)
    begin
                ap_enable_operation_162 <= (ap_predicate_op162_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_166_assign_proc : process(ap_predicate_op166_load_state4)
    begin
                ap_enable_operation_166 <= (ap_predicate_op166_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_170_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter1_reg)
    begin
                ap_enable_operation_170 <= (icmp_ln114_1_reg_1723_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_195_assign_proc : process(ap_predicate_op195_load_state5)
    begin
                ap_enable_operation_195 <= (ap_predicate_op195_load_state5 = ap_const_boolean_1);
    end process;


    ap_enable_operation_197_assign_proc : process(ap_predicate_op197_load_state5)
    begin
                ap_enable_operation_197 <= (ap_predicate_op197_load_state5 = ap_const_boolean_1);
    end process;


    ap_enable_operation_199_assign_proc : process(ap_predicate_op199_load_state5)
    begin
                ap_enable_operation_199 <= (ap_predicate_op199_load_state5 = ap_const_boolean_1);
    end process;


    ap_enable_operation_201_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter2_reg)
    begin
                ap_enable_operation_201 <= (icmp_ln114_1_reg_1723_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_327_assign_proc : process(and_ln173_reg_1771_pp0_iter6_reg)
    begin
                ap_enable_operation_327 <= (ap_const_lv1_1 = and_ln173_reg_1771_pp0_iter6_reg);
    end process;


    ap_enable_operation_332_assign_proc : process(and_ln173_1_reg_1775_pp0_iter6_reg)
    begin
                ap_enable_operation_332 <= (ap_const_lv1_1 = and_ln173_1_reg_1775_pp0_iter6_reg);
    end process;


    ap_enable_operation_337_assign_proc : process(and_ln173_2_reg_1779_pp0_iter6_reg)
    begin
                ap_enable_operation_337 <= (ap_const_lv1_1 = and_ln173_2_reg_1779_pp0_iter6_reg);
    end process;


    ap_enable_operation_340_assign_proc : process(and_ln173_3_reg_1783_pp0_iter6_reg)
    begin
                ap_enable_operation_340 <= (ap_const_lv1_1 = and_ln173_3_reg_1783_pp0_iter6_reg);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state4_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state4_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state5_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state9_pp0_iter7_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7)
    begin
                ap_enable_state9_pp0_iter7_stage0 <= ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_psum_10_phi_fu_553_p4_assign_proc : process(psum_10_reg_549, icmp_ln114_1_reg_1723_pp0_iter4_reg, add_ln165_8_reg_1942, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_10_phi_fu_553_p4 <= add_ln165_8_reg_1942;
        else 
            ap_phi_mux_psum_10_phi_fu_553_p4 <= psum_10_reg_549;
        end if; 
    end process;


    ap_phi_mux_psum_12_phi_fu_541_p4_assign_proc : process(psum_12_reg_537, icmp_ln114_1_reg_1723_pp0_iter6_reg, add_ln165_9_reg_1987, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_12_phi_fu_541_p4 <= add_ln165_9_reg_1987;
        else 
            ap_phi_mux_psum_12_phi_fu_541_p4 <= psum_12_reg_537;
        end if; 
    end process;


    ap_phi_mux_psum_13_phi_fu_529_p4_assign_proc : process(psum_13_reg_525, icmp_ln114_1_reg_1723_pp0_iter5_reg, add_ln165_10_reg_1967, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_13_phi_fu_529_p4 <= add_ln165_10_reg_1967;
        else 
            ap_phi_mux_psum_13_phi_fu_529_p4 <= psum_13_reg_525;
        end if; 
    end process;


    ap_phi_mux_psum_14_phi_fu_517_p4_assign_proc : process(psum_14_reg_513, icmp_ln114_1_reg_1723_pp0_iter4_reg, add_ln165_11_reg_1947, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_14_phi_fu_517_p4 <= add_ln165_11_reg_1947;
        else 
            ap_phi_mux_psum_14_phi_fu_517_p4 <= psum_14_reg_513;
        end if; 
    end process;


    ap_phi_mux_psum_1_phi_fu_637_p4_assign_proc : process(psum_1_reg_633, icmp_ln114_1_reg_1723_pp0_iter5_reg, add_ln165_1_reg_1952, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_1_phi_fu_637_p4 <= add_ln165_1_reg_1952;
        else 
            ap_phi_mux_psum_1_phi_fu_637_p4 <= psum_1_reg_633;
        end if; 
    end process;


    ap_phi_mux_psum_2_phi_fu_625_p4_assign_proc : process(psum_2_reg_621, icmp_ln114_1_reg_1723_pp0_iter4_reg, add_ln165_2_reg_1932, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_2_phi_fu_625_p4 <= add_ln165_2_reg_1932;
        else 
            ap_phi_mux_psum_2_phi_fu_625_p4 <= psum_2_reg_621;
        end if; 
    end process;


    ap_phi_mux_psum_4_phi_fu_613_p4_assign_proc : process(psum_4_reg_609, icmp_ln114_1_reg_1723_pp0_iter6_reg, add_ln165_3_reg_1977, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_4_phi_fu_613_p4 <= add_ln165_3_reg_1977;
        else 
            ap_phi_mux_psum_4_phi_fu_613_p4 <= psum_4_reg_609;
        end if; 
    end process;


    ap_phi_mux_psum_5_phi_fu_601_p4_assign_proc : process(psum_5_reg_597, icmp_ln114_1_reg_1723_pp0_iter5_reg, add_ln165_4_reg_1957, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_5_phi_fu_601_p4 <= add_ln165_4_reg_1957;
        else 
            ap_phi_mux_psum_5_phi_fu_601_p4 <= psum_5_reg_597;
        end if; 
    end process;


    ap_phi_mux_psum_6_phi_fu_589_p4_assign_proc : process(psum_6_reg_585, icmp_ln114_1_reg_1723_pp0_iter4_reg, add_ln165_5_reg_1937, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_6_phi_fu_589_p4 <= add_ln165_5_reg_1937;
        else 
            ap_phi_mux_psum_6_phi_fu_589_p4 <= psum_6_reg_585;
        end if; 
    end process;


    ap_phi_mux_psum_8_phi_fu_577_p4_assign_proc : process(psum_8_reg_573, icmp_ln114_1_reg_1723_pp0_iter6_reg, add_ln165_6_reg_1982, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_8_phi_fu_577_p4 <= add_ln165_6_reg_1982;
        else 
            ap_phi_mux_psum_8_phi_fu_577_p4 <= psum_8_reg_573;
        end if; 
    end process;


    ap_phi_mux_psum_9_phi_fu_565_p4_assign_proc : process(psum_9_reg_561, icmp_ln114_1_reg_1723_pp0_iter5_reg, add_ln165_7_reg_1962, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_9_phi_fu_565_p4 <= add_ln165_7_reg_1962;
        else 
            ap_phi_mux_psum_9_phi_fu_565_p4 <= psum_9_reg_561;
        end if; 
    end process;


    ap_phi_mux_psum_phi_fu_649_p4_assign_proc : process(psum_reg_645, icmp_ln114_1_reg_1723_pp0_iter6_reg, add_ln165_reg_1972, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln114_1_reg_1723_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_phi_fu_649_p4 <= add_ln165_reg_1972;
        else 
            ap_phi_mux_psum_phi_fu_649_p4 <= psum_reg_645;
        end if; 
    end process;


    ap_predicate_op158_load_state4_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter1_reg, tmp_1_reg_1765_pp0_iter1_reg)
    begin
                ap_predicate_op158_load_state4 <= ((tmp_1_reg_1765_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln114_1_reg_1723_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op162_load_state4_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter1_reg, tmp_reg_1754_pp0_iter1_reg)
    begin
                ap_predicate_op162_load_state4 <= ((tmp_reg_1754_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln114_1_reg_1723_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op166_load_state4_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter1_reg, icmp_ln128_reg_1748_pp0_iter1_reg)
    begin
                ap_predicate_op166_load_state4 <= ((icmp_ln128_reg_1748_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln114_1_reg_1723_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op195_load_state5_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter2_reg, tmp_1_reg_1765_pp0_iter2_reg)
    begin
                ap_predicate_op195_load_state5 <= ((tmp_1_reg_1765_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln114_1_reg_1723_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op197_load_state5_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter2_reg, tmp_reg_1754_pp0_iter2_reg)
    begin
                ap_predicate_op197_load_state5 <= ((tmp_reg_1754_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln114_1_reg_1723_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op199_load_state5_assign_proc : process(icmp_ln114_1_reg_1723_pp0_iter2_reg, icmp_ln128_reg_1748_pp0_iter2_reg)
    begin
                ap_predicate_op199_load_state5 <= ((icmp_ln128_reg_1748_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln114_1_reg_1723_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_0_address0 <= zext_ln129_fu_796_p1(9 - 1 downto 0);

    data_l1buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_l1buf_0_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_1_address0 <= zext_ln129_1_fu_972_p1(9 - 1 downto 0);

    data_l1buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_l1buf_1_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_2_address0 <= zext_ln129_2_fu_1032_p1(9 - 1 downto 0);

    data_l1buf_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_2_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_3_address0 <= zext_ln129_3_fu_1124_p1(9 - 1 downto 0);

    data_l1buf_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_3_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_blk_n <= empty_empty_n;
        else 
            empty_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, ko_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_read <= ap_const_logic_1;
        else 
            empty_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1323_p1 <= weight_regfile_3_0_load_cast_i_i_reg_1633(8 - 1 downto 0);
    grp_fu_1323_p2 <= 
        ap_const_lv32_0 when (tmp_1_reg_1765_pp0_iter2_reg(0) = '1') else 
        output_l1_3_q1;
    grp_fu_1330_p1 <= weight_regfile_2_0_load_cast_i_i_reg_1653(8 - 1 downto 0);
    grp_fu_1330_p2 <= 
        ap_const_lv32_0 when (tmp_reg_1754_pp0_iter2_reg(0) = '1') else 
        output_l1_2_q1;
    grp_fu_1337_p1 <= weight_regfile_1_0_load_cast_i_i_reg_1673(8 - 1 downto 0);
    grp_fu_1337_p2 <= 
        output_l1_1_q1 when (icmp_ln128_reg_1748_pp0_iter2_reg(0) = '1') else 
        ap_const_lv32_0;
    grp_fu_1344_p1 <= weight_regfile_0_0_load_cast_i_i_reg_1693(8 - 1 downto 0);
    grp_fu_1351_p1 <= weight_regfile_3_1_load_cast_i_i_reg_1628(8 - 1 downto 0);
    grp_fu_1358_p1 <= weight_regfile_2_1_load_cast_i_i_reg_1648(8 - 1 downto 0);
    grp_fu_1365_p1 <= weight_regfile_1_1_load_cast_i_i_reg_1668(8 - 1 downto 0);
    grp_fu_1372_p1 <= weight_regfile_0_1_load_cast_i_i_reg_1688(8 - 1 downto 0);
    grp_fu_1379_p1 <= weight_regfile_3_2_load_cast_i_i_reg_1623(8 - 1 downto 0);
    grp_fu_1386_p1 <= weight_regfile_2_2_load_cast_i_i_reg_1643(8 - 1 downto 0);
    grp_fu_1393_p1 <= weight_regfile_1_2_load_cast_i_i_reg_1663(8 - 1 downto 0);
    grp_fu_1400_p1 <= weight_regfile_0_2_load_cast_i_i_reg_1683(8 - 1 downto 0);
    grp_fu_1407_p1 <= weight_regfile_3_3_load_cast_i_i_reg_1618(8 - 1 downto 0);
    grp_fu_1416_p1 <= weight_regfile_2_3_load_cast_i_i_reg_1638(8 - 1 downto 0);
    grp_fu_1425_p1 <= weight_regfile_1_3_load_cast_i_i_reg_1658(8 - 1 downto 0);
    grp_fu_1434_p1 <= weight_regfile_0_3_load_cast_i_i_reg_1678(8 - 1 downto 0);
    icmp_ln114_1_fu_777_p2 <= "1" when (i_reg_502 = trunc_ln114_reg_1698) else "0";
    icmp_ln114_fu_679_p2 <= "1" when (signed(input_rows_fu_667_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln128_fu_801_p2 <= "0" when (i_reg_502 = ap_const_lv31_0) else "1";
    icmp_ln173_1_fu_892_p2 <= "1" when (unsigned(add_ln172_1_fu_872_p2) < unsigned(mul_ln111_reg_1523)) else "0";
    icmp_ln173_2_fu_923_p2 <= "1" when (unsigned(add_ln172_2_fu_903_p2) < unsigned(mul_ln111_reg_1523)) else "0";
    icmp_ln173_3_fu_934_p2 <= "1" when (unsigned(add_ln126_3_fu_821_p2) < unsigned(mul_ln111_reg_1523)) else "0";
    icmp_ln173_fu_861_p2 <= "1" when (unsigned(add_ln172_fu_841_p2) < unsigned(mul_ln111_reg_1523)) else "0";
    input_rows_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv32_6) + unsigned(mul_ln111_fu_657_p2));

    ko_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_blk_n <= ko_1_empty_n;
        else 
            ko_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, ko_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ko_1_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_1_read <= ap_const_logic_1;
        else 
            ko_1_read <= ap_const_logic_0;
        end if; 
    end process;

    mul24_i_i_fu_673_p1 <= mul_ln111_fu_657_p2(9 - 1 downto 0);
    output_l1_0_address0 <= zext_ln139_reg_1822_pp0_iter6_reg(9 - 1 downto 0);
    output_l1_0_address1 <= zext_ln139_3_fu_1069_p1(9 - 1 downto 0);

    output_l1_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_0_ce1 <= ap_const_logic_1;
        else 
            output_l1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_0_d0 <= grp_fu_1434_p3;

    output_l1_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln173_3_reg_1783_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln173_3_reg_1783_pp0_iter6_reg))) then 
            output_l1_0_we0 <= ap_const_logic_1;
        else 
            output_l1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_1_address0 <= zext_ln177_2_fu_1258_p1(9 - 1 downto 0);
    output_l1_1_address1 <= zext_ln139_2_fu_1060_p1(9 - 1 downto 0);

    output_l1_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_1_ce1 <= ap_const_logic_1;
        else 
            output_l1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_1_d0 <= grp_fu_1425_p3;

    output_l1_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln173_2_reg_1779_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln173_2_reg_1779_pp0_iter6_reg))) then 
            output_l1_1_we0 <= ap_const_logic_1;
        else 
            output_l1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_2_address0 <= zext_ln177_1_fu_1249_p1(9 - 1 downto 0);
    output_l1_2_address1 <= zext_ln139_1_fu_1051_p1(9 - 1 downto 0);

    output_l1_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_2_ce1 <= ap_const_logic_1;
        else 
            output_l1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_2_d0 <= grp_fu_1416_p3;

    output_l1_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln173_1_reg_1775_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln173_1_reg_1775_pp0_iter6_reg))) then 
            output_l1_2_we0 <= ap_const_logic_1;
        else 
            output_l1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_3_address0 <= zext_ln177_fu_1240_p1(9 - 1 downto 0);
    output_l1_3_address1 <= zext_ln139_fu_1041_p1(9 - 1 downto 0);

    output_l1_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_3_ce1 <= ap_const_logic_1;
        else 
            output_l1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_3_d0 <= grp_fu_1407_p3;

    output_l1_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln173_reg_1771_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln173_reg_1771_pp0_iter6_reg))) then 
            output_l1_3_we0 <= ap_const_logic_1;
        else 
            output_l1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln128_1_fu_1117_p3 <= 
        ap_const_lv8_0 when (tmp_reg_1754_pp0_iter2_reg(0) = '1') else 
        data_l1buf_2_q0;
    select_ln128_2_fu_1192_p3 <= 
        ap_const_lv8_0 when (tmp_1_reg_1765_pp0_iter3_reg(0) = '1') else 
        data_l1buf_3_q0;
    select_ln128_fu_1020_p3 <= 
        data_l1buf_1_q0 when (icmp_ln128_reg_1748_pp0_iter1_reg(0) = '1') else 
        ap_const_lv8_0;
    tmp_1_fu_827_p3 <= add_ln126_3_fu_821_p2(31 downto 31);
    tmp_2_fu_847_p3 <= add_ln172_fu_841_p2(31 downto 31);
    tmp_3_fu_878_p3 <= add_ln172_1_fu_872_p2(31 downto 31);
    tmp_4_fu_909_p3 <= add_ln172_2_fu_903_p2(31 downto 31);
    trunc_ln114_fu_749_p1 <= input_rows_fu_667_p2(31 - 1 downto 0);
    trunc_ln129_fu_792_p1 <= i_reg_502(9 - 1 downto 0);
        weight_regfile_0_0_load_cast_i_i_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_0_read),16));

        weight_regfile_0_1_load_cast_i_i_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_1_read),16));

        weight_regfile_0_2_load_cast_i_i_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_2_read),16));

        weight_regfile_0_3_load_cast_i_i_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_3_read),16));

        weight_regfile_1_0_load_cast_i_i_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_0_read),16));

        weight_regfile_1_1_load_cast_i_i_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_1_read),16));

        weight_regfile_1_2_load_cast_i_i_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_2_read),16));

        weight_regfile_1_3_load_cast_i_i_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_3_read),16));

        weight_regfile_2_0_load_cast_i_i_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_0_read),16));

        weight_regfile_2_1_load_cast_i_i_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_1_read),16));

        weight_regfile_2_2_load_cast_i_i_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_2_read),16));

        weight_regfile_2_3_load_cast_i_i_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_3_read),16));

        weight_regfile_3_0_load_cast_i_i_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_0_read),16));

        weight_regfile_3_1_load_cast_i_i_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_1_read),16));

        weight_regfile_3_2_load_cast_i_i_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_2_read),16));

        weight_regfile_3_3_load_cast_i_i_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_3_read),16));

    xor_ln128_fu_835_p2 <= (tmp_1_fu_827_p3 xor ap_const_lv1_1);
    xor_ln172_1_fu_886_p2 <= (tmp_3_fu_878_p3 xor ap_const_lv1_1);
    xor_ln172_2_fu_917_p2 <= (tmp_4_fu_909_p3 xor ap_const_lv1_1);
    xor_ln172_fu_855_p2 <= (tmp_2_fu_847_p3 xor ap_const_lv1_1);
    zext_ln114_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_502),32));
    zext_ln129_1_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_fu_967_p2),64));
    zext_ln129_2_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_2_fu_1027_p2),64));
    zext_ln129_3_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_3_reg_1760_pp0_iter2_reg),64));
    zext_ln129_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_502),64));
    zext_ln139_1_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln139_1_fu_1046_p2),64));
    zext_ln139_2_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln139_2_fu_1056_p2),64));
    zext_ln139_3_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln139_3_fu_1065_p2),64));
    zext_ln139_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln139_fu_1037_p2),64));
    zext_ln177_1_fu_1249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_1_fu_1245_p2),64));
    zext_ln177_2_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_2_fu_1254_p2),64));
    zext_ln177_fu_1240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln177_fu_1236_p2),64));
end behav;
