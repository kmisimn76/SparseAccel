-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_dbbuf_runSysArr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_018_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_018_ce0 : OUT STD_LOGIC;
    data_l1buf_018_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_119_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_119_ce0 : OUT STD_LOGIC;
    data_l1buf_119_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_220_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_220_ce0 : OUT STD_LOGIC;
    data_l1buf_220_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_321_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_321_ce0 : OUT STD_LOGIC;
    data_l1buf_321_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_l1_pass_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_0_ce0 : OUT STD_LOGIC;
    output_l1_pass_0_we0 : OUT STD_LOGIC;
    output_l1_pass_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_1_ce0 : OUT STD_LOGIC;
    output_l1_pass_1_we0 : OUT STD_LOGIC;
    output_l1_pass_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_2_ce0 : OUT STD_LOGIC;
    output_l1_pass_2_we0 : OUT STD_LOGIC;
    output_l1_pass_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_l1_pass_3_ce0 : OUT STD_LOGIC;
    output_l1_pass_3_we0 : OUT STD_LOGIC;
    output_l1_pass_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_empty_n : IN STD_LOGIC;
    empty_read : OUT STD_LOGIC;
    s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    s_empty_n : IN STD_LOGIC;
    s_read : OUT STD_LOGIC;
    r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    r_empty_n : IN STD_LOGIC;
    r_read : OUT STD_LOGIC );
end;


architecture behav of Conv_sysarr_dbbuf_runSysArr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv33_1FFFFFFFE : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv33_1FFFFFFFD : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111101";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_1FFFFFFFA : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111010";
    constant ap_const_lv32_FFFFFFFA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111010";
    constant ap_const_lv33_1FFFFFFFB : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111011";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv33_1FFFFFFFC : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111100";
    constant ap_const_lv32_FFFFFFFC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_l1_local_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_3_ce0 : STD_LOGIC;
    signal output_l1_local_3_we0 : STD_LOGIC;
    signal output_l1_local_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_3_ce1 : STD_LOGIC;
    signal output_l1_local_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_2_ce0 : STD_LOGIC;
    signal output_l1_local_2_we0 : STD_LOGIC;
    signal output_l1_local_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_2_ce1 : STD_LOGIC;
    signal output_l1_local_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_1_ce0 : STD_LOGIC;
    signal output_l1_local_1_we0 : STD_LOGIC;
    signal output_l1_local_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_1_ce1 : STD_LOGIC;
    signal output_l1_local_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_0_ce0 : STD_LOGIC;
    signal output_l1_local_0_we0 : STD_LOGIC;
    signal output_l1_local_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_0_ce1 : STD_LOGIC;
    signal output_l1_local_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_blk_n : STD_LOGIC;
    signal s_blk_n : STD_LOGIC;
    signal r_blk_n : STD_LOGIC;
    signal i_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_606_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_606_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_14_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_13_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_12_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_10_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_9_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_8_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_6_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_5_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_4_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_2_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_1_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal psum_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal wh_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln286_fu_773_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln286_reg_1663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal add_ln286_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln286_reg_1672 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln365_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln365_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile315_load_cast_i_i_fu_803_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile315_load_cast_i_i_reg_1765 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile314_load_cast_i_i_fu_807_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile314_load_cast_i_i_reg_1770 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile313_load_cast_i_i_fu_811_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile313_load_cast_i_i_reg_1775 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile312_load_cast_i_i_fu_815_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile312_load_cast_i_i_reg_1780 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile211_load_cast_i_i_fu_819_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile211_load_cast_i_i_reg_1785 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile210_load_cast_i_i_fu_823_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile210_load_cast_i_i_reg_1790 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile29_load_cast_i_i_fu_827_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile29_load_cast_i_i_reg_1795 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile28_load_cast_i_i_fu_831_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile28_load_cast_i_i_reg_1800 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile17_load_cast_i_i_fu_835_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile17_load_cast_i_i_reg_1805 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile16_load_cast_i_i_fu_839_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile16_load_cast_i_i_reg_1810 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile15_load_cast_i_i_fu_843_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile15_load_cast_i_i_reg_1815 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile14_load_cast_i_i_fu_847_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile14_load_cast_i_i_reg_1820 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile3_load_cast_i_i_fu_851_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile3_load_cast_i_i_reg_1825 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile2_load_cast_i_i_fu_855_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile2_load_cast_i_i_reg_1830 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile1_load_cast_i_i_fu_859_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile1_load_cast_i_i_reg_1835 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_load_cast_i_i_fu_863_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_regfile_load_cast_i_i_reg_1840 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln128_1_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_1_reg_1845 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_1_reg_1845_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_1_reg_1845_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_1_reg_1845_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_1_reg_1845_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_1_reg_1845_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln128_1_reg_1845_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln128_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln128_reg_1849 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln143_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_reg_1854 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_reg_1854_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln143_fu_905_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln143_reg_1864 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln143_1_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_1_reg_1869 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_fu_994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_reg_1904 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_reg_1904_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_reg_1904_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_reg_1904_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln143_3_reg_1904_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln188_3_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_3_reg_1930 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_1079_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1955 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_fu_1189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_reg_1985 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_reg_1985_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_reg_1985_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_reg_1985_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln188_fu_1200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_reg_1990 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_reg_1990_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_reg_1990_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_reg_1990_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_1_fu_1231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_1_reg_1994 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_1_reg_1994_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_1_reg_1994_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_1_reg_1994_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln188_1_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_1_reg_1999 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_1_reg_1999_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_1_reg_1999_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_1_reg_1999_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln188_2_fu_1268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_2_reg_2003 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_2_reg_2003_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_2_reg_2003_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln188_2_reg_2003_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln188_2_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_2_reg_2008 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_2_reg_2008_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_2_reg_2008_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_2_reg_2008_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_3_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_3_reg_2012 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_3_reg_2012_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_3_reg_2012_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_3_reg_2012_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_2_reg_2056 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_fu_1470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_5_reg_2061 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_8_reg_2066 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_11_reg_2071 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_1_reg_2076 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_1498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_4_reg_2081 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_7_reg_2086 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_10_reg_2091 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1519_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_reg_2096 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal grp_fu_1526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_3_reg_2101 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1533_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_6_reg_2106 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln180_9_reg_2111 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln200_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_2116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln200_fu_1449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal wh_cast_i_i_fu_1455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wh_cast_i_i_reg_2125 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_610_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_psum_14_phi_fu_622_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_13_phi_fu_634_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_12_phi_fu_646_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_10_phi_fu_658_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_9_phi_fu_670_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_8_phi_fu_682_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_6_phi_fu_694_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_5_phi_fu_706_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_4_phi_fu_718_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_2_phi_fu_730_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_1_phi_fu_742_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_psum_phi_fu_754_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln143_2_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_fu_1372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_1_fu_1376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_2_fu_1380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_fu_1574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_28_fu_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_29_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_30_fu_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_fu_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_fu_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_33_fu_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_34_fu_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_35_fu_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_36_fu_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln142_2_fu_1328_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_37_fu_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln142_1_fu_1065_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_38_fu_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln142_fu_969_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_39_fu_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln365_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln140_fu_909_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln142_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln140_2_fu_977_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln140_4_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln128_fu_1047_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln140_1_fu_1051_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_fu_1057_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln140_3_fu_1073_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_fu_1093_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln152_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln152_1_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_fu_1135_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_1141_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln152_2_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln187_fu_1169_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_fu_1175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln187_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln187_1_fu_1211_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_fu_1217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_1_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln187_1_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln187_2_fu_1248_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_fu_1254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_2_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln187_2_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln142_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1484_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1491_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1519_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1533_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1547_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1556_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1565_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1574_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_block_pp1 : BOOLEAN;
    signal ap_enable_operation_131 : BOOLEAN;
    signal ap_enable_state4_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_170 : BOOLEAN;
    signal ap_enable_state5_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_330 : BOOLEAN;
    signal ap_enable_state9_pp0_iter7_stage0 : BOOLEAN;
    signal ap_enable_operation_133 : BOOLEAN;
    signal ap_enable_operation_174 : BOOLEAN;
    signal ap_enable_operation_334 : BOOLEAN;
    signal ap_enable_operation_135 : BOOLEAN;
    signal ap_enable_operation_179 : BOOLEAN;
    signal ap_enable_operation_338 : BOOLEAN;
    signal ap_predicate_op137_load_state4 : BOOLEAN;
    signal ap_enable_operation_137 : BOOLEAN;
    signal ap_predicate_op181_load_state5 : BOOLEAN;
    signal ap_enable_operation_181 : BOOLEAN;
    signal ap_enable_operation_341 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_l1_local_3_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_3_address0,
        ce0 => output_l1_local_3_ce0,
        we0 => output_l1_local_3_we0,
        d0 => grp_fu_1547_p3,
        q0 => output_l1_local_3_q0,
        address1 => output_l1_local_3_address1,
        ce1 => output_l1_local_3_ce1,
        q1 => output_l1_local_3_q1);

    output_l1_local_2_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_2_address0,
        ce0 => output_l1_local_2_ce0,
        we0 => output_l1_local_2_we0,
        d0 => grp_fu_1556_p3,
        q0 => output_l1_local_2_q0,
        address1 => output_l1_local_2_address1,
        ce1 => output_l1_local_2_ce1,
        q1 => output_l1_local_2_q1);

    output_l1_local_1_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_1_address0,
        ce0 => output_l1_local_1_ce0,
        we0 => output_l1_local_1_we0,
        d0 => grp_fu_1565_p3,
        q0 => output_l1_local_1_q0,
        address1 => output_l1_local_1_address1,
        ce1 => output_l1_local_1_ce1,
        q1 => output_l1_local_1_q1);

    output_l1_local_0_U : component Conv_sysarr_dbbuf_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_0_address0,
        ce0 => output_l1_local_0_ce0,
        we0 => output_l1_local_0_we0,
        d0 => grp_fu_1574_p3,
        q0 => output_l1_local_0_q0,
        address1 => output_l1_local_0_address1,
        ce1 => output_l1_local_0_ce1,
        q1 => output_l1_local_0_q1);

    mul_32s_32s_32_1_1_U97 : component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_dout,
        din1 => empty_dout,
        dout => mul_ln286_fu_773_p2);

    mac_muladd_8s_8s_32ns_32_4_1_U98 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_31_fu_216,
        din1 => grp_fu_1463_p1,
        din2 => grp_fu_1463_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1463_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U99 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_35_fu_232,
        din1 => grp_fu_1470_p1,
        din2 => grp_fu_1470_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1470_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U100 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_39_fu_248,
        din1 => grp_fu_1477_p1,
        din2 => grp_fu_1477_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1477_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U101 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_l1buf_018_q0,
        din1 => grp_fu_1484_p1,
        din2 => grp_fu_1484_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1484_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U102 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_30_fu_212,
        din1 => grp_fu_1491_p1,
        din2 => ap_phi_mux_psum_2_phi_fu_730_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1491_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U103 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_34_fu_228,
        din1 => grp_fu_1498_p1,
        din2 => ap_phi_mux_psum_6_phi_fu_694_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1498_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U104 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_38_fu_244,
        din1 => grp_fu_1505_p1,
        din2 => ap_phi_mux_psum_10_phi_fu_658_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1505_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U105 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln142_fu_969_p3,
        din1 => grp_fu_1512_p1,
        din2 => ap_phi_mux_psum_14_phi_fu_622_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1512_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U106 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_29_fu_208,
        din1 => grp_fu_1519_p1,
        din2 => ap_phi_mux_psum_1_phi_fu_742_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1519_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U107 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_33_fu_224,
        din1 => grp_fu_1526_p1,
        din2 => ap_phi_mux_psum_5_phi_fu_706_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1526_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U108 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_37_fu_240,
        din1 => grp_fu_1533_p1,
        din2 => ap_phi_mux_psum_9_phi_fu_670_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1533_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U109 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln142_1_fu_1065_p3,
        din1 => grp_fu_1540_p1,
        din2 => ap_phi_mux_psum_13_phi_fu_634_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1540_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U110 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1547_p0,
        din1 => empty_28_fu_204,
        din2 => ap_phi_mux_psum_phi_fu_754_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1547_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U111 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1556_p0,
        din1 => empty_32_fu_220,
        din2 => ap_phi_mux_psum_4_phi_fu_718_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1556_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U112 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1565_p0,
        din1 => empty_36_fu_236,
        din2 => ap_phi_mux_psum_8_phi_fu_682_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1565_p3);

    mac_muladd_8s_8s_32ns_32_4_1_U113 : component Conv_sysarr_dbbuf_mac_muladd_8s_8s_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1574_p0,
        din1 => select_ln142_2_fu_1328_p3,
        din2 => ap_phi_mux_psum_12_phi_fu_646_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1574_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (icmp_ln128_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state6)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (icmp_ln128_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (icmp_ln128_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_606 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln128_1_reg_1845 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_606 <= add_ln128_reg_1849;
            end if; 
        end if;
    end process;

    wh_reg_762_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln200_fu_1444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                wh_reg_762 <= add_ln200_fu_1449_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                wh_reg_762 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln128_reg_1849 <= add_ln128_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln180_10_reg_2091 <= grp_fu_1512_p3;
                add_ln180_1_reg_2076 <= grp_fu_1491_p3;
                add_ln180_4_reg_2081 <= grp_fu_1498_p3;
                add_ln180_7_reg_2086 <= grp_fu_1505_p3;
                psum_10_reg_654 <= add_ln180_8_reg_2066;
                psum_14_reg_618 <= add_ln180_11_reg_2071;
                psum_2_reg_726 <= add_ln180_2_reg_2056;
                psum_6_reg_690 <= add_ln180_5_reg_2061;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln180_11_reg_2071 <= grp_fu_1484_p3;
                add_ln180_2_reg_2056 <= grp_fu_1463_p3;
                add_ln180_5_reg_2061 <= grp_fu_1470_p3;
                add_ln180_8_reg_2066 <= grp_fu_1477_p3;
                empty_36_fu_236 <= select_ln142_2_fu_1328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln180_3_reg_2101 <= grp_fu_1526_p3;
                add_ln180_6_reg_2106 <= grp_fu_1533_p3;
                add_ln180_9_reg_2111 <= grp_fu_1540_p3;
                add_ln180_reg_2096 <= grp_fu_1519_p3;
                psum_13_reg_630 <= add_ln180_10_reg_2091;
                psum_1_reg_738 <= add_ln180_1_reg_2076;
                psum_5_reg_702 <= add_ln180_4_reg_2081;
                psum_9_reg_666 <= add_ln180_7_reg_2086;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_1_reg_1845_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln188_1_reg_1994 <= add_ln188_1_fu_1231_p2;
                add_ln188_2_reg_2003 <= add_ln188_2_fu_1268_p2;
                add_ln188_reg_1985 <= add_ln188_fu_1189_p2;
                and_ln188_1_reg_1999 <= and_ln188_1_fu_1242_p2;
                and_ln188_2_reg_2008 <= and_ln188_2_fu_1279_p2;
                and_ln188_3_reg_2012 <= and_ln188_3_fu_1285_p2;
                and_ln188_reg_1990 <= and_ln188_fu_1200_p2;
                tmp_4_reg_1955 <= add_ln140_3_fu_1073_p2(32 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln188_1_reg_1994_pp0_iter4_reg <= add_ln188_1_reg_1994;
                add_ln188_1_reg_1994_pp0_iter5_reg <= add_ln188_1_reg_1994_pp0_iter4_reg;
                add_ln188_1_reg_1994_pp0_iter6_reg <= add_ln188_1_reg_1994_pp0_iter5_reg;
                add_ln188_2_reg_2003_pp0_iter4_reg <= add_ln188_2_reg_2003;
                add_ln188_2_reg_2003_pp0_iter5_reg <= add_ln188_2_reg_2003_pp0_iter4_reg;
                add_ln188_2_reg_2003_pp0_iter6_reg <= add_ln188_2_reg_2003_pp0_iter5_reg;
                add_ln188_reg_1985_pp0_iter4_reg <= add_ln188_reg_1985;
                add_ln188_reg_1985_pp0_iter5_reg <= add_ln188_reg_1985_pp0_iter4_reg;
                add_ln188_reg_1985_pp0_iter6_reg <= add_ln188_reg_1985_pp0_iter5_reg;
                and_ln188_1_reg_1999_pp0_iter4_reg <= and_ln188_1_reg_1999;
                and_ln188_1_reg_1999_pp0_iter5_reg <= and_ln188_1_reg_1999_pp0_iter4_reg;
                and_ln188_1_reg_1999_pp0_iter6_reg <= and_ln188_1_reg_1999_pp0_iter5_reg;
                and_ln188_2_reg_2008_pp0_iter4_reg <= and_ln188_2_reg_2008;
                and_ln188_2_reg_2008_pp0_iter5_reg <= and_ln188_2_reg_2008_pp0_iter4_reg;
                and_ln188_2_reg_2008_pp0_iter6_reg <= and_ln188_2_reg_2008_pp0_iter5_reg;
                and_ln188_3_reg_2012_pp0_iter4_reg <= and_ln188_3_reg_2012;
                and_ln188_3_reg_2012_pp0_iter5_reg <= and_ln188_3_reg_2012_pp0_iter4_reg;
                and_ln188_3_reg_2012_pp0_iter6_reg <= and_ln188_3_reg_2012_pp0_iter5_reg;
                and_ln188_reg_1990_pp0_iter4_reg <= and_ln188_reg_1990;
                and_ln188_reg_1990_pp0_iter5_reg <= and_ln188_reg_1990_pp0_iter4_reg;
                and_ln188_reg_1990_pp0_iter6_reg <= and_ln188_reg_1990_pp0_iter5_reg;
                i_reg_606_pp0_iter2_reg <= i_reg_606_pp0_iter1_reg;
                icmp_ln128_1_reg_1845_pp0_iter2_reg <= icmp_ln128_1_reg_1845_pp0_iter1_reg;
                icmp_ln128_1_reg_1845_pp0_iter3_reg <= icmp_ln128_1_reg_1845_pp0_iter2_reg;
                icmp_ln128_1_reg_1845_pp0_iter4_reg <= icmp_ln128_1_reg_1845_pp0_iter3_reg;
                icmp_ln128_1_reg_1845_pp0_iter5_reg <= icmp_ln128_1_reg_1845_pp0_iter4_reg;
                icmp_ln128_1_reg_1845_pp0_iter6_reg <= icmp_ln128_1_reg_1845_pp0_iter5_reg;
                    zext_ln143_3_reg_1904_pp0_iter3_reg(31 downto 0) <= zext_ln143_3_reg_1904(31 downto 0);
                    zext_ln143_3_reg_1904_pp0_iter4_reg(31 downto 0) <= zext_ln143_3_reg_1904_pp0_iter3_reg(31 downto 0);
                    zext_ln143_3_reg_1904_pp0_iter5_reg(31 downto 0) <= zext_ln143_3_reg_1904_pp0_iter4_reg(31 downto 0);
                    zext_ln143_3_reg_1904_pp0_iter6_reg(31 downto 0) <= zext_ln143_3_reg_1904_pp0_iter5_reg(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln286_reg_1672 <= add_ln286_fu_779_p2;
                icmp_ln365_reg_1677 <= icmp_ln365_fu_791_p2;
                mul_ln286_reg_1663 <= mul_ln286_fu_773_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_28_fu_204 <= empty_32_fu_220;
                empty_32_fu_220 <= empty_36_fu_236;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_29_fu_208 <= empty_33_fu_224;
                empty_33_fu_224 <= empty_37_fu_240;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_30_fu_212 <= empty_34_fu_228;
                empty_34_fu_228 <= empty_38_fu_244;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_31_fu_216 <= empty_35_fu_232;
                empty_35_fu_232 <= empty_39_fu_248;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_37_fu_240 <= select_ln142_1_fu_1065_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_38_fu_244 <= select_ln142_fu_969_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln128_1_reg_1845 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_39_fu_248 <= data_l1buf_018_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_606_pp0_iter1_reg <= i_reg_606;
                icmp_ln128_1_reg_1845 <= icmp_ln128_1_fu_867_p2;
                icmp_ln128_1_reg_1845_pp0_iter1_reg <= icmp_ln128_1_reg_1845;
                    zext_ln143_reg_1854_pp0_iter1_reg(31 downto 0) <= zext_ln143_reg_1854(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_1_reg_1845_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln188_3_reg_1930 <= icmp_ln188_3_fu_1004_p2;
                    zext_ln143_3_reg_1904(31 downto 0) <= zext_ln143_3_fu_994_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln200_reg_2116 <= icmp_ln200_fu_1444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                psum_12_reg_642 <= add_ln180_9_reg_2111;
                psum_4_reg_714 <= add_ln180_3_reg_2101;
                psum_8_reg_678 <= add_ln180_6_reg_2106;
                psum_reg_750 <= add_ln180_reg_2096;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_1_reg_1845 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln143_reg_1864 <= trunc_ln143_fu_905_p1;
                    zext_ln143_1_reg_1869(9 downto 0) <= zext_ln143_1_fu_915_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (icmp_ln128_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                weight_regfile14_load_cast_i_i_reg_1820 <= weight_regfile14_load_cast_i_i_fu_847_p1;
                weight_regfile15_load_cast_i_i_reg_1815 <= weight_regfile15_load_cast_i_i_fu_843_p1;
                weight_regfile16_load_cast_i_i_reg_1810 <= weight_regfile16_load_cast_i_i_fu_839_p1;
                weight_regfile17_load_cast_i_i_reg_1805 <= weight_regfile17_load_cast_i_i_fu_835_p1;
                weight_regfile1_load_cast_i_i_reg_1835 <= weight_regfile1_load_cast_i_i_fu_859_p1;
                weight_regfile210_load_cast_i_i_reg_1790 <= weight_regfile210_load_cast_i_i_fu_823_p1;
                weight_regfile211_load_cast_i_i_reg_1785 <= weight_regfile211_load_cast_i_i_fu_819_p1;
                weight_regfile28_load_cast_i_i_reg_1800 <= weight_regfile28_load_cast_i_i_fu_831_p1;
                weight_regfile29_load_cast_i_i_reg_1795 <= weight_regfile29_load_cast_i_i_fu_827_p1;
                weight_regfile2_load_cast_i_i_reg_1830 <= weight_regfile2_load_cast_i_i_fu_855_p1;
                weight_regfile312_load_cast_i_i_reg_1780 <= weight_regfile312_load_cast_i_i_fu_815_p1;
                weight_regfile313_load_cast_i_i_reg_1775 <= weight_regfile313_load_cast_i_i_fu_811_p1;
                weight_regfile314_load_cast_i_i_reg_1770 <= weight_regfile314_load_cast_i_i_fu_807_p1;
                weight_regfile315_load_cast_i_i_reg_1765 <= weight_regfile315_load_cast_i_i_fu_803_p1;
                weight_regfile3_load_cast_i_i_reg_1825 <= weight_regfile3_load_cast_i_i_fu_851_p1;
                weight_regfile_load_cast_i_i_reg_1840 <= weight_regfile_load_cast_i_i_fu_863_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln200_fu_1444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    wh_cast_i_i_reg_2125(31 downto 0) <= wh_cast_i_i_fu_1455_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_1_fu_867_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln143_reg_1854(31 downto 0) <= zext_ln143_fu_878_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln143_reg_1854(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln143_reg_1854_pp0_iter1_reg(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln143_1_reg_1869(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln143_3_reg_1904(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln143_3_reg_1904_pp0_iter3_reg(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln143_3_reg_1904_pp0_iter4_reg(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln143_3_reg_1904_pp0_iter5_reg(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln143_3_reg_1904_pp0_iter6_reg(63 downto 32) <= "00000000000000000000000000000000";
    wh_cast_i_i_reg_2125(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n, icmp_ln128_fu_797_p2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, icmp_ln200_fu_1444_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter7, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (icmp_ln128_fu_797_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (icmp_ln128_fu_797_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln200_fu_1444_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln200_fu_1444_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln128_fu_872_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_610_p4) + unsigned(ap_const_lv32_1));
    add_ln140_1_fu_1051_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFE) + signed(zext_ln128_fu_1047_p1));
    add_ln140_2_fu_977_p2 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(trunc_ln143_reg_1864));
    add_ln140_3_fu_1073_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFD) + signed(zext_ln128_fu_1047_p1));
    add_ln140_4_fu_988_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFD) + signed(i_reg_606_pp0_iter1_reg));
    add_ln140_fu_909_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(trunc_ln143_fu_905_p1));
    add_ln150_fu_1135_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFF) + signed(zext_ln128_fu_1047_p1));
    add_ln187_1_fu_1211_p2 <= std_logic_vector(unsigned(zext_ln128_fu_1047_p1) + unsigned(ap_const_lv33_1FFFFFFFB));
    add_ln187_2_fu_1248_p2 <= std_logic_vector(unsigned(zext_ln128_fu_1047_p1) + unsigned(ap_const_lv33_1FFFFFFFC));
    add_ln187_fu_1169_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFA) + signed(zext_ln128_fu_1047_p1));
    add_ln188_1_fu_1231_p2 <= std_logic_vector(unsigned(i_reg_606_pp0_iter2_reg) + unsigned(ap_const_lv32_FFFFFFFB));
    add_ln188_2_fu_1268_p2 <= std_logic_vector(unsigned(i_reg_606_pp0_iter2_reg) + unsigned(ap_const_lv32_FFFFFFFC));
    add_ln188_fu_1189_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFA) + signed(i_reg_606_pp0_iter2_reg));
    add_ln200_fu_1449_p2 <= std_logic_vector(unsigned(wh_reg_762) + unsigned(ap_const_lv32_1));
    add_ln286_fu_779_p2 <= std_logic_vector(unsigned(mul_ln286_fu_773_p2) + unsigned(ap_const_lv32_6));
    and_ln188_1_fu_1242_p2 <= (xor_ln187_1_fu_1225_p2 and icmp_ln188_1_fu_1237_p2);
    and_ln188_2_fu_1279_p2 <= (xor_ln187_2_fu_1262_p2 and icmp_ln188_2_fu_1274_p2);
    and_ln188_3_fu_1285_p2 <= (xor_ln142_fu_1087_p2 and icmp_ln188_3_reg_1930);
    and_ln188_fu_1200_p2 <= (xor_ln187_fu_1183_p2 and icmp_ln188_fu_1195_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
    ap_CS_fsm_state13 <= ap_CS_fsm(4);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_assign_proc : process(ap_CS_fsm, ap_block_pp1_stage0_subdone)
    begin
                ap_block_pp1 <= ((ap_ST_fsm_pp1_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp1_stage0_subdone));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, empty_empty_n, s_empty_n, r_empty_n)
    begin
                ap_block_state1 <= ((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0));
    end process;

        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter4_state6_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_1_fu_867_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln128_1_fu_867_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state11_assign_proc : process(icmp_ln200_fu_1444_p2)
    begin
        if ((icmp_ln200_fu_1444_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_131_assign_proc : process(icmp_ln128_1_reg_1845_pp0_iter1_reg)
    begin
                ap_enable_operation_131 <= (icmp_ln128_1_reg_1845_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_133_assign_proc : process(icmp_ln128_1_reg_1845_pp0_iter1_reg)
    begin
                ap_enable_operation_133 <= (icmp_ln128_1_reg_1845_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_135_assign_proc : process(icmp_ln128_1_reg_1845_pp0_iter1_reg)
    begin
                ap_enable_operation_135 <= (icmp_ln128_1_reg_1845_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_137_assign_proc : process(ap_predicate_op137_load_state4)
    begin
                ap_enable_operation_137 <= (ap_predicate_op137_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_170_assign_proc : process(icmp_ln128_1_reg_1845_pp0_iter2_reg)
    begin
                ap_enable_operation_170 <= (icmp_ln128_1_reg_1845_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_174_assign_proc : process(icmp_ln128_1_reg_1845_pp0_iter2_reg)
    begin
                ap_enable_operation_174 <= (icmp_ln128_1_reg_1845_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_179_assign_proc : process(icmp_ln128_1_reg_1845_pp0_iter2_reg)
    begin
                ap_enable_operation_179 <= (icmp_ln128_1_reg_1845_pp0_iter2_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_181_assign_proc : process(ap_predicate_op181_load_state5)
    begin
                ap_enable_operation_181 <= (ap_predicate_op181_load_state5 = ap_const_boolean_1);
    end process;


    ap_enable_operation_330_assign_proc : process(and_ln188_reg_1990_pp0_iter6_reg)
    begin
                ap_enable_operation_330 <= (ap_const_lv1_1 = and_ln188_reg_1990_pp0_iter6_reg);
    end process;


    ap_enable_operation_334_assign_proc : process(and_ln188_1_reg_1999_pp0_iter6_reg)
    begin
                ap_enable_operation_334 <= (ap_const_lv1_1 = and_ln188_1_reg_1999_pp0_iter6_reg);
    end process;


    ap_enable_operation_338_assign_proc : process(and_ln188_2_reg_2008_pp0_iter6_reg)
    begin
                ap_enable_operation_338 <= (ap_const_lv1_1 = and_ln188_2_reg_2008_pp0_iter6_reg);
    end process;


    ap_enable_operation_341_assign_proc : process(and_ln188_3_reg_2012_pp0_iter6_reg)
    begin
                ap_enable_operation_341 <= (ap_const_lv1_1 = and_ln188_3_reg_2012_pp0_iter6_reg);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_enable_state4_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state4_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state5_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state9_pp0_iter7_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7)
    begin
                ap_enable_state9_pp0_iter7_stage0 <= ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_610_p4_assign_proc : process(i_reg_606, ap_CS_fsm_pp0_stage0, icmp_ln128_1_reg_1845, add_ln128_reg_1849, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln128_1_reg_1845 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_610_p4 <= add_ln128_reg_1849;
        else 
            ap_phi_mux_i_phi_fu_610_p4 <= i_reg_606;
        end if; 
    end process;


    ap_phi_mux_psum_10_phi_fu_658_p4_assign_proc : process(psum_10_reg_654, icmp_ln128_1_reg_1845_pp0_iter4_reg, add_ln180_8_reg_2066, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_10_phi_fu_658_p4 <= add_ln180_8_reg_2066;
        else 
            ap_phi_mux_psum_10_phi_fu_658_p4 <= psum_10_reg_654;
        end if; 
    end process;


    ap_phi_mux_psum_12_phi_fu_646_p4_assign_proc : process(psum_12_reg_642, icmp_ln128_1_reg_1845_pp0_iter6_reg, add_ln180_9_reg_2111, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_12_phi_fu_646_p4 <= add_ln180_9_reg_2111;
        else 
            ap_phi_mux_psum_12_phi_fu_646_p4 <= psum_12_reg_642;
        end if; 
    end process;


    ap_phi_mux_psum_13_phi_fu_634_p4_assign_proc : process(psum_13_reg_630, icmp_ln128_1_reg_1845_pp0_iter5_reg, add_ln180_10_reg_2091, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_13_phi_fu_634_p4 <= add_ln180_10_reg_2091;
        else 
            ap_phi_mux_psum_13_phi_fu_634_p4 <= psum_13_reg_630;
        end if; 
    end process;


    ap_phi_mux_psum_14_phi_fu_622_p4_assign_proc : process(psum_14_reg_618, icmp_ln128_1_reg_1845_pp0_iter4_reg, add_ln180_11_reg_2071, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_14_phi_fu_622_p4 <= add_ln180_11_reg_2071;
        else 
            ap_phi_mux_psum_14_phi_fu_622_p4 <= psum_14_reg_618;
        end if; 
    end process;


    ap_phi_mux_psum_1_phi_fu_742_p4_assign_proc : process(psum_1_reg_738, icmp_ln128_1_reg_1845_pp0_iter5_reg, add_ln180_1_reg_2076, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_1_phi_fu_742_p4 <= add_ln180_1_reg_2076;
        else 
            ap_phi_mux_psum_1_phi_fu_742_p4 <= psum_1_reg_738;
        end if; 
    end process;


    ap_phi_mux_psum_2_phi_fu_730_p4_assign_proc : process(psum_2_reg_726, icmp_ln128_1_reg_1845_pp0_iter4_reg, add_ln180_2_reg_2056, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_2_phi_fu_730_p4 <= add_ln180_2_reg_2056;
        else 
            ap_phi_mux_psum_2_phi_fu_730_p4 <= psum_2_reg_726;
        end if; 
    end process;


    ap_phi_mux_psum_4_phi_fu_718_p4_assign_proc : process(psum_4_reg_714, icmp_ln128_1_reg_1845_pp0_iter6_reg, add_ln180_3_reg_2101, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_4_phi_fu_718_p4 <= add_ln180_3_reg_2101;
        else 
            ap_phi_mux_psum_4_phi_fu_718_p4 <= psum_4_reg_714;
        end if; 
    end process;


    ap_phi_mux_psum_5_phi_fu_706_p4_assign_proc : process(psum_5_reg_702, icmp_ln128_1_reg_1845_pp0_iter5_reg, add_ln180_4_reg_2081, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_5_phi_fu_706_p4 <= add_ln180_4_reg_2081;
        else 
            ap_phi_mux_psum_5_phi_fu_706_p4 <= psum_5_reg_702;
        end if; 
    end process;


    ap_phi_mux_psum_6_phi_fu_694_p4_assign_proc : process(psum_6_reg_690, icmp_ln128_1_reg_1845_pp0_iter4_reg, add_ln180_5_reg_2061, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_6_phi_fu_694_p4 <= add_ln180_5_reg_2061;
        else 
            ap_phi_mux_psum_6_phi_fu_694_p4 <= psum_6_reg_690;
        end if; 
    end process;


    ap_phi_mux_psum_8_phi_fu_682_p4_assign_proc : process(psum_8_reg_678, icmp_ln128_1_reg_1845_pp0_iter6_reg, add_ln180_6_reg_2106, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_8_phi_fu_682_p4 <= add_ln180_6_reg_2106;
        else 
            ap_phi_mux_psum_8_phi_fu_682_p4 <= psum_8_reg_678;
        end if; 
    end process;


    ap_phi_mux_psum_9_phi_fu_670_p4_assign_proc : process(psum_9_reg_666, icmp_ln128_1_reg_1845_pp0_iter5_reg, add_ln180_7_reg_2086, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_9_phi_fu_670_p4 <= add_ln180_7_reg_2086;
        else 
            ap_phi_mux_psum_9_phi_fu_670_p4 <= psum_9_reg_666;
        end if; 
    end process;


    ap_phi_mux_psum_phi_fu_754_p4_assign_proc : process(psum_reg_750, icmp_ln128_1_reg_1845_pp0_iter6_reg, add_ln180_reg_2096, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln128_1_reg_1845_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_psum_phi_fu_754_p4 <= add_ln180_reg_2096;
        else 
            ap_phi_mux_psum_phi_fu_754_p4 <= psum_reg_750;
        end if; 
    end process;


    ap_predicate_op137_load_state4_assign_proc : process(icmp_ln365_reg_1677, icmp_ln128_1_reg_1845_pp0_iter1_reg)
    begin
                ap_predicate_op137_load_state4 <= ((icmp_ln128_1_reg_1845_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln365_reg_1677 = ap_const_lv1_0));
    end process;


    ap_predicate_op181_load_state5_assign_proc : process(icmp_ln365_reg_1677, icmp_ln128_1_reg_1845_pp0_iter2_reg)
    begin
                ap_predicate_op181_load_state5 <= ((icmp_ln128_1_reg_1845_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln365_reg_1677 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_018_address0 <= zext_ln143_fu_878_p1(9 - 1 downto 0);

    data_l1buf_018_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_018_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_018_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_119_address0 <= zext_ln143_1_fu_915_p1(9 - 1 downto 0);

    data_l1buf_119_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_119_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_119_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_220_address0 <= zext_ln143_2_fu_982_p1(9 - 1 downto 0);

    data_l1buf_220_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_220_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_220_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_321_address0 <= zext_ln143_3_reg_1904(9 - 1 downto 0);

    data_l1buf_321_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_l1buf_321_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_321_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_blk_n <= empty_empty_n;
        else 
            empty_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_read <= ap_const_logic_1;
        else 
            empty_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1463_p1 <= weight_regfile312_load_cast_i_i_reg_1780(8 - 1 downto 0);
    grp_fu_1463_p2 <= 
        ap_const_lv32_0 when (or_ln152_fu_1101_p2(0) = '1') else 
        output_l1_local_3_q1;
    grp_fu_1470_p1 <= weight_regfile28_load_cast_i_i_reg_1800(8 - 1 downto 0);
    grp_fu_1470_p2 <= 
        ap_const_lv32_0 when (or_ln152_1_fu_1122_p2(0) = '1') else 
        output_l1_local_2_q1;
    grp_fu_1477_p1 <= weight_regfile14_load_cast_i_i_reg_1820(8 - 1 downto 0);
    grp_fu_1477_p2 <= 
        ap_const_lv32_0 when (or_ln152_2_fu_1149_p2(0) = '1') else 
        output_l1_local_1_q1;
    grp_fu_1484_p1 <= weight_regfile_load_cast_i_i_reg_1840(8 - 1 downto 0);
    grp_fu_1484_p2 <= 
        ap_const_lv32_0 when (icmp_ln365_reg_1677(0) = '1') else 
        output_l1_local_0_q1;
    grp_fu_1491_p1 <= weight_regfile313_load_cast_i_i_reg_1775(8 - 1 downto 0);
    grp_fu_1498_p1 <= weight_regfile29_load_cast_i_i_reg_1795(8 - 1 downto 0);
    grp_fu_1505_p1 <= weight_regfile15_load_cast_i_i_reg_1815(8 - 1 downto 0);
    grp_fu_1512_p1 <= weight_regfile1_load_cast_i_i_reg_1835(8 - 1 downto 0);
    grp_fu_1519_p1 <= weight_regfile314_load_cast_i_i_reg_1770(8 - 1 downto 0);
    grp_fu_1526_p1 <= weight_regfile210_load_cast_i_i_reg_1790(8 - 1 downto 0);
    grp_fu_1533_p1 <= weight_regfile16_load_cast_i_i_reg_1810(8 - 1 downto 0);
    grp_fu_1540_p1 <= weight_regfile2_load_cast_i_i_reg_1830(8 - 1 downto 0);
    grp_fu_1547_p0 <= weight_regfile315_load_cast_i_i_reg_1765(8 - 1 downto 0);
    grp_fu_1556_p0 <= weight_regfile211_load_cast_i_i_reg_1785(8 - 1 downto 0);
    grp_fu_1565_p0 <= weight_regfile17_load_cast_i_i_reg_1805(8 - 1 downto 0);
    grp_fu_1574_p0 <= weight_regfile3_load_cast_i_i_reg_1825(8 - 1 downto 0);
    icmp_ln128_1_fu_867_p2 <= "1" when (ap_phi_mux_i_phi_fu_610_p4 = add_ln286_reg_1672) else "0";
    icmp_ln128_fu_797_p2 <= "1" when (add_ln286_fu_779_p2 = ap_const_lv32_0) else "0";
    icmp_ln142_fu_963_p2 <= "1" when (i_reg_606_pp0_iter1_reg = ap_const_lv32_0) else "0";
    icmp_ln188_1_fu_1237_p2 <= "1" when (unsigned(add_ln188_1_fu_1231_p2) < unsigned(mul_ln286_reg_1663)) else "0";
    icmp_ln188_2_fu_1274_p2 <= "1" when (unsigned(add_ln188_2_fu_1268_p2) < unsigned(mul_ln286_reg_1663)) else "0";
    icmp_ln188_3_fu_1004_p2 <= "1" when (unsigned(add_ln140_4_fu_988_p2) < unsigned(mul_ln286_reg_1663)) else "0";
    icmp_ln188_fu_1195_p2 <= "1" when (unsigned(add_ln188_fu_1189_p2) < unsigned(mul_ln286_reg_1663)) else "0";
    icmp_ln200_fu_1444_p2 <= "1" when (wh_reg_762 = mul_ln286_reg_1663) else "0";
    icmp_ln365_fu_791_p2 <= "1" when (or_ln365_fu_785_p2 = ap_const_lv32_0) else "0";
    or_ln152_1_fu_1122_p2 <= (tmp_6_fu_1114_p3 or icmp_ln365_reg_1677);
    or_ln152_2_fu_1149_p2 <= (tmp_7_fu_1141_p3 or icmp_ln365_reg_1677);
    or_ln152_fu_1101_p2 <= (tmp_5_fu_1093_p3 or icmp_ln365_reg_1677);
    or_ln365_fu_785_p2 <= (s_dout or r_dout);

    output_l1_local_0_address0_assign_proc : process(zext_ln143_3_reg_1904_pp0_iter6_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, wh_cast_i_i_fu_1455_p1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            output_l1_local_0_address0 <= wh_cast_i_i_fu_1455_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_l1_local_0_address0 <= zext_ln143_3_reg_1904_pp0_iter6_reg(10 - 1 downto 0);
        else 
            output_l1_local_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    output_l1_local_0_address1 <= zext_ln143_reg_1854_pp0_iter1_reg(10 - 1 downto 0);

    output_l1_local_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_l1_local_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_0_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln188_3_reg_2012_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln188_3_reg_2012_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_0_we0 <= ap_const_logic_1;
        else 
            output_l1_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_1_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, wh_cast_i_i_fu_1455_p1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, zext_ln193_2_fu_1380_p1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            output_l1_local_1_address0 <= wh_cast_i_i_fu_1455_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_l1_local_1_address0 <= zext_ln193_2_fu_1380_p1(10 - 1 downto 0);
        else 
            output_l1_local_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    output_l1_local_1_address1 <= zext_ln143_1_reg_1869(10 - 1 downto 0);

    output_l1_local_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_l1_local_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_1_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln188_2_reg_2008_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln188_2_reg_2008_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_1_we0 <= ap_const_logic_1;
        else 
            output_l1_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_2_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, wh_cast_i_i_fu_1455_p1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, zext_ln193_1_fu_1376_p1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            output_l1_local_2_address0 <= wh_cast_i_i_fu_1455_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_l1_local_2_address0 <= zext_ln193_1_fu_1376_p1(10 - 1 downto 0);
        else 
            output_l1_local_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    output_l1_local_2_address1 <= zext_ln143_2_fu_982_p1(10 - 1 downto 0);

    output_l1_local_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_l1_local_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_2_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln188_1_reg_1999_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln188_1_reg_1999_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_2_we0 <= ap_const_logic_1;
        else 
            output_l1_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_3_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, wh_cast_i_i_fu_1455_p1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, zext_ln193_fu_1372_p1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            output_l1_local_3_address0 <= wh_cast_i_i_fu_1455_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            output_l1_local_3_address0 <= zext_ln193_fu_1372_p1(10 - 1 downto 0);
        else 
            output_l1_local_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    output_l1_local_3_address1 <= zext_ln143_3_fu_994_p1(10 - 1 downto 0);

    output_l1_local_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_l1_local_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_3_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, and_ln188_reg_1990_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln188_reg_1990_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_l1_local_3_we0 <= ap_const_logic_1;
        else 
            output_l1_local_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_0_address0 <= wh_cast_i_i_reg_2125(10 - 1 downto 0);

    output_l1_pass_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_0_d0 <= output_l1_local_0_q0;

    output_l1_pass_0_we0_assign_proc : process(icmp_ln200_reg_2116, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln200_reg_2116 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_0_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_1_address0 <= wh_cast_i_i_reg_2125(10 - 1 downto 0);

    output_l1_pass_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_1_d0 <= output_l1_local_1_q0;

    output_l1_pass_1_we0_assign_proc : process(icmp_ln200_reg_2116, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln200_reg_2116 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_1_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_2_address0 <= wh_cast_i_i_reg_2125(10 - 1 downto 0);

    output_l1_pass_2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_2_d0 <= output_l1_local_2_q0;

    output_l1_pass_2_we0_assign_proc : process(icmp_ln200_reg_2116, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln200_reg_2116 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_2_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_3_address0 <= wh_cast_i_i_reg_2125(10 - 1 downto 0);

    output_l1_pass_3_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_3_d0 <= output_l1_local_3_q0;

    output_l1_pass_3_we0_assign_proc : process(icmp_ln200_reg_2116, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln200_reg_2116 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_l1_pass_3_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_blk_n <= r_empty_n;
        else 
            r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_read <= ap_const_logic_1;
        else 
            r_read <= ap_const_logic_0;
        end if; 
    end process;


    s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_blk_n <= s_empty_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((empty_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_read <= ap_const_logic_1;
        else 
            s_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln142_1_fu_1065_p3 <= 
        ap_const_lv8_0 when (tmp_3_fu_1057_p3(0) = '1') else 
        data_l1buf_220_q0;
    select_ln142_2_fu_1328_p3 <= 
        ap_const_lv8_0 when (tmp_4_reg_1955(0) = '1') else 
        data_l1buf_321_q0;
    select_ln142_fu_969_p3 <= 
        ap_const_lv8_0 when (icmp_ln142_fu_963_p2(0) = '1') else 
        data_l1buf_119_q0;
    tmp_10_fu_1254_p3 <= add_ln187_2_fu_1248_p2(32 downto 32);
    tmp_3_fu_1057_p3 <= add_ln140_1_fu_1051_p2(32 downto 32);
    tmp_4_fu_1079_p3 <= add_ln140_3_fu_1073_p2(32 downto 32);
    tmp_5_fu_1093_p3 <= add_ln140_3_fu_1073_p2(32 downto 32);
    tmp_6_fu_1114_p3 <= add_ln140_1_fu_1051_p2(32 downto 32);
    tmp_7_fu_1141_p3 <= add_ln150_fu_1135_p2(32 downto 32);
    tmp_8_fu_1175_p3 <= add_ln187_fu_1169_p2(32 downto 32);
    tmp_9_fu_1217_p3 <= add_ln187_1_fu_1211_p2(32 downto 32);
    trunc_ln143_fu_905_p1 <= i_reg_606(10 - 1 downto 0);
        weight_regfile14_load_cast_i_i_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read4),16));

        weight_regfile15_load_cast_i_i_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read5),16));

        weight_regfile16_load_cast_i_i_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read6),16));

        weight_regfile17_load_cast_i_i_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read7),16));

        weight_regfile1_load_cast_i_i_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read1),16));

        weight_regfile210_load_cast_i_i_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read10),16));

        weight_regfile211_load_cast_i_i_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read11),16));

        weight_regfile28_load_cast_i_i_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read8),16));

        weight_regfile29_load_cast_i_i_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read9),16));

        weight_regfile2_load_cast_i_i_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read2),16));

        weight_regfile312_load_cast_i_i_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read12),16));

        weight_regfile313_load_cast_i_i_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read13),16));

        weight_regfile314_load_cast_i_i_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read14),16));

        weight_regfile315_load_cast_i_i_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read15),16));

        weight_regfile3_load_cast_i_i_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read3),16));

        weight_regfile_load_cast_i_i_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read),16));

    wh_cast_i_i_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wh_reg_762),64));
    xor_ln142_fu_1087_p2 <= (tmp_4_fu_1079_p3 xor ap_const_lv1_1);
    xor_ln187_1_fu_1225_p2 <= (tmp_9_fu_1217_p3 xor ap_const_lv1_1);
    xor_ln187_2_fu_1262_p2 <= (tmp_10_fu_1254_p3 xor ap_const_lv1_1);
    xor_ln187_fu_1183_p2 <= (tmp_8_fu_1175_p3 xor ap_const_lv1_1);
    zext_ln128_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_606_pp0_iter2_reg),33));
    zext_ln143_1_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_fu_909_p2),64));
    zext_ln143_2_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_2_fu_977_p2),64));
    zext_ln143_3_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_4_fu_988_p2),64));
    zext_ln143_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_610_p4),64));
    zext_ln193_1_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_1_reg_1994_pp0_iter6_reg),64));
    zext_ln193_2_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_2_reg_2003_pp0_iter6_reg),64));
    zext_ln193_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln188_reg_1985_pp0_iter6_reg),64));
end behav;
