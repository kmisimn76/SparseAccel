-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_dbbuf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bias_in_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bias_in_V_empty_n : IN STD_LOGIC;
    bias_in_V_read : OUT STD_LOGIC;
    weight_in_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    weight_in_V_empty_n : IN STD_LOGIC;
    weight_in_V_read : OUT STD_LOGIC;
    data_in_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    data_in_V_empty_n : IN STD_LOGIC;
    data_in_V_read : OUT STD_LOGIC;
    conv_out_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    conv_out_V_full_n : IN STD_LOGIC;
    conv_out_V_write : OUT STD_LOGIC );
end;


architecture behav of Conv_sysarr_dbbuf is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv_sysarr_dbbuf_Conv_sysarr_dbbuf,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.489000,HLS_SYN_LAT=4794,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=0,HLS_SYN_FF=9357,HLS_SYN_LUT=9124,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv60_1 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln288_reg_1554 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_in_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln296_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln296_reg_1583_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_in_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln310_reg_1629 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln310_reg_1629_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_out_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln422_reg_1855 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln422_reg_1855_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ko_reg_547 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten_reg_559 : STD_LOGIC_VECTOR (61 downto 0);
    signal crs_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal ko_1_reg_581 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten6_reg_592 : STD_LOGIC_VECTOR (61 downto 0);
    signal wh_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal co_reg_614 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_flatten13_reg_659 : STD_LOGIC_VECTOR (63 downto 0);
    signal hi_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal wi_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten32_reg_703 : STD_LOGIC_VECTOR (61 downto 0);
    signal ko_3_reg_714 : STD_LOGIC_VECTOR (29 downto 0);
    signal wh_1_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_reg_1480 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bias_in_V_read_1_reg_1489 : STD_LOGIC_VECTOR (255 downto 0);
    signal C_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_in_V_read_2_reg_1500 : STD_LOGIC_VECTOR (255 downto 0);
    signal WH_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal WH_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln271_fu_785_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln271_reg_1513 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_in_V_read_3_reg_1520 : STD_LOGIC_VECTOR (255 downto 0);
    signal WH_in_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal WH_in_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln286_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln286_reg_1531 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln286_fu_797_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln286_reg_1537 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_in_V_read_4_reg_1542 : STD_LOGIC_VECTOR (255 downto 0);
    signal RS_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal RS_reg_1547 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln288_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln288_fu_810_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln288_reg_1558 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1563 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln296_fu_870_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln296_reg_1568 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal cast1_fu_878_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal cast1_reg_1573 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_fu_881_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_reg_1578 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln296_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln296_reg_1583_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln296_fu_892_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln296_1_fu_917_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_1_reg_1592 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln296_1_fu_925_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln296_1_reg_1597 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln296_1_reg_1597_pp1_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln298_fu_933_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_76_fu_988_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_76_reg_1612 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal div76_cast_fu_992_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal div76_cast_reg_1617 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound4_fu_1009_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound4_reg_1624 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln310_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state15_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln310_reg_1629_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln310_fu_1020_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln310_1_fu_1045_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln310_1_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln310_fu_1053_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln310_reg_1643 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln310_reg_1643_pp2_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln312_fu_1061_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln329_fu_1115_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln329_reg_1658 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal mul_ln329_1_fu_1127_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln329_1_reg_1663 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln329_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln329_fu_1138_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal add_ln329_reg_1672 : STD_LOGIC_VECTOR (59 downto 0);
    signal icmp_ln332_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln332_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln329_1_fu_1163_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln329_1_reg_1682 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln329_2_fu_1179_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln329_2_reg_1708 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln422_fu_1190_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln422_reg_1713 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln329_fu_1195_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln329_reg_1718 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal mul_ln329_2_fu_1202_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln329_2_reg_1723 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln329_3_fu_1206_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln329_3_reg_1728 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln329_fu_1211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln329_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln329_1_fu_1215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln329_1_reg_1738 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln329_2_fu_1219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln329_2_reg_1743 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln329_3_fu_1223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln329_3_reg_1748 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln332_fu_1227_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln332_reg_1753 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln340_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln340_reg_1758 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state22_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln340_reg_1758_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln340_reg_1758_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln340_1_fu_1236_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln340_1_fu_1261_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln340_1_reg_1767 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_78_fu_1273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_78_reg_1772 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_78_reg_1772_pp3_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln343_fu_1277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_79_fu_1290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_79_reg_1782 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal empty_80_fu_1294_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_80_reg_1787 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_81_fu_1298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_81_reg_1792 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_82_fu_1302_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_82_reg_1797 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln410_fu_1311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln410_reg_1805 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln410_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_l1_0_addr_1_reg_1815 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_l1_1_addr_1_reg_1825 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_l1_2_addr_1_reg_1835 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_l1_3_addr_1_reg_1845 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_2_fu_1370_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln422_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state31_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state34_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state35_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln422_reg_1855_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln422_reg_1855_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln422_fu_1380_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal icmp_ln424_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln424_reg_1864 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln424_reg_1864_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln424_fu_1403_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln422_1_fu_1415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln422_1_reg_1879 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp5_exit_iter2_state33 : STD_LOGIC;
    signal weight_l2_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weight_l2_0_ce0 : STD_LOGIC;
    signal weight_l2_0_we0 : STD_LOGIC;
    signal weight_l2_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weight_l2_1_ce0 : STD_LOGIC;
    signal weight_l2_1_we0 : STD_LOGIC;
    signal weight_l2_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weight_l2_2_ce0 : STD_LOGIC;
    signal weight_l2_2_we0 : STD_LOGIC;
    signal weight_l2_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weight_l2_3_ce0 : STD_LOGIC;
    signal weight_l2_3_we0 : STD_LOGIC;
    signal weight_l2_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_l2_0_ce0 : STD_LOGIC;
    signal data_l2_0_we0 : STD_LOGIC;
    signal data_l2_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_l2_1_ce0 : STD_LOGIC;
    signal data_l2_1_we0 : STD_LOGIC;
    signal data_l2_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_l2_2_ce0 : STD_LOGIC;
    signal data_l2_2_we0 : STD_LOGIC;
    signal data_l2_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_l2_3_ce0 : STD_LOGIC;
    signal data_l2_3_we0 : STD_LOGIC;
    signal data_l2_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_l2_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_l1_0_ce0 : STD_LOGIC;
    signal bias_l1_0_we0 : STD_LOGIC;
    signal bias_l1_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_l1_1_ce0 : STD_LOGIC;
    signal bias_l1_1_we0 : STD_LOGIC;
    signal bias_l1_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_l1_2_ce0 : STD_LOGIC;
    signal bias_l1_2_we0 : STD_LOGIC;
    signal bias_l1_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_l1_3_ce0 : STD_LOGIC;
    signal bias_l1_3_we0 : STD_LOGIC;
    signal bias_l1_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_l1_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_l1_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_l1_0_ce0 : STD_LOGIC;
    signal output_l1_0_we0 : STD_LOGIC;
    signal output_l1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_l1_1_ce0 : STD_LOGIC;
    signal output_l1_1_we0 : STD_LOGIC;
    signal output_l1_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_l1_2_ce0 : STD_LOGIC;
    signal output_l1_2_we0 : STD_LOGIC;
    signal output_l1_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_l1_3_ce0 : STD_LOGIC;
    signal output_l1_3_we0 : STD_LOGIC;
    signal output_l1_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_pass_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_pass_0_ce0 : STD_LOGIC;
    signal output_l1_pass_0_we0 : STD_LOGIC;
    signal output_l1_pass_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_pass_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_pass_1_ce0 : STD_LOGIC;
    signal output_l1_pass_1_we0 : STD_LOGIC;
    signal output_l1_pass_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_pass_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_pass_2_ce0 : STD_LOGIC;
    signal output_l1_pass_2_we0 : STD_LOGIC;
    signal output_l1_pass_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_pass_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_pass_3_ce0 : STD_LOGIC;
    signal output_l1_pass_3_we0 : STD_LOGIC;
    signal output_l1_pass_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc14_fu_736_ap_continue : STD_LOGIC;
    signal ap_phi_mux_ko_phi_fu_551_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_mux_crs_phi_fu_574_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_wh_phi_fu_607_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten24_reg_625 : STD_LOGIC_VECTOR (59 downto 0);
    signal ko_2_reg_636 : STD_LOGIC_VECTOR (29 downto 0);
    signal co_1_reg_647 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_mux_hi_phi_fu_674_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal wh_2_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_done : STD_LOGIC;
    signal ap_block_state27_on_subcall_done : BOOLEAN;
    signal ap_phi_mux_wh_1_phi_fu_729_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc14_fu_736_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_done : STD_LOGIC := '0';
    signal ko_cast_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom67_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom93_fu_1067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln329_3_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom122_fu_1283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wh_4_cast170_fu_1317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom157_fu_1334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom180_fu_1426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0_01001 : BOOLEAN;
    signal add_ln414_fu_1342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln414_1_fu_1349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln414_2_fu_1356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln414_3_fu_1363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul45_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_881_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln298_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln296_1_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln296_fu_903_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1450_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul74_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_1009_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound4_fu_1009_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln312_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln310_1_fu_1039_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln310_fu_1031_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1457_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln329_fu_1115_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln329_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln329_fu_1115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln329_1_fu_1127_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln329_1_fu_1127_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln329_1_fu_1149_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln329_fu_1155_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln329_1_fu_1159_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln422_fu_1190_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln422_fu_1190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln343_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln340_2_fu_1255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln340_fu_1247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1464_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_83_fu_1325_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add156_fu_1329_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln422_fu_1391_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln422_1_fu_1409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1472_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_8_3_fu_1433_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_1450_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1457_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1464_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1472_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1472_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1450_ce : STD_LOGIC;
    signal grp_fu_1457_ce : STD_LOGIC;
    signal grp_fu_1472_ce : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal bound4_fu_1009_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound4_fu_1009_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_fu_881_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_fu_881_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln329_1_fu_1127_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln329_1_fu_1127_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln422_fu_1190_p10 : STD_LOGIC_VECTOR (61 downto 0);

    component Conv_sysarr_dbbuf_dataflow_parent_loop_proc14 IS
    port (
        RS : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_0_ce0 : OUT STD_LOGIC;
        weight_l2_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_0_we0 : OUT STD_LOGIC;
        weight_l2_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_0_ce1 : OUT STD_LOGIC;
        weight_l2_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_0_we1 : OUT STD_LOGIC;
        weight_l2_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_1_ce0 : OUT STD_LOGIC;
        weight_l2_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_1_we0 : OUT STD_LOGIC;
        weight_l2_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_1_ce1 : OUT STD_LOGIC;
        weight_l2_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_1_we1 : OUT STD_LOGIC;
        weight_l2_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_2_ce0 : OUT STD_LOGIC;
        weight_l2_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_2_we0 : OUT STD_LOGIC;
        weight_l2_2_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_2_ce1 : OUT STD_LOGIC;
        weight_l2_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_2_we1 : OUT STD_LOGIC;
        weight_l2_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_3_ce0 : OUT STD_LOGIC;
        weight_l2_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_3_we0 : OUT STD_LOGIC;
        weight_l2_3_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_l2_3_ce1 : OUT STD_LOGIC;
        weight_l2_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        weight_l2_3_we1 : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (8 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ko_2 : IN STD_LOGIC_VECTOR (8 downto 0);
        co_1 : IN STD_LOGIC_VECTOR (9 downto 0);
        data_l2_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_0_ce0 : OUT STD_LOGIC;
        data_l2_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_0_we0 : OUT STD_LOGIC;
        data_l2_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_0_ce1 : OUT STD_LOGIC;
        data_l2_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_0_we1 : OUT STD_LOGIC;
        data_l2_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_1_ce0 : OUT STD_LOGIC;
        data_l2_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_1_we0 : OUT STD_LOGIC;
        data_l2_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_1_ce1 : OUT STD_LOGIC;
        data_l2_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_1_we1 : OUT STD_LOGIC;
        data_l2_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_2_ce0 : OUT STD_LOGIC;
        data_l2_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_2_we0 : OUT STD_LOGIC;
        data_l2_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_2_ce1 : OUT STD_LOGIC;
        data_l2_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_2_we1 : OUT STD_LOGIC;
        data_l2_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_3_ce0 : OUT STD_LOGIC;
        data_l2_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_3_we0 : OUT STD_LOGIC;
        data_l2_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_l2_3_ce1 : OUT STD_LOGIC;
        data_l2_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        data_l2_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_l2_3_we1 : OUT STD_LOGIC;
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_0_ce0 : OUT STD_LOGIC;
        output_l1_pass_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_0_we0 : OUT STD_LOGIC;
        output_l1_pass_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_0_ce1 : OUT STD_LOGIC;
        output_l1_pass_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_0_we1 : OUT STD_LOGIC;
        output_l1_pass_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_1_ce0 : OUT STD_LOGIC;
        output_l1_pass_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_1_we0 : OUT STD_LOGIC;
        output_l1_pass_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_1_ce1 : OUT STD_LOGIC;
        output_l1_pass_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_1_we1 : OUT STD_LOGIC;
        output_l1_pass_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_2_ce0 : OUT STD_LOGIC;
        output_l1_pass_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_2_we0 : OUT STD_LOGIC;
        output_l1_pass_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_2_ce1 : OUT STD_LOGIC;
        output_l1_pass_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_2_we1 : OUT STD_LOGIC;
        output_l1_pass_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_3_ce0 : OUT STD_LOGIC;
        output_l1_pass_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_3_we0 : OUT STD_LOGIC;
        output_l1_pass_3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_l1_pass_3_ce1 : OUT STD_LOGIC;
        output_l1_pass_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_l1_pass_3_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        RS_ap_vld : IN STD_LOGIC;
        p_read_ap_vld : IN STD_LOGIC;
        p_read1_ap_vld : IN STD_LOGIC;
        ko_2_ap_vld : IN STD_LOGIC;
        co_1_ap_vld : IN STD_LOGIC;
        p_read2_ap_vld : IN STD_LOGIC;
        p_read3_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mul_30ns_32ns_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mul_30ns_30ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mac_muladd_9s_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_mac_muladd_10s_10s_10ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_ama_addmuladd_9ns_9s_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_weight_l2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_data_l2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_output_l1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_dbbuf_output_l1_pass_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    weight_l2_0_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_l2_0_address0,
        ce0 => weight_l2_0_ce0,
        we0 => weight_l2_0_we0,
        d0 => weight_l2_0_d0,
        q0 => weight_l2_0_q0);

    weight_l2_1_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_l2_1_address0,
        ce0 => weight_l2_1_ce0,
        we0 => weight_l2_1_we0,
        d0 => weight_l2_1_d0,
        q0 => weight_l2_1_q0);

    weight_l2_2_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_l2_2_address0,
        ce0 => weight_l2_2_ce0,
        we0 => weight_l2_2_we0,
        d0 => weight_l2_2_d0,
        q0 => weight_l2_2_q0);

    weight_l2_3_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_l2_3_address0,
        ce0 => weight_l2_3_ce0,
        we0 => weight_l2_3_we0,
        d0 => weight_l2_3_d0,
        q0 => weight_l2_3_q0);

    data_l2_0_U : component Conv_sysarr_dbbuf_data_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_l2_0_address0,
        ce0 => data_l2_0_ce0,
        we0 => data_l2_0_we0,
        d0 => data_l2_0_d0,
        q0 => data_l2_0_q0);

    data_l2_1_U : component Conv_sysarr_dbbuf_data_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_l2_1_address0,
        ce0 => data_l2_1_ce0,
        we0 => data_l2_1_we0,
        d0 => data_l2_1_d0,
        q0 => data_l2_1_q0);

    data_l2_2_U : component Conv_sysarr_dbbuf_data_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_l2_2_address0,
        ce0 => data_l2_2_ce0,
        we0 => data_l2_2_we0,
        d0 => data_l2_2_d0,
        q0 => data_l2_2_q0);

    data_l2_3_U : component Conv_sysarr_dbbuf_data_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_l2_3_address0,
        ce0 => data_l2_3_ce0,
        we0 => data_l2_3_we0,
        d0 => data_l2_3_d0,
        q0 => data_l2_3_q0);

    bias_l1_0_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_l1_0_address0,
        ce0 => bias_l1_0_ce0,
        we0 => bias_l1_0_we0,
        d0 => bias_l1_0_d0,
        q0 => bias_l1_0_q0);

    bias_l1_1_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_l1_1_address0,
        ce0 => bias_l1_1_ce0,
        we0 => bias_l1_1_we0,
        d0 => bias_l1_1_d0,
        q0 => bias_l1_1_q0);

    bias_l1_2_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_l1_2_address0,
        ce0 => bias_l1_2_ce0,
        we0 => bias_l1_2_we0,
        d0 => bias_l1_2_d0,
        q0 => bias_l1_2_q0);

    bias_l1_3_U : component Conv_sysarr_dbbuf_weight_l2_0
    generic map (
        DataWidth => 8,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_l1_3_address0,
        ce0 => bias_l1_3_ce0,
        we0 => bias_l1_3_we0,
        d0 => bias_l1_3_d0,
        q0 => bias_l1_3_q0);

    output_l1_0_U : component Conv_sysarr_dbbuf_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_0_address0,
        ce0 => output_l1_0_ce0,
        we0 => output_l1_0_we0,
        d0 => output_l1_0_d0,
        q0 => output_l1_0_q0);

    output_l1_1_U : component Conv_sysarr_dbbuf_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_1_address0,
        ce0 => output_l1_1_ce0,
        we0 => output_l1_1_we0,
        d0 => output_l1_1_d0,
        q0 => output_l1_1_q0);

    output_l1_2_U : component Conv_sysarr_dbbuf_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_2_address0,
        ce0 => output_l1_2_ce0,
        we0 => output_l1_2_we0,
        d0 => output_l1_2_d0,
        q0 => output_l1_2_q0);

    output_l1_3_U : component Conv_sysarr_dbbuf_output_l1_0
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_3_address0,
        ce0 => output_l1_3_ce0,
        we0 => output_l1_3_we0,
        d0 => output_l1_3_d0,
        q0 => output_l1_3_q0);

    output_l1_pass_0_U : component Conv_sysarr_dbbuf_output_l1_pass_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_pass_0_address0,
        ce0 => output_l1_pass_0_ce0,
        we0 => output_l1_pass_0_we0,
        d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_d0,
        q0 => output_l1_pass_0_q0);

    output_l1_pass_1_U : component Conv_sysarr_dbbuf_output_l1_pass_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_pass_1_address0,
        ce0 => output_l1_pass_1_ce0,
        we0 => output_l1_pass_1_we0,
        d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_d0,
        q0 => output_l1_pass_1_q0);

    output_l1_pass_2_U : component Conv_sysarr_dbbuf_output_l1_pass_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_pass_2_address0,
        ce0 => output_l1_pass_2_ce0,
        we0 => output_l1_pass_2_we0,
        d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_d0,
        q0 => output_l1_pass_2_q0);

    output_l1_pass_3_U : component Conv_sysarr_dbbuf_output_l1_pass_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_pass_3_address0,
        ce0 => output_l1_pass_3_ce0,
        we0 => output_l1_pass_3_we0,
        d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_d0,
        q0 => output_l1_pass_3_q0);

    grp_dataflow_parent_loop_proc14_fu_736 : component Conv_sysarr_dbbuf_dataflow_parent_loop_proc14
    port map (
        RS => RS_reg_1547,
        weight_l2_0_address0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_address0,
        weight_l2_0_ce0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_ce0,
        weight_l2_0_d0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_d0,
        weight_l2_0_q0 => weight_l2_0_q0,
        weight_l2_0_we0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_we0,
        weight_l2_0_address1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_address1,
        weight_l2_0_ce1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_ce1,
        weight_l2_0_d1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_d1,
        weight_l2_0_q1 => ap_const_lv8_0,
        weight_l2_0_we1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_we1,
        weight_l2_1_address0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_address0,
        weight_l2_1_ce0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_ce0,
        weight_l2_1_d0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_d0,
        weight_l2_1_q0 => weight_l2_1_q0,
        weight_l2_1_we0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_we0,
        weight_l2_1_address1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_address1,
        weight_l2_1_ce1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_ce1,
        weight_l2_1_d1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_d1,
        weight_l2_1_q1 => ap_const_lv8_0,
        weight_l2_1_we1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_we1,
        weight_l2_2_address0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_address0,
        weight_l2_2_ce0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_ce0,
        weight_l2_2_d0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_d0,
        weight_l2_2_q0 => weight_l2_2_q0,
        weight_l2_2_we0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_we0,
        weight_l2_2_address1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_address1,
        weight_l2_2_ce1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_ce1,
        weight_l2_2_d1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_d1,
        weight_l2_2_q1 => ap_const_lv8_0,
        weight_l2_2_we1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_we1,
        weight_l2_3_address0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_address0,
        weight_l2_3_ce0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_ce0,
        weight_l2_3_d0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_d0,
        weight_l2_3_q0 => weight_l2_3_q0,
        weight_l2_3_we0 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_we0,
        weight_l2_3_address1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_address1,
        weight_l2_3_ce1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_ce1,
        weight_l2_3_d1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_d1,
        weight_l2_3_q1 => ap_const_lv8_0,
        weight_l2_3_we1 => grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_we1,
        p_read => empty_79_reg_1782,
        p_read1 => empty_80_reg_1787,
        ko_2 => select_ln329_1_reg_1682,
        co_1 => trunc_ln332_reg_1753,
        data_l2_0_address0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_address0,
        data_l2_0_ce0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_ce0,
        data_l2_0_d0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_d0,
        data_l2_0_q0 => data_l2_0_q0,
        data_l2_0_we0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_we0,
        data_l2_0_address1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_address1,
        data_l2_0_ce1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_ce1,
        data_l2_0_d1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_d1,
        data_l2_0_q1 => ap_const_lv8_0,
        data_l2_0_we1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_we1,
        data_l2_1_address0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_address0,
        data_l2_1_ce0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_ce0,
        data_l2_1_d0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_d0,
        data_l2_1_q0 => data_l2_1_q0,
        data_l2_1_we0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_we0,
        data_l2_1_address1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_address1,
        data_l2_1_ce1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_ce1,
        data_l2_1_d1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_d1,
        data_l2_1_q1 => ap_const_lv8_0,
        data_l2_1_we1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_we1,
        data_l2_2_address0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_address0,
        data_l2_2_ce0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_ce0,
        data_l2_2_d0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_d0,
        data_l2_2_q0 => data_l2_2_q0,
        data_l2_2_we0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_we0,
        data_l2_2_address1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_address1,
        data_l2_2_ce1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_ce1,
        data_l2_2_d1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_d1,
        data_l2_2_q1 => ap_const_lv8_0,
        data_l2_2_we1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_we1,
        data_l2_3_address0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_address0,
        data_l2_3_ce0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_ce0,
        data_l2_3_d0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_d0,
        data_l2_3_q0 => data_l2_3_q0,
        data_l2_3_we0 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_we0,
        data_l2_3_address1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_address1,
        data_l2_3_ce1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_ce1,
        data_l2_3_d1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_d1,
        data_l2_3_q1 => ap_const_lv8_0,
        data_l2_3_we1 => grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_we1,
        p_read2 => empty_81_reg_1792,
        p_read3 => empty_82_reg_1797,
        output_l1_pass_0_address0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_address0,
        output_l1_pass_0_ce0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_ce0,
        output_l1_pass_0_d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_d0,
        output_l1_pass_0_q0 => ap_const_lv32_0,
        output_l1_pass_0_we0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_we0,
        output_l1_pass_0_address1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_address1,
        output_l1_pass_0_ce1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_ce1,
        output_l1_pass_0_d1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_d1,
        output_l1_pass_0_q1 => ap_const_lv32_0,
        output_l1_pass_0_we1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_we1,
        output_l1_pass_1_address0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_address0,
        output_l1_pass_1_ce0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_ce0,
        output_l1_pass_1_d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_d0,
        output_l1_pass_1_q0 => ap_const_lv32_0,
        output_l1_pass_1_we0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_we0,
        output_l1_pass_1_address1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_address1,
        output_l1_pass_1_ce1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_ce1,
        output_l1_pass_1_d1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_d1,
        output_l1_pass_1_q1 => ap_const_lv32_0,
        output_l1_pass_1_we1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_we1,
        output_l1_pass_2_address0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_address0,
        output_l1_pass_2_ce0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_ce0,
        output_l1_pass_2_d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_d0,
        output_l1_pass_2_q0 => ap_const_lv32_0,
        output_l1_pass_2_we0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_we0,
        output_l1_pass_2_address1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_address1,
        output_l1_pass_2_ce1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_ce1,
        output_l1_pass_2_d1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_d1,
        output_l1_pass_2_q1 => ap_const_lv32_0,
        output_l1_pass_2_we1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_we1,
        output_l1_pass_3_address0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_address0,
        output_l1_pass_3_ce0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_ce0,
        output_l1_pass_3_d0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_d0,
        output_l1_pass_3_q0 => ap_const_lv32_0,
        output_l1_pass_3_we0 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_we0,
        output_l1_pass_3_address1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_address1,
        output_l1_pass_3_ce1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_ce1,
        output_l1_pass_3_d1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_d1,
        output_l1_pass_3_q1 => ap_const_lv32_0,
        output_l1_pass_3_we1 => grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        RS_ap_vld => ap_const_logic_1,
        p_read_ap_vld => ap_const_logic_1,
        p_read1_ap_vld => ap_const_logic_1,
        ko_2_ap_vld => ap_const_logic_1,
        co_1_ap_vld => ap_const_logic_1,
        p_read2_ap_vld => ap_const_logic_1,
        p_read3_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_proc14_fu_736_ap_start,
        ap_done => grp_dataflow_parent_loop_proc14_fu_736_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc14_fu_736_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc14_fu_736_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc14_fu_736_ap_continue);

    mul_32s_32s_32_1_1_U234 : component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => WH_reg_1505,
        din1 => WH_reg_1505,
        dout => mul_ln286_fu_793_p2);

    mul_32s_32s_32_1_1_U235 : component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => C_reg_1495,
        din1 => RS_reg_1547,
        dout => tmp_fu_862_p2);

    mul_32s_32s_32_1_1_U236 : component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_reg_1563,
        din1 => RS_reg_1547,
        dout => mul45_fu_866_p2);

    mul_30ns_32ns_62_1_1_U237 : component Conv_sysarr_dbbuf_mul_30ns_32ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        din0 => bound_fu_881_p0,
        din1 => bound_fu_881_p1,
        dout => bound_fu_881_p2);

    mul_32s_32s_32_1_1_U238 : component Conv_sysarr_dbbuf_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => WH_in_reg_1525,
        din1 => WH_in_reg_1525,
        dout => mul74_fu_984_p2);

    mul_30ns_32ns_62_1_1_U239 : component Conv_sysarr_dbbuf_mul_30ns_32ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        din0 => bound4_fu_1009_p0,
        din1 => bound4_fu_1009_p1,
        dout => bound4_fu_1009_p2);

    mul_32ns_32ns_64_1_1_U240 : component Conv_sysarr_dbbuf_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln329_fu_1115_p0,
        din1 => mul_ln329_fu_1115_p1,
        dout => mul_ln329_fu_1115_p2);

    mul_30ns_30ns_60_1_1_U241 : component Conv_sysarr_dbbuf_mul_30ns_30ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 30,
        dout_WIDTH => 60)
    port map (
        din0 => mul_ln329_1_fu_1127_p0,
        din1 => mul_ln329_1_fu_1127_p1,
        dout => mul_ln329_1_fu_1127_p2);

    mul_30ns_32ns_62_1_1_U242 : component Conv_sysarr_dbbuf_mul_30ns_32ns_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        din0 => mul_ln422_fu_1190_p0,
        din1 => mul_ln422_fu_1190_p1,
        dout => mul_ln422_fu_1190_p2);

    mul_9s_9s_9_1_1_U243 : component Conv_sysarr_dbbuf_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => trunc_ln271_reg_1513,
        din1 => select_ln329_1_reg_1682,
        dout => mul_ln329_2_fu_1202_p2);

    mul_9s_9s_9_1_1_U244 : component Conv_sysarr_dbbuf_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => trunc_ln271_reg_1513,
        din1 => mul_ln329_2_fu_1202_p2,
        dout => mul_ln329_3_fu_1206_p2);

    mac_muladd_9s_9s_9ns_9_4_1_U245 : component Conv_sysarr_dbbuf_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1450_p0,
        din1 => trunc_ln296_reg_1568,
        din2 => trunc_ln296_1_reg_1597_pp1_iter1_reg,
        ce => grp_fu_1450_ce,
        dout => grp_fu_1450_p3);

    mac_muladd_10s_10s_10ns_10_4_1_U246 : component Conv_sysarr_dbbuf_mac_muladd_10s_10s_10ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1457_p0,
        din1 => empty_76_reg_1612,
        din2 => trunc_ln310_reg_1643_pp2_iter1_reg,
        ce => grp_fu_1457_ce,
        dout => grp_fu_1457_p3);

    ama_addmuladd_9ns_9s_9s_9ns_9_4_1_U247 : component Conv_sysarr_dbbuf_ama_addmuladd_9ns_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1464_p0,
        din1 => mul_ln329_2_reg_1723,
        din2 => trunc_ln271_reg_1513,
        din3 => empty_78_reg_1772_pp3_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_1464_p4);

    mac_muladd_9s_9s_9ns_9_4_1_U248 : component Conv_sysarr_dbbuf_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1472_p0,
        din1 => trunc_ln286_reg_1537,
        din2 => grp_fu_1472_p2,
        ce => grp_fu_1472_ce,
        dout => grp_fu_1472_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state15)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state15);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state22)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp5_flush_enable)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln329_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter2_state33)) then 
                        ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter1;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                elsif (((icmp_ln329_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc14_fu_736_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc14_fu_736_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc14_fu_736_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dataflow_parent_loop_proc14_fu_736_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
                    grp_dataflow_parent_loop_proc14_fu_736_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc14_fu_736_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc14_fu_736_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    co_1_reg_647_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                co_1_reg_647 <= co_2_fu_1370_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                co_1_reg_647 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    co_reg_614_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln310_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                co_reg_614 <= add_ln312_fu_1061_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                co_reg_614 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    crs_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln296_reg_1583 = ap_const_lv1_0))) then 
                crs_reg_570 <= select_ln296_1_reg_1592;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                crs_reg_570 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    hi_reg_670_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln340_reg_1758 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                hi_reg_670 <= select_ln340_1_reg_1767;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                hi_reg_670 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln340_fu_1231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                indvar_flatten13_reg_659 <= add_ln340_1_fu_1236_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                indvar_flatten13_reg_659 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_625_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar_flatten24_reg_625 <= add_ln329_reg_1672;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar_flatten24_reg_625 <= ap_const_lv60_0;
            end if; 
        end if;
    end process;

    indvar_flatten32_reg_703_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln422_fu_1375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                indvar_flatten32_reg_703 <= add_ln422_fu_1380_p2;
            elsif (((icmp_ln329_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                indvar_flatten32_reg_703 <= ap_const_lv62_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln310_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten6_reg_592 <= add_ln310_fu_1020_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                indvar_flatten6_reg_592 <= ap_const_lv62_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln296_fu_887_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_559 <= add_ln296_fu_892_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten_reg_559 <= ap_const_lv62_0;
            end if; 
        end if;
    end process;

    ko_1_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln296_fu_887_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                ko_1_reg_581 <= add_ln298_fu_933_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ko_1_reg_581 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    ko_2_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                ko_2_reg_636 <= select_ln329_2_reg_1708;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ko_2_reg_636 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    ko_3_reg_714_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln422_fu_1375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                ko_3_reg_714 <= add_ln424_fu_1403_p2;
            elsif (((icmp_ln329_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                ko_3_reg_714 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    ko_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ko_reg_547 <= ap_const_lv30_0;
            elsif (((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ko_reg_547 <= add_ln288_reg_1558;
            end if; 
        end if;
    end process;

    wh_1_reg_725_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (icmp_ln422_reg_1855_pp5_iter2_reg = ap_const_lv1_0))) then 
                wh_1_reg_725 <= select_ln422_1_reg_1879;
            elsif (((icmp_ln329_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                wh_1_reg_725 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wh_2_reg_692_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                wh_2_reg_692 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                wh_2_reg_692 <= add_ln410_reg_1805;
            end if; 
        end if;
    end process;

    wh_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln310_reg_1629 = ap_const_lv1_0))) then 
                wh_reg_603 <= select_ln310_1_reg_1638;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                wh_reg_603 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wi_reg_681_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln340_fu_1231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                wi_reg_681 <= add_ln343_fu_1277_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                wi_reg_681 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                C_reg_1495 <= C_fu_777_p1;
                bias_in_V_read_1_reg_1489 <= bias_in_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                RS_reg_1547 <= RS_fu_801_p1;
                bias_in_V_read_4_reg_1542 <= bias_in_V_dout;
                mul_ln286_reg_1531 <= mul_ln286_fu_793_p2;
                trunc_ln286_reg_1537 <= trunc_ln286_fu_797_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                WH_in_reg_1525 <= WH_in_fu_789_p1;
                bias_in_V_read_3_reg_1520 <= bias_in_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                WH_reg_1505 <= WH_fu_781_p1;
                bias_in_V_read_2_reg_1500 <= bias_in_V_dout;
                trunc_ln271_reg_1513 <= trunc_ln271_fu_785_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln288_reg_1558 <= add_ln288_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln329_reg_1672 <= add_ln329_fu_1138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln410_reg_1805 <= add_ln410_fu_1311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                bound4_reg_1624 <= bound4_fu_1009_p2;
                div76_cast_reg_1617 <= bias_in_V_read_1_reg_1489(31 downto 2);
                empty_76_reg_1612 <= empty_76_fu_988_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                bound_reg_1578 <= bound_fu_881_p2;
                    cast1_reg_1573(29 downto 0) <= cast1_fu_878_p1(29 downto 0);
                trunc_ln296_reg_1568 <= trunc_ln296_fu_870_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln340_fu_1231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                empty_78_reg_1772 <= empty_78_fu_1273_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                empty_78_reg_1772_pp3_iter1_reg <= empty_78_reg_1772;
                icmp_ln340_reg_1758 <= icmp_ln340_fu_1231_p2;
                icmp_ln340_reg_1758_pp3_iter1_reg <= icmp_ln340_reg_1758;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                empty_79_reg_1782 <= empty_79_fu_1290_p1;
                empty_80_reg_1787 <= empty_80_fu_1294_p1;
                empty_81_reg_1792 <= empty_81_fu_1298_p1;
                empty_82_reg_1797 <= empty_82_fu_1302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln288_reg_1554 <= icmp_ln288_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln296_reg_1583 <= icmp_ln296_fu_887_p2;
                icmp_ln296_reg_1583_pp1_iter1_reg <= icmp_ln296_reg_1583;
                trunc_ln296_1_reg_1597_pp1_iter1_reg <= trunc_ln296_1_reg_1597;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln296_reg_1583_pp1_iter2_reg <= icmp_ln296_reg_1583_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln310_reg_1629 <= icmp_ln310_fu_1015_p2;
                icmp_ln310_reg_1629_pp2_iter1_reg <= icmp_ln310_reg_1629;
                trunc_ln310_reg_1643_pp2_iter1_reg <= trunc_ln310_reg_1643;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln310_reg_1629_pp2_iter2_reg <= icmp_ln310_reg_1629_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_fu_1133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                icmp_ln332_reg_1677 <= icmp_ln332_fu_1144_p2;
                select_ln329_1_reg_1682 <= select_ln329_1_fu_1163_p3;
                select_ln329_2_reg_1708 <= select_ln329_2_fu_1179_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln340_reg_1758_pp3_iter2_reg <= icmp_ln340_reg_1758_pp3_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln422_reg_1855 <= icmp_ln422_fu_1375_p2;
                icmp_ln422_reg_1855_pp5_iter1_reg <= icmp_ln422_reg_1855;
                icmp_ln424_reg_1864_pp5_iter1_reg <= icmp_ln424_reg_1864;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                icmp_ln422_reg_1855_pp5_iter2_reg <= icmp_ln422_reg_1855_pp5_iter1_reg;
                icmp_ln422_reg_1855_pp5_iter3_reg <= icmp_ln422_reg_1855_pp5_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln422_fu_1375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln424_reg_1864 <= icmp_ln424_fu_1386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mul_ln329_1_reg_1663 <= mul_ln329_1_fu_1127_p2;
                mul_ln329_reg_1658 <= mul_ln329_fu_1115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                mul_ln329_2_reg_1723 <= mul_ln329_2_fu_1202_p2;
                mul_ln329_3_reg_1728 <= mul_ln329_3_fu_1206_p2;
                select_ln329_reg_1718 <= select_ln329_fu_1195_p3;
                sext_ln329_1_reg_1738 <= sext_ln329_1_fu_1215_p1;
                sext_ln329_2_reg_1743 <= sext_ln329_2_fu_1219_p1;
                sext_ln329_3_reg_1748 <= sext_ln329_3_fu_1223_p1;
                sext_ln329_reg_1733 <= sext_ln329_fu_1211_p1;
                trunc_ln332_reg_1753 <= trunc_ln332_fu_1227_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                mul_ln422_reg_1713 <= mul_ln422_fu_1190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln410_fu_1306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                output_l1_0_addr_1_reg_1815 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
                output_l1_1_addr_1_reg_1825 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
                output_l1_2_addr_1_reg_1835 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
                output_l1_3_addr_1_reg_1845 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln296_fu_887_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln296_1_reg_1592 <= select_ln296_1_fu_917_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln310_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln310_1_reg_1638 <= select_ln310_1_fu_1045_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln340_fu_1231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                select_ln340_1_reg_1767 <= select_ln340_1_fu_1261_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln422_reg_1855_pp5_iter1_reg = ap_const_lv1_0))) then
                select_ln422_1_reg_1879 <= select_ln422_1_fu_1415_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_reg_1563 <= tmp_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln296_fu_887_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                trunc_ln296_1_reg_1597 <= trunc_ln296_1_fu_925_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln310_fu_1015_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                trunc_ln310_reg_1643 <= trunc_ln310_fu_1053_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((bias_in_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln3_reg_1480 <= bias_in_V_dout(31 downto 2);
            end if;
        end if;
    end process;
    cast1_reg_1573(61 downto 30) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, bias_in_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_enable_reg_pp1_iter3, ap_enable_reg_pp2_iter3, ap_enable_reg_pp5_iter4, icmp_ln288_fu_805_p2, ap_enable_reg_pp0_iter0, icmp_ln296_fu_887_p2, ap_enable_reg_pp1_iter0, icmp_ln310_fu_1015_p2, ap_enable_reg_pp2_iter0, icmp_ln329_fu_1133_p2, ap_CS_fsm_state20, icmp_ln340_fu_1231_p2, ap_enable_reg_pp3_iter0, ap_CS_fsm_state28, icmp_ln410_fu_1306_p2, ap_enable_reg_pp5_iter2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter3, ap_CS_fsm_state27, ap_block_state27_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((bias_in_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln288_fu_805_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln288_fu_805_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln296_fu_887_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln296_fu_887_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln310_fu_1015_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln310_fu_1015_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln329_fu_1133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln340_fu_1231_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln340_fu_1231_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln410_fu_1306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_fu_777_p1 <= bias_in_V_dout(32 - 1 downto 0);
    RS_fu_801_p1 <= bias_in_V_dout(32 - 1 downto 0);
    WH_fu_781_p1 <= bias_in_V_dout(32 - 1 downto 0);
    WH_in_fu_789_p1 <= bias_in_V_dout(32 - 1 downto 0);
    add156_fu_1329_p2 <= std_logic_vector(unsigned(empty_83_fu_1325_p1) + unsigned(mul_ln329_3_reg_1728));
    add_ln288_fu_810_p2 <= std_logic_vector(unsigned(ap_phi_mux_ko_phi_fu_551_p4) + unsigned(ap_const_lv30_1));
    add_ln296_1_fu_911_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_crs_phi_fu_574_p4));
    add_ln296_fu_892_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_559) + unsigned(ap_const_lv62_1));
    add_ln298_fu_933_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(select_ln296_fu_903_p3));
    add_ln310_1_fu_1039_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_wh_phi_fu_607_p4));
    add_ln310_fu_1020_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_592) + unsigned(ap_const_lv62_1));
    add_ln312_fu_1061_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(select_ln310_fu_1031_p3));
    add_ln329_1_fu_1149_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(ko_2_reg_636));
    add_ln329_fu_1138_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_625) + unsigned(ap_const_lv60_1));
    add_ln340_1_fu_1236_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_659) + unsigned(ap_const_lv64_1));
    add_ln340_2_fu_1255_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_hi_phi_fu_674_p4));
    add_ln343_fu_1277_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln340_fu_1247_p3));
    add_ln410_fu_1311_p2 <= std_logic_vector(unsigned(wh_2_reg_692) + unsigned(ap_const_lv32_1));
    add_ln414_1_fu_1349_p2 <= std_logic_vector(unsigned(output_l1_1_q0) + unsigned(output_l1_pass_1_q0));
    add_ln414_2_fu_1356_p2 <= std_logic_vector(unsigned(output_l1_2_q0) + unsigned(output_l1_pass_2_q0));
    add_ln414_3_fu_1363_p2 <= std_logic_vector(unsigned(output_l1_3_q0) + unsigned(output_l1_pass_3_q0));
    add_ln414_fu_1342_p2 <= std_logic_vector(unsigned(output_l1_0_q0) + unsigned(output_l1_pass_0_q0));
    add_ln422_1_fu_1409_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_wh_1_phi_fu_729_p4));
    add_ln422_fu_1380_p2 <= std_logic_vector(unsigned(indvar_flatten32_reg_703) + unsigned(ap_const_lv62_1));
    add_ln424_fu_1403_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(select_ln422_fu_1391_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state19 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(12);
    ap_CS_fsm_state21 <= ap_CS_fsm(13);
    ap_CS_fsm_state26 <= ap_CS_fsm(15);
    ap_CS_fsm_state27 <= ap_CS_fsm(16);
    ap_CS_fsm_state28 <= ap_CS_fsm(17);
    ap_CS_fsm_state29 <= ap_CS_fsm(18);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(19);
    ap_CS_fsm_state36 <= ap_CS_fsm(21);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(bias_in_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln288_reg_1554)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (bias_in_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(bias_in_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln288_reg_1554)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (bias_in_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(weight_in_V_empty_n, ap_enable_reg_pp1_iter3, icmp_ln296_reg_1583_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_11001 <= ((weight_in_V_empty_n = ap_const_logic_0) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(weight_in_V_empty_n, ap_enable_reg_pp1_iter3, icmp_ln296_reg_1583_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_subdone <= ((weight_in_V_empty_n = ap_const_logic_0) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(data_in_V_empty_n, ap_enable_reg_pp2_iter3, icmp_ln310_reg_1629_pp2_iter2_reg)
    begin
                ap_block_pp2_stage0_11001 <= ((data_in_V_empty_n = ap_const_logic_0) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(data_in_V_empty_n, ap_enable_reg_pp2_iter3, icmp_ln310_reg_1629_pp2_iter2_reg)
    begin
                ap_block_pp2_stage0_subdone <= ((data_in_V_empty_n = ap_const_logic_0) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_01001_assign_proc : process(conv_out_V_full_n, ap_enable_reg_pp5_iter4, icmp_ln422_reg_1855_pp5_iter3_reg)
    begin
                ap_block_pp5_stage0_01001 <= ((conv_out_V_full_n = ap_const_logic_0) and (icmp_ln422_reg_1855_pp5_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_11001_assign_proc : process(conv_out_V_full_n, ap_enable_reg_pp5_iter4, icmp_ln422_reg_1855_pp5_iter3_reg)
    begin
                ap_block_pp5_stage0_11001 <= ((conv_out_V_full_n = ap_const_logic_0) and (icmp_ln422_reg_1855_pp5_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(conv_out_V_full_n, ap_enable_reg_pp5_iter4, icmp_ln422_reg_1855_pp5_iter3_reg)
    begin
                ap_block_pp5_stage0_subdone <= ((conv_out_V_full_n = ap_const_logic_0) and (icmp_ln422_reg_1855_pp5_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, bias_in_V_empty_n)
    begin
                ap_block_state1 <= ((bias_in_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp1_stage0_iter3_assign_proc : process(weight_in_V_empty_n, icmp_ln296_reg_1583_pp1_iter2_reg)
    begin
                ap_block_state13_pp1_stage0_iter3 <= ((weight_in_V_empty_n = ap_const_logic_0) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state15_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp2_stage0_iter3_assign_proc : process(data_in_V_empty_n, icmp_ln310_reg_1629_pp2_iter2_reg)
    begin
                ap_block_state18_pp2_stage0_iter3 <= ((data_in_V_empty_n = ap_const_logic_0) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state22_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_ready, ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_done)
    begin
                ap_block_state27_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_ready and ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state31_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_pp5_stage0_iter4_assign_proc : process(conv_out_V_full_n, icmp_ln422_reg_1855_pp5_iter3_reg)
    begin
                ap_block_state35_pp5_stage0_iter4 <= ((conv_out_V_full_n = ap_const_logic_0) and (icmp_ln422_reg_1855_pp5_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(bias_in_V_empty_n, icmp_ln288_reg_1554)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((icmp_ln288_reg_1554 = ap_const_lv1_0) and (bias_in_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln288_fu_805_p2)
    begin
        if ((icmp_ln288_fu_805_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln296_fu_887_p2)
    begin
        if ((icmp_ln296_fu_887_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state15_assign_proc : process(icmp_ln310_fu_1015_p2)
    begin
        if ((icmp_ln310_fu_1015_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state22_assign_proc : process(icmp_ln340_fu_1231_p2)
    begin
        if ((icmp_ln340_fu_1231_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter2_state33_assign_proc : process(ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            ap_condition_pp5_exit_iter2_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter2_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_flush_enable_assign_proc : process(icmp_ln422_fu_1375_p2, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln422_fu_1375_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            ap_condition_pp5_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp5_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter3)
    begin
        if (((ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_crs_phi_fu_574_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln296_reg_1583, crs_reg_570, ap_CS_fsm_pp1_stage0, select_ln296_1_reg_1592, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln296_reg_1583 = ap_const_lv1_0))) then 
            ap_phi_mux_crs_phi_fu_574_p4 <= select_ln296_1_reg_1592;
        else 
            ap_phi_mux_crs_phi_fu_574_p4 <= crs_reg_570;
        end if; 
    end process;


    ap_phi_mux_hi_phi_fu_674_p4_assign_proc : process(hi_reg_670, icmp_ln340_reg_1758, ap_CS_fsm_pp3_stage0, select_ln340_1_reg_1767, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln340_reg_1758 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_hi_phi_fu_674_p4 <= select_ln340_1_reg_1767;
        else 
            ap_phi_mux_hi_phi_fu_674_p4 <= hi_reg_670;
        end if; 
    end process;


    ap_phi_mux_ko_phi_fu_551_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln288_reg_1554, ko_reg_547, add_ln288_reg_1558)
    begin
        if (((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ko_phi_fu_551_p4 <= add_ln288_reg_1558;
        else 
            ap_phi_mux_ko_phi_fu_551_p4 <= ko_reg_547;
        end if; 
    end process;


    ap_phi_mux_wh_1_phi_fu_729_p4_assign_proc : process(ap_block_pp5_stage0, wh_1_reg_725, icmp_ln422_reg_1855_pp5_iter2_reg, select_ln422_1_reg_1879, ap_enable_reg_pp5_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (icmp_ln422_reg_1855_pp5_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_wh_1_phi_fu_729_p4 <= select_ln422_1_reg_1879;
        else 
            ap_phi_mux_wh_1_phi_fu_729_p4 <= wh_1_reg_725;
        end if; 
    end process;


    ap_phi_mux_wh_phi_fu_607_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln310_reg_1629, wh_reg_603, ap_CS_fsm_pp2_stage0, select_ln310_1_reg_1638, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln310_reg_1629 = ap_const_lv1_0))) then 
            ap_phi_mux_wh_phi_fu_607_p4 <= select_ln310_1_reg_1638;
        else 
            ap_phi_mux_wh_phi_fu_607_p4 <= wh_reg_603;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_done <= (grp_dataflow_parent_loop_proc14_fu_736_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc14_fu_736_ap_ready <= (grp_dataflow_parent_loop_proc14_fu_736_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc14_fu_736_ap_ready);

    bias_in_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, bias_in_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln288_reg_1554)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_in_V_blk_n <= bias_in_V_empty_n;
        else 
            bias_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bias_in_V_read_assign_proc : process(ap_start, ap_CS_fsm_state1, bias_in_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln288_reg_1554, ap_block_pp0_stage0_11001)
    begin
        if ((((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((bias_in_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((bias_in_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_in_V_read <= ap_const_logic_1;
        else 
            bias_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    bias_l1_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state20, ko_cast_fu_816_p1, zext_ln329_3_fu_1171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            bias_l1_0_address0 <= zext_ln329_3_fu_1171_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_0_address0 <= ko_cast_fu_816_p1(9 - 1 downto 0);
        else 
            bias_l1_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bias_l1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_l1_0_ce0 <= ap_const_logic_1;
        else 
            bias_l1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_l1_0_d0 <= bias_in_V_dout(8 - 1 downto 0);

    bias_l1_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln288_reg_1554, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_0_we0 <= ap_const_logic_1;
        else 
            bias_l1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l1_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state20, ko_cast_fu_816_p1, zext_ln329_3_fu_1171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            bias_l1_1_address0 <= zext_ln329_3_fu_1171_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_1_address0 <= ko_cast_fu_816_p1(9 - 1 downto 0);
        else 
            bias_l1_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bias_l1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_l1_1_ce0 <= ap_const_logic_1;
        else 
            bias_l1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_l1_1_d0 <= bias_in_V_dout(15 downto 8);

    bias_l1_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln288_reg_1554, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_1_we0 <= ap_const_logic_1;
        else 
            bias_l1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l1_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state20, ko_cast_fu_816_p1, zext_ln329_3_fu_1171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            bias_l1_2_address0 <= zext_ln329_3_fu_1171_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_2_address0 <= ko_cast_fu_816_p1(9 - 1 downto 0);
        else 
            bias_l1_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bias_l1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_l1_2_ce0 <= ap_const_logic_1;
        else 
            bias_l1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_l1_2_d0 <= bias_in_V_dout(23 downto 16);

    bias_l1_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln288_reg_1554, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_2_we0 <= ap_const_logic_1;
        else 
            bias_l1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_l1_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state20, ko_cast_fu_816_p1, zext_ln329_3_fu_1171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            bias_l1_3_address0 <= zext_ln329_3_fu_1171_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_3_address0 <= ko_cast_fu_816_p1(9 - 1 downto 0);
        else 
            bias_l1_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    bias_l1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_l1_3_ce0 <= ap_const_logic_1;
        else 
            bias_l1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_l1_3_d0 <= bias_in_V_dout(31 downto 24);

    bias_l1_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln288_reg_1554, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln288_reg_1554 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_l1_3_we0 <= ap_const_logic_1;
        else 
            bias_l1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bound4_fu_1009_p0 <= bound4_fu_1009_p00(30 - 1 downto 0);
    bound4_fu_1009_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div76_cast_fu_992_p4),62));
    bound4_fu_1009_p1 <= bound4_fu_1009_p10(32 - 1 downto 0);
    bound4_fu_1009_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul74_fu_984_p2),62));
    bound_fu_881_p0 <= bound_fu_881_p00(30 - 1 downto 0);
    bound_fu_881_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_1480),62));
    bound_fu_881_p1 <= bound_fu_881_p10(32 - 1 downto 0);
    bound_fu_881_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul45_fu_866_p2),62));
    cast1_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_1480),62));
    co_2_fu_1370_p2 <= std_logic_vector(unsigned(select_ln329_reg_1718) + unsigned(ap_const_lv30_1));

    conv_out_V_blk_n_assign_proc : process(conv_out_V_full_n, ap_enable_reg_pp5_iter4, ap_block_pp5_stage0, icmp_ln422_reg_1855_pp5_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln422_reg_1855_pp5_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1))) then 
            conv_out_V_blk_n <= conv_out_V_full_n;
        else 
            conv_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv_out_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_3_fu_1433_p5),256));

    conv_out_V_write_assign_proc : process(ap_enable_reg_pp5_iter4, icmp_ln422_reg_1855_pp5_iter3_reg, ap_block_pp5_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln422_reg_1855_pp5_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_1))) then 
            conv_out_V_write <= ap_const_logic_1;
        else 
            conv_out_V_write <= ap_const_logic_0;
        end if; 
    end process;


    data_in_V_blk_n_assign_proc : process(data_in_V_empty_n, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, icmp_ln310_reg_1629_pp2_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_in_V_blk_n <= data_in_V_empty_n;
        else 
            data_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_V_read_assign_proc : process(ap_enable_reg_pp2_iter3, icmp_ln310_reg_1629_pp2_iter2_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_in_V_read <= ap_const_logic_1;
        else 
            data_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_l2_0_address0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_address0, ap_CS_fsm_state27, idxprom93_fu_1067_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_0_address0 <= idxprom93_fu_1067_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_0_address0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_address0;
        else 
            data_l2_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_l2_0_ce0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_0_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_0_ce0;
        else 
            data_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_0_d0 <= data_in_V_dout(8 - 1 downto 0);

    data_l2_0_we0_assign_proc : process(ap_enable_reg_pp2_iter3, icmp_ln310_reg_1629_pp2_iter2_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_0_we0 <= ap_const_logic_1;
        else 
            data_l2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_l2_1_address0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_address0, ap_CS_fsm_state27, idxprom93_fu_1067_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_1_address0 <= idxprom93_fu_1067_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_1_address0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_address0;
        else 
            data_l2_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_l2_1_ce0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_1_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_1_ce0;
        else 
            data_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_1_d0 <= data_in_V_dout(15 downto 8);

    data_l2_1_we0_assign_proc : process(ap_enable_reg_pp2_iter3, icmp_ln310_reg_1629_pp2_iter2_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_1_we0 <= ap_const_logic_1;
        else 
            data_l2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_l2_2_address0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_address0, ap_CS_fsm_state27, idxprom93_fu_1067_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_2_address0 <= idxprom93_fu_1067_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_2_address0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_address0;
        else 
            data_l2_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_l2_2_ce0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_2_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_2_ce0;
        else 
            data_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_2_d0 <= data_in_V_dout(23 downto 16);

    data_l2_2_we0_assign_proc : process(ap_enable_reg_pp2_iter3, icmp_ln310_reg_1629_pp2_iter2_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_2_we0 <= ap_const_logic_1;
        else 
            data_l2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_l2_3_address0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_address0, ap_CS_fsm_state27, idxprom93_fu_1067_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_3_address0 <= idxprom93_fu_1067_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_3_address0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_address0;
        else 
            data_l2_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_l2_3_ce0_assign_proc : process(ap_enable_reg_pp2_iter3, ap_block_pp2_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_l2_3_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_data_l2_3_ce0;
        else 
            data_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l2_3_d0 <= data_in_V_dout(31 downto 24);

    data_l2_3_we0_assign_proc : process(ap_enable_reg_pp2_iter3, icmp_ln310_reg_1629_pp2_iter2_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln310_reg_1629_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            data_l2_3_we0 <= ap_const_logic_1;
        else 
            data_l2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    div76_cast_fu_992_p4 <= bias_in_V_read_1_reg_1489(31 downto 2);
    empty_76_fu_988_p1 <= mul74_fu_984_p2(10 - 1 downto 0);
    empty_78_fu_1273_p1 <= select_ln340_fu_1247_p3(9 - 1 downto 0);
    empty_79_fu_1290_p1 <= bias_in_V_read_1_reg_1489(9 - 1 downto 0);
    empty_80_fu_1294_p1 <= bias_in_V_read_4_reg_1542(9 - 1 downto 0);
    empty_81_fu_1298_p1 <= bias_in_V_read_2_reg_1500(32 - 1 downto 0);
    empty_82_fu_1302_p1 <= bias_in_V_read_3_reg_1520(10 - 1 downto 0);
    empty_83_fu_1325_p1 <= wh_2_reg_692(9 - 1 downto 0);

    grp_dataflow_parent_loop_proc14_fu_736_ap_continue_assign_proc : process(ap_CS_fsm_state27, ap_block_state27_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state27_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_dataflow_parent_loop_proc14_fu_736_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc14_fu_736_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc14_fu_736_ap_start <= grp_dataflow_parent_loop_proc14_fu_736_ap_start_reg;

    grp_fu_1450_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_1450_ce <= ap_const_logic_1;
        else 
            grp_fu_1450_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1450_p0 <= select_ln296_fu_903_p3(9 - 1 downto 0);

    grp_fu_1457_ce_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_1457_ce <= ap_const_logic_1;
        else 
            grp_fu_1457_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1457_p0 <= select_ln310_fu_1031_p3(10 - 1 downto 0);
    grp_fu_1464_p0 <= select_ln340_1_fu_1261_p3(9 - 1 downto 0);

    grp_fu_1472_ce_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            grp_fu_1472_ce <= ap_const_logic_1;
        else 
            grp_fu_1472_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1472_p0 <= select_ln422_fu_1391_p3(9 - 1 downto 0);
    grp_fu_1472_p2 <= select_ln422_1_fu_1415_p3(9 - 1 downto 0);
    icmp_ln288_fu_805_p2 <= "1" when (ap_phi_mux_ko_phi_fu_551_p4 = trunc_ln3_reg_1480) else "0";
    icmp_ln296_fu_887_p2 <= "1" when (indvar_flatten_reg_559 = bound_reg_1578) else "0";
    icmp_ln298_fu_898_p2 <= "1" when (ko_1_reg_581 = trunc_ln3_reg_1480) else "0";
    icmp_ln310_fu_1015_p2 <= "1" when (indvar_flatten6_reg_592 = bound4_reg_1624) else "0";
    icmp_ln312_fu_1026_p2 <= "1" when (co_reg_614 = div76_cast_reg_1617) else "0";
    icmp_ln329_fu_1133_p2 <= "1" when (indvar_flatten24_reg_625 = mul_ln329_1_reg_1663) else "0";
    icmp_ln332_fu_1144_p2 <= "1" when (co_1_reg_647 = div76_cast_reg_1617) else "0";
    icmp_ln340_fu_1231_p2 <= "1" when (indvar_flatten13_reg_659 = mul_ln329_reg_1658) else "0";
    icmp_ln343_fu_1242_p2 <= "1" when (wi_reg_681 = WH_reg_1505) else "0";
    icmp_ln410_fu_1306_p2 <= "1" when (wh_2_reg_692 = mul_ln286_reg_1531) else "0";
    icmp_ln422_fu_1375_p2 <= "1" when (indvar_flatten32_reg_703 = mul_ln422_reg_1713) else "0";
    icmp_ln424_fu_1386_p2 <= "1" when (ko_3_reg_714 = trunc_ln3_reg_1480) else "0";
    idxprom122_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1464_p4),64));
    idxprom157_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add156_fu_1329_p2),64));
    idxprom180_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1472_p3),64));
    idxprom67_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1450_p3),64));
    idxprom93_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1457_p3),64));
    ko_cast_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ko_reg_547),64));
    mul_ln329_1_fu_1127_p0 <= mul_ln329_1_fu_1127_p00(30 - 1 downto 0);
    mul_ln329_1_fu_1127_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div76_cast_reg_1617),60));
    mul_ln329_1_fu_1127_p1 <= mul_ln329_1_fu_1127_p10(30 - 1 downto 0);
    mul_ln329_1_fu_1127_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_reg_1480),60));
    mul_ln329_fu_1115_p0 <= zext_ln329_fu_1112_p1(32 - 1 downto 0);
    mul_ln329_fu_1115_p1 <= zext_ln329_fu_1112_p1(32 - 1 downto 0);
    mul_ln422_fu_1190_p0 <= cast1_reg_1573(30 - 1 downto 0);
    mul_ln422_fu_1190_p1 <= mul_ln422_fu_1190_p10(32 - 1 downto 0);
    mul_ln422_fu_1190_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln286_reg_1531),62));

    output_l1_0_address0_assign_proc : process(ap_block_pp5_stage0, ap_CS_fsm_state28, output_l1_0_addr_1_reg_1815, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, idxprom122_fu_1283_p1, idxprom157_fu_1334_p1, idxprom180_fu_1426_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1))) then 
            output_l1_0_address0 <= idxprom180_fu_1426_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_0_address0 <= output_l1_0_addr_1_reg_1815;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_0_address0 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_0_address0 <= idxprom122_fu_1283_p1(9 - 1 downto 0);
        else 
            output_l1_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_l1_0_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state28, ap_block_pp5_stage0_11001, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)))) then 
            output_l1_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_0_d0_assign_proc : process(sext_ln329_reg_1733, ap_enable_reg_pp3_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, add_ln414_fu_1342_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_0_d0 <= add_ln414_fu_1342_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_0_d0 <= sext_ln329_reg_1733;
        else 
            output_l1_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_l1_0_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln340_reg_1758_pp3_iter2_reg, ap_enable_reg_pp3_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (icmp_ln340_reg_1758_pp3_iter2_reg = ap_const_lv1_0)))) then 
            output_l1_0_we0 <= ap_const_logic_1;
        else 
            output_l1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_1_address0_assign_proc : process(ap_block_pp5_stage0, ap_CS_fsm_state28, output_l1_1_addr_1_reg_1825, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, idxprom122_fu_1283_p1, idxprom157_fu_1334_p1, idxprom180_fu_1426_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1))) then 
            output_l1_1_address0 <= idxprom180_fu_1426_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_1_address0 <= output_l1_1_addr_1_reg_1825;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_1_address0 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_1_address0 <= idxprom122_fu_1283_p1(9 - 1 downto 0);
        else 
            output_l1_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_l1_1_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state28, ap_block_pp5_stage0_11001, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)))) then 
            output_l1_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_1_d0_assign_proc : process(sext_ln329_1_reg_1738, ap_enable_reg_pp3_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, add_ln414_1_fu_1349_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_1_d0 <= add_ln414_1_fu_1349_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_1_d0 <= sext_ln329_1_reg_1738;
        else 
            output_l1_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_l1_1_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln340_reg_1758_pp3_iter2_reg, ap_enable_reg_pp3_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (icmp_ln340_reg_1758_pp3_iter2_reg = ap_const_lv1_0)))) then 
            output_l1_1_we0 <= ap_const_logic_1;
        else 
            output_l1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_2_address0_assign_proc : process(ap_block_pp5_stage0, ap_CS_fsm_state28, output_l1_2_addr_1_reg_1835, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, idxprom122_fu_1283_p1, idxprom157_fu_1334_p1, idxprom180_fu_1426_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1))) then 
            output_l1_2_address0 <= idxprom180_fu_1426_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_2_address0 <= output_l1_2_addr_1_reg_1835;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_2_address0 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_2_address0 <= idxprom122_fu_1283_p1(9 - 1 downto 0);
        else 
            output_l1_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_l1_2_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state28, ap_block_pp5_stage0_11001, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)))) then 
            output_l1_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_2_d0_assign_proc : process(sext_ln329_2_reg_1743, ap_enable_reg_pp3_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, add_ln414_2_fu_1356_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_2_d0 <= add_ln414_2_fu_1356_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_2_d0 <= sext_ln329_2_reg_1743;
        else 
            output_l1_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_l1_2_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln340_reg_1758_pp3_iter2_reg, ap_enable_reg_pp3_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (icmp_ln340_reg_1758_pp3_iter2_reg = ap_const_lv1_0)))) then 
            output_l1_2_we0 <= ap_const_logic_1;
        else 
            output_l1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_3_address0_assign_proc : process(ap_block_pp5_stage0, ap_CS_fsm_state28, output_l1_3_addr_1_reg_1845, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, idxprom122_fu_1283_p1, idxprom157_fu_1334_p1, idxprom180_fu_1426_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1))) then 
            output_l1_3_address0 <= idxprom180_fu_1426_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_3_address0 <= output_l1_3_addr_1_reg_1845;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_3_address0 <= idxprom157_fu_1334_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_3_address0 <= idxprom122_fu_1283_p1(9 - 1 downto 0);
        else 
            output_l1_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_l1_3_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_state28, ap_block_pp5_stage0_11001, ap_enable_reg_pp3_iter3, ap_enable_reg_pp5_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1)))) then 
            output_l1_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_3_d0_assign_proc : process(sext_ln329_3_reg_1748, ap_enable_reg_pp3_iter3, ap_block_pp3_stage0, ap_CS_fsm_state29, add_ln414_3_fu_1363_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_l1_3_d0 <= add_ln414_3_fu_1363_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
            output_l1_3_d0 <= sext_ln329_3_reg_1748;
        else 
            output_l1_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_l1_3_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln340_reg_1758_pp3_iter2_reg, ap_enable_reg_pp3_iter3, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (icmp_ln340_reg_1758_pp3_iter2_reg = ap_const_lv1_0)))) then 
            output_l1_3_we0 <= ap_const_logic_1;
        else 
            output_l1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_0_address0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_address0, ap_CS_fsm_state27, wh_4_cast170_fu_1317_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_0_address0 <= wh_4_cast170_fu_1317_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_0_address0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_address0;
        else 
            output_l1_pass_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_l1_pass_0_ce0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_0_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_ce0;
        else 
            output_l1_pass_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_0_we0_assign_proc : process(grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_we0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_0_we0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_0_we0;
        else 
            output_l1_pass_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_1_address0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_address0, ap_CS_fsm_state27, wh_4_cast170_fu_1317_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_1_address0 <= wh_4_cast170_fu_1317_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_1_address0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_address0;
        else 
            output_l1_pass_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_l1_pass_1_ce0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_1_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_ce0;
        else 
            output_l1_pass_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_1_we0_assign_proc : process(grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_we0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_1_we0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_1_we0;
        else 
            output_l1_pass_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_2_address0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_address0, ap_CS_fsm_state27, wh_4_cast170_fu_1317_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_2_address0 <= wh_4_cast170_fu_1317_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_2_address0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_address0;
        else 
            output_l1_pass_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_l1_pass_2_ce0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_2_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_ce0;
        else 
            output_l1_pass_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_2_we0_assign_proc : process(grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_we0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_2_we0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_2_we0;
        else 
            output_l1_pass_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_3_address0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_address0, ap_CS_fsm_state27, wh_4_cast170_fu_1317_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_3_address0 <= wh_4_cast170_fu_1317_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_3_address0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_address0;
        else 
            output_l1_pass_3_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_l1_pass_3_ce0_assign_proc : process(ap_CS_fsm_state28, grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_l1_pass_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_3_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_ce0;
        else 
            output_l1_pass_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_pass_3_we0_assign_proc : process(grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_we0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_l1_pass_3_we0 <= grp_dataflow_parent_loop_proc14_fu_736_output_l1_pass_3_we0;
        else 
            output_l1_pass_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_8_3_fu_1433_p5 <= (((output_l1_3_q0 & output_l1_2_q0) & output_l1_1_q0) & output_l1_0_q0);
    select_ln296_1_fu_917_p3 <= 
        add_ln296_1_fu_911_p2 when (icmp_ln298_fu_898_p2(0) = '1') else 
        ap_phi_mux_crs_phi_fu_574_p4;
    select_ln296_fu_903_p3 <= 
        ap_const_lv30_0 when (icmp_ln298_fu_898_p2(0) = '1') else 
        ko_1_reg_581;
    select_ln310_1_fu_1045_p3 <= 
        add_ln310_1_fu_1039_p2 when (icmp_ln312_fu_1026_p2(0) = '1') else 
        ap_phi_mux_wh_phi_fu_607_p4;
    select_ln310_fu_1031_p3 <= 
        ap_const_lv30_0 when (icmp_ln312_fu_1026_p2(0) = '1') else 
        co_reg_614;
    select_ln329_1_fu_1163_p3 <= 
        trunc_ln329_fu_1155_p1 when (icmp_ln332_fu_1144_p2(0) = '1') else 
        trunc_ln329_1_fu_1159_p1;
    select_ln329_2_fu_1179_p3 <= 
        add_ln329_1_fu_1149_p2 when (icmp_ln332_fu_1144_p2(0) = '1') else 
        ko_2_reg_636;
    select_ln329_fu_1195_p3 <= 
        ap_const_lv30_0 when (icmp_ln332_reg_1677(0) = '1') else 
        co_1_reg_647;
    select_ln340_1_fu_1261_p3 <= 
        add_ln340_2_fu_1255_p2 when (icmp_ln343_fu_1242_p2(0) = '1') else 
        ap_phi_mux_hi_phi_fu_674_p4;
    select_ln340_fu_1247_p3 <= 
        ap_const_lv32_0 when (icmp_ln343_fu_1242_p2(0) = '1') else 
        wi_reg_681;
    select_ln422_1_fu_1415_p3 <= 
        add_ln422_1_fu_1409_p2 when (icmp_ln424_reg_1864_pp5_iter1_reg(0) = '1') else 
        ap_phi_mux_wh_1_phi_fu_729_p4;
    select_ln422_fu_1391_p3 <= 
        ap_const_lv30_0 when (icmp_ln424_fu_1386_p2(0) = '1') else 
        ko_3_reg_714;
        sext_ln329_1_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_l1_1_q0),32));

        sext_ln329_2_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_l1_2_q0),32));

        sext_ln329_3_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_l1_3_q0),32));

        sext_ln329_fu_1211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_l1_0_q0),32));

    trunc_ln271_fu_785_p1 <= bias_in_V_dout(9 - 1 downto 0);
    trunc_ln286_fu_797_p1 <= mul_ln286_fu_793_p2(9 - 1 downto 0);
    trunc_ln296_1_fu_925_p1 <= select_ln296_1_fu_917_p3(9 - 1 downto 0);
    trunc_ln296_fu_870_p1 <= mul45_fu_866_p2(9 - 1 downto 0);
    trunc_ln310_fu_1053_p1 <= select_ln310_1_fu_1045_p3(10 - 1 downto 0);
    trunc_ln329_1_fu_1159_p1 <= ko_2_reg_636(9 - 1 downto 0);
    trunc_ln329_fu_1155_p1 <= add_ln329_1_fu_1149_p2(9 - 1 downto 0);
    trunc_ln332_fu_1227_p1 <= select_ln329_fu_1195_p3(10 - 1 downto 0);

    weight_in_V_blk_n_assign_proc : process(weight_in_V_empty_n, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, icmp_ln296_reg_1583_pp1_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_in_V_blk_n <= weight_in_V_empty_n;
        else 
            weight_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weight_in_V_read_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln296_reg_1583_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_in_V_read <= ap_const_logic_1;
        else 
            weight_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_0_address0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_address0, ap_CS_fsm_state27, idxprom67_fu_939_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_0_address0 <= idxprom67_fu_939_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_0_address0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_address0;
        else 
            weight_l2_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weight_l2_0_ce0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_0_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_0_ce0;
        else 
            weight_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_0_d0 <= weight_in_V_dout(8 - 1 downto 0);

    weight_l2_0_we0_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln296_reg_1583_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_0_we0 <= ap_const_logic_1;
        else 
            weight_l2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_1_address0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_address0, ap_CS_fsm_state27, idxprom67_fu_939_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_1_address0 <= idxprom67_fu_939_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_1_address0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_address0;
        else 
            weight_l2_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weight_l2_1_ce0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_1_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_1_ce0;
        else 
            weight_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_1_d0 <= weight_in_V_dout(15 downto 8);

    weight_l2_1_we0_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln296_reg_1583_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_1_we0 <= ap_const_logic_1;
        else 
            weight_l2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_2_address0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_address0, ap_CS_fsm_state27, idxprom67_fu_939_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_2_address0 <= idxprom67_fu_939_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_2_address0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_address0;
        else 
            weight_l2_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weight_l2_2_ce0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_2_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_2_ce0;
        else 
            weight_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_2_d0 <= weight_in_V_dout(23 downto 16);

    weight_l2_2_we0_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln296_reg_1583_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_2_we0 <= ap_const_logic_1;
        else 
            weight_l2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_l2_3_address0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_address0, ap_CS_fsm_state27, idxprom67_fu_939_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_3_address0 <= idxprom67_fu_939_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_3_address0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_address0;
        else 
            weight_l2_3_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weight_l2_3_ce0_assign_proc : process(ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_11001, grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_ce0, ap_CS_fsm_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            weight_l2_3_ce0 <= grp_dataflow_parent_loop_proc14_fu_736_weight_l2_3_ce0;
        else 
            weight_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_3_d0 <= weight_in_V_dout(31 downto 24);

    weight_l2_3_we0_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln296_reg_1583_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln296_reg_1583_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            weight_l2_3_we0 <= ap_const_logic_1;
        else 
            weight_l2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    wh_4_cast170_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wh_2_reg_692),64));
    zext_ln329_3_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln329_1_fu_1163_p3),64));
    zext_ln329_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WH_reg_1505),64));
end behav;
