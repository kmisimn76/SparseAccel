-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runWeight2Reg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_l2_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_l2_0_ce0 : OUT STD_LOGIC;
    weight_l2_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_l2_1_ce0 : OUT STD_LOGIC;
    weight_l2_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_l2_2_ce0 : OUT STD_LOGIC;
    weight_l2_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_l2_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_l2_3_ce0 : OUT STD_LOGIC;
    weight_l2_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_19_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    empty_19_empty_n : IN STD_LOGIC;
    empty_19_read : OUT STD_LOGIC;
    empty_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    empty_empty_n : IN STD_LOGIC;
    empty_read : OUT STD_LOGIC;
    ko_2_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    ko_2_empty_n : IN STD_LOGIC;
    ko_2_read : OUT STD_LOGIC;
    co_1_dout : IN STD_LOGIC_VECTOR (6 downto 0);
    co_1_empty_n : IN STD_LOGIC;
    co_1_read : OUT STD_LOGIC;
    ro_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ro_empty_n : IN STD_LOGIC;
    ro_read : OUT STD_LOGIC;
    so_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    so_empty_n : IN STD_LOGIC;
    so_read : OUT STD_LOGIC;
    ko_2_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
    ko_2_out_full_n : IN STD_LOGIC;
    ko_2_out_write : OUT STD_LOGIC;
    ro_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ro_out_full_n : IN STD_LOGIC;
    ro_out_write : OUT STD_LOGIC;
    so_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    so_out_full_n : IN STD_LOGIC;
    so_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Conv_sysarr_runWeight2Reg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_19_blk_n : STD_LOGIC;
    signal empty_blk_n : STD_LOGIC;
    signal ko_2_blk_n : STD_LOGIC;
    signal co_1_blk_n : STD_LOGIC;
    signal ro_blk_n : STD_LOGIC;
    signal so_blk_n : STD_LOGIC;
    signal ko_2_out_blk_n : STD_LOGIC;
    signal ro_out_blk_n : STD_LOGIC;
    signal so_out_blk_n : STD_LOGIC;
    signal trunc_ln18_fu_398_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln18_reg_1504 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal empty_36_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_36_reg_1509 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_1514 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul2_i_i_fu_406_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul2_i_i_reg_1520 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul4_i_i_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul4_i_i_reg_1525 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_fu_506_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln19_reg_1533 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_37_fu_512_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_37_reg_1538 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln19_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal weight_l2_0_load_reg_1594 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weight_l2_1_load_reg_1599 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_2_load_reg_1604 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_l2_3_load_reg_1609 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_fu_644_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ci_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln20_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ki_reg_339 : STD_LOGIC_VECTOR (2 downto 0);
    signal idxprom_i_i_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_regfile_3_3_016_fu_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_3_3_fu_1144_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_650_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal write_flag_0_fu_92 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag_3_fu_988_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_0_fu_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag45_3_fu_1157_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_2_017_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_2_3_fu_1170_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_0_018_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_0_3_fu_1001_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag42_0_fu_108 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag42_3_fu_1183_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_1_019_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_1_3_fu_1196_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag3_0_fu_116 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag3_3_fu_1014_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_0_fu_120 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag39_3_fu_1209_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_3_0_020_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_3_0_3_fu_1222_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_1_021_fu_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_1_3_fu_1027_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag36_0_fu_132 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag36_3_fu_1235_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_3_022_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_3_3_fu_676_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag6_0_fu_140 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag6_3_fu_1040_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_0_fu_144 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag33_3_fu_689_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_2_023_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_2_3_fu_702_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_2_024_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_2_3_fu_1053_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag30_0_fu_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag30_3_fu_715_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_1_025_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_1_3_fu_728_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag9_0_fu_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag9_3_fu_1066_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_0_fu_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag27_3_fu_741_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_2_0_026_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_2_0_3_fu_754_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_3_027_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_0_3_3_fu_1079_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag24_0_fu_180 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag24_3_fu_767_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_3_028_fu_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_3_3_fu_832_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag12_0_fu_188 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag12_3_fu_845_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_0_fu_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag21_3_fu_858_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_2_029_fu_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_2_3_fu_871_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_0_030_fu_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_0_3_fu_884_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag18_0_fu_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag18_3_fu_897_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_regfile_1_1_031_fu_208 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_regfile_1_1_3_fu_910_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag15_0_fu_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag15_3_fu_923_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_cast_i_i_cast_fu_516_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_520_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul61_i_i_fu_530_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1288_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal weight_regfile_1_1_fu_654_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_regfile_1_1_fu_654_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul61_i_i_fu_530_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component Conv_sysarr_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Conv_sysarr_mux_42_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sysarr_ama_addmuladd_9ns_9ns_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    mul_9s_9s_9_1_1_U36 : component Conv_sysarr_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => empty_19_dout,
        din1 => ko_2_dout,
        dout => mul4_i_i_fu_414_p2);

    mul_9s_9s_9_1_1_U37 : component Conv_sysarr_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => tmp_2_reg_1514,
        din1 => mul61_i_i_fu_530_p1,
        dout => mul61_i_i_fu_530_p2);

    mux_42_8_1_1_U38 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_l2_0_load_reg_1594,
        din1 => weight_l2_1_load_reg_1599,
        din2 => weight_l2_2_load_reg_1604,
        din3 => weight_l2_3_load_reg_1609,
        din4 => weight_regfile_1_1_fu_654_p5,
        dout => weight_regfile_1_1_fu_654_p6);

    mux_42_8_1_1_U39 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_3_022_fu_136,
        din1 => weight_regfile_2_3_022_fu_136,
        din2 => weight_regfile_2_3_022_fu_136,
        din3 => weight_regfile_1_1_fu_654_p6,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_2_3_3_fu_676_p6);

    mux_42_1_1_1_U40 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag33_0_fu_144,
        din1 => write_flag33_0_fu_144,
        din2 => write_flag33_0_fu_144,
        din3 => ap_const_lv1_1,
        din4 => empty_37_reg_1538,
        dout => write_flag33_3_fu_689_p6);

    mux_42_8_1_1_U41 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_2_023_fu_148,
        din1 => weight_regfile_2_2_023_fu_148,
        din2 => weight_regfile_1_1_fu_654_p6,
        din3 => weight_regfile_2_2_023_fu_148,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_2_2_3_fu_702_p6);

    mux_42_1_1_1_U42 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag30_0_fu_156,
        din1 => write_flag30_0_fu_156,
        din2 => ap_const_lv1_1,
        din3 => write_flag30_0_fu_156,
        din4 => empty_37_reg_1538,
        dout => write_flag30_3_fu_715_p6);

    mux_42_8_1_1_U43 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_2_1_025_fu_160,
        din1 => weight_regfile_1_1_fu_654_p6,
        din2 => weight_regfile_2_1_025_fu_160,
        din3 => weight_regfile_2_1_025_fu_160,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_2_1_3_fu_728_p6);

    mux_42_1_1_1_U44 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag27_0_fu_168,
        din1 => ap_const_lv1_1,
        din2 => write_flag27_0_fu_168,
        din3 => write_flag27_0_fu_168,
        din4 => empty_37_reg_1538,
        dout => write_flag27_3_fu_741_p6);

    mux_42_8_1_1_U45 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_1_fu_654_p6,
        din1 => weight_regfile_2_0_026_fu_172,
        din2 => weight_regfile_2_0_026_fu_172,
        din3 => weight_regfile_2_0_026_fu_172,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_2_0_3_fu_754_p6);

    mux_42_1_1_1_U46 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag24_0_fu_180,
        din2 => write_flag24_0_fu_180,
        din3 => write_flag24_0_fu_180,
        din4 => empty_37_reg_1538,
        dout => write_flag24_3_fu_767_p6);

    mux_42_8_1_1_U47 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_3_028_fu_184,
        din1 => weight_regfile_1_3_028_fu_184,
        din2 => weight_regfile_1_3_028_fu_184,
        din3 => weight_regfile_1_1_fu_654_p6,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_1_3_3_fu_832_p6);

    mux_42_1_1_1_U48 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag12_0_fu_188,
        din2 => write_flag12_0_fu_188,
        din3 => write_flag12_0_fu_188,
        din4 => empty_37_reg_1538,
        dout => write_flag12_3_fu_845_p6);

    mux_42_1_1_1_U49 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag21_0_fu_192,
        din1 => write_flag21_0_fu_192,
        din2 => write_flag21_0_fu_192,
        din3 => ap_const_lv1_1,
        din4 => empty_37_reg_1538,
        dout => write_flag21_3_fu_858_p6);

    mux_42_8_1_1_U50 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_2_029_fu_196,
        din1 => weight_regfile_1_2_029_fu_196,
        din2 => weight_regfile_1_1_fu_654_p6,
        din3 => weight_regfile_1_2_029_fu_196,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_1_2_3_fu_871_p6);

    mux_42_8_1_1_U51 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_1_fu_654_p6,
        din1 => weight_regfile_1_0_030_fu_200,
        din2 => weight_regfile_1_0_030_fu_200,
        din3 => weight_regfile_1_0_030_fu_200,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_1_0_3_fu_884_p6);

    mux_42_1_1_1_U52 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag18_0_fu_204,
        din1 => write_flag18_0_fu_204,
        din2 => ap_const_lv1_1,
        din3 => write_flag18_0_fu_204,
        din4 => empty_37_reg_1538,
        dout => write_flag18_3_fu_897_p6);

    mux_42_8_1_1_U53 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_1_031_fu_208,
        din1 => weight_regfile_1_1_fu_654_p6,
        din2 => weight_regfile_1_1_031_fu_208,
        din3 => weight_regfile_1_1_031_fu_208,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_1_1_3_fu_910_p6);

    mux_42_1_1_1_U54 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag15_0_fu_212,
        din1 => ap_const_lv1_1,
        din2 => write_flag15_0_fu_212,
        din3 => write_flag15_0_fu_212,
        din4 => empty_37_reg_1538,
        dout => write_flag15_3_fu_923_p6);

    mux_42_1_1_1_U55 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag_0_fu_92,
        din2 => write_flag_0_fu_92,
        din3 => write_flag_0_fu_92,
        din4 => empty_37_reg_1538,
        dout => write_flag_3_fu_988_p6);

    mux_42_8_1_1_U56 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_1_fu_654_p6,
        din1 => weight_regfile_0_0_018_fu_104,
        din2 => weight_regfile_0_0_018_fu_104,
        din3 => weight_regfile_0_0_018_fu_104,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_0_0_3_fu_1001_p6);

    mux_42_1_1_1_U57 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag3_0_fu_116,
        din1 => ap_const_lv1_1,
        din2 => write_flag3_0_fu_116,
        din3 => write_flag3_0_fu_116,
        din4 => empty_37_reg_1538,
        dout => write_flag3_3_fu_1014_p6);

    mux_42_8_1_1_U58 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_1_021_fu_128,
        din1 => weight_regfile_1_1_fu_654_p6,
        din2 => weight_regfile_0_1_021_fu_128,
        din3 => weight_regfile_0_1_021_fu_128,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_0_1_3_fu_1027_p6);

    mux_42_1_1_1_U59 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag6_0_fu_140,
        din1 => write_flag6_0_fu_140,
        din2 => ap_const_lv1_1,
        din3 => write_flag6_0_fu_140,
        din4 => empty_37_reg_1538,
        dout => write_flag6_3_fu_1040_p6);

    mux_42_8_1_1_U60 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_2_024_fu_152,
        din1 => weight_regfile_0_2_024_fu_152,
        din2 => weight_regfile_1_1_fu_654_p6,
        din3 => weight_regfile_0_2_024_fu_152,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_0_2_3_fu_1053_p6);

    mux_42_1_1_1_U61 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag9_0_fu_164,
        din1 => write_flag9_0_fu_164,
        din2 => write_flag9_0_fu_164,
        din3 => ap_const_lv1_1,
        din4 => empty_37_reg_1538,
        dout => write_flag9_3_fu_1066_p6);

    mux_42_8_1_1_U62 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_0_3_027_fu_176,
        din1 => weight_regfile_0_3_027_fu_176,
        din2 => weight_regfile_0_3_027_fu_176,
        din3 => weight_regfile_1_1_fu_654_p6,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_0_3_3_fu_1079_p6);

    mux_42_8_1_1_U63 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_3_016_fu_88,
        din1 => weight_regfile_3_3_016_fu_88,
        din2 => weight_regfile_3_3_016_fu_88,
        din3 => weight_regfile_1_1_fu_654_p6,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_3_3_3_fu_1144_p6);

    mux_42_1_1_1_U64 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag45_0_fu_96,
        din1 => write_flag45_0_fu_96,
        din2 => write_flag45_0_fu_96,
        din3 => ap_const_lv1_1,
        din4 => empty_37_reg_1538,
        dout => write_flag45_3_fu_1157_p6);

    mux_42_8_1_1_U65 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_2_017_fu_100,
        din1 => weight_regfile_3_2_017_fu_100,
        din2 => weight_regfile_1_1_fu_654_p6,
        din3 => weight_regfile_3_2_017_fu_100,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_3_2_3_fu_1170_p6);

    mux_42_1_1_1_U66 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag42_0_fu_108,
        din1 => write_flag42_0_fu_108,
        din2 => ap_const_lv1_1,
        din3 => write_flag42_0_fu_108,
        din4 => empty_37_reg_1538,
        dout => write_flag42_3_fu_1183_p6);

    mux_42_8_1_1_U67 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_3_1_019_fu_112,
        din1 => weight_regfile_1_1_fu_654_p6,
        din2 => weight_regfile_3_1_019_fu_112,
        din3 => weight_regfile_3_1_019_fu_112,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_3_1_3_fu_1196_p6);

    mux_42_1_1_1_U68 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => write_flag39_0_fu_120,
        din1 => ap_const_lv1_1,
        din2 => write_flag39_0_fu_120,
        din3 => write_flag39_0_fu_120,
        din4 => empty_37_reg_1538,
        dout => write_flag39_3_fu_1209_p6);

    mux_42_8_1_1_U69 : component Conv_sysarr_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => weight_regfile_1_1_fu_654_p6,
        din1 => weight_regfile_3_0_020_fu_124,
        din2 => weight_regfile_3_0_020_fu_124,
        din3 => weight_regfile_3_0_020_fu_124,
        din4 => empty_37_reg_1538,
        dout => weight_regfile_3_0_3_fu_1222_p6);

    mux_42_1_1_1_U70 : component Conv_sysarr_mux_42_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => write_flag36_0_fu_132,
        din2 => write_flag36_0_fu_132,
        din3 => write_flag36_0_fu_132,
        din4 => empty_37_reg_1538,
        dout => write_flag36_3_fu_1235_p6);

    ama_addmuladd_9ns_9ns_9s_9ns_9_4_1_U71 : component Conv_sysarr_ama_addmuladd_9ns_9ns_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln18_reg_1504,
        din1 => mul61_i_i_fu_530_p2,
        din2 => tmp_2_reg_1514,
        din3 => empty_36_reg_1509,
        ce => ap_const_logic_1,
        dout => grp_fu_1288_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_500_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_1))) then 
                ci_reg_328 <= add_ln19_reg_1533;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ci_reg_328 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ki_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                ki_reg_339 <= add_ln20_fu_644_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ki_reg_339 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    write_flag12_0_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag12_0_fu_188 <= write_flag12_3_fu_845_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag12_0_fu_188 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag15_0_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag15_0_fu_212 <= write_flag15_3_fu_923_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag15_0_fu_212 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag18_0_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag18_0_fu_204 <= write_flag18_3_fu_897_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag18_0_fu_204 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag21_0_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag21_0_fu_192 <= write_flag21_3_fu_858_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag21_0_fu_192 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag24_0_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag24_0_fu_180 <= write_flag24_3_fu_767_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag24_0_fu_180 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag27_0_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag27_0_fu_168 <= write_flag27_3_fu_741_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag27_0_fu_168 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag30_0_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag30_0_fu_156 <= write_flag30_3_fu_715_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag30_0_fu_156 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag33_0_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag33_0_fu_144 <= write_flag33_3_fu_689_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag33_0_fu_144 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag36_0_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag36_0_fu_132 <= write_flag36_3_fu_1235_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag36_0_fu_132 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag39_0_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag39_0_fu_120 <= write_flag39_3_fu_1209_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag39_0_fu_120 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag3_0_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag3_0_fu_116 <= write_flag3_3_fu_1014_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag3_0_fu_116 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag42_0_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag42_0_fu_108 <= write_flag42_3_fu_1183_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag42_0_fu_108 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag45_0_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag45_0_fu_96 <= write_flag45_3_fu_1157_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag45_0_fu_96 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag6_0_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag6_0_fu_140 <= write_flag6_3_fu_1040_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag6_0_fu_140 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag9_0_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag9_0_fu_164 <= write_flag9_3_fu_1066_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag9_0_fu_164 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_0_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then 
                write_flag_0_fu_92 <= write_flag_3_fu_988_p6;
            elsif ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                write_flag_0_fu_92 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_reg_1533 <= add_ln19_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_36_reg_1509 <= empty_36_fu_402_p1;
                    mul2_i_i_reg_1520(8 downto 2) <= mul2_i_i_fu_406_p3(8 downto 2);
                mul4_i_i_reg_1525 <= mul4_i_i_fu_414_p2;
                tmp_2_reg_1514 <= empty_dout;
                trunc_ln18_reg_1504 <= trunc_ln18_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_500_p2 = ap_const_lv1_0))) then
                empty_37_reg_1538 <= empty_37_fu_512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                weight_l2_0_load_reg_1594 <= weight_l2_0_q0;
                weight_l2_1_load_reg_1599 <= weight_l2_1_q0;
                weight_l2_2_load_reg_1604 <= weight_l2_2_q0;
                weight_l2_3_load_reg_1609 <= weight_l2_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then
                weight_regfile_0_0_018_fu_104 <= weight_regfile_0_0_3_fu_1001_p6;
                weight_regfile_0_1_021_fu_128 <= weight_regfile_0_1_3_fu_1027_p6;
                weight_regfile_0_2_024_fu_152 <= weight_regfile_0_2_3_fu_1053_p6;
                weight_regfile_0_3_027_fu_176 <= weight_regfile_0_3_3_fu_1079_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then
                weight_regfile_1_0_030_fu_200 <= weight_regfile_1_0_3_fu_884_p6;
                weight_regfile_1_1_031_fu_208 <= weight_regfile_1_1_3_fu_910_p6;
                weight_regfile_1_2_029_fu_196 <= weight_regfile_1_2_3_fu_871_p6;
                weight_regfile_1_3_028_fu_184 <= weight_regfile_1_3_3_fu_832_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then
                weight_regfile_2_0_026_fu_172 <= weight_regfile_2_0_3_fu_754_p6;
                weight_regfile_2_1_025_fu_160 <= weight_regfile_2_1_3_fu_728_p6;
                weight_regfile_2_2_023_fu_148 <= weight_regfile_2_2_3_fu_702_p6;
                weight_regfile_2_3_022_fu_136 <= weight_regfile_2_3_3_fu_676_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln24_fu_650_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_0))) then
                weight_regfile_3_0_020_fu_124 <= weight_regfile_3_0_3_fu_1222_p6;
                weight_regfile_3_1_019_fu_112 <= weight_regfile_3_1_3_fu_1196_p6;
                weight_regfile_3_2_017_fu_100 <= weight_regfile_3_2_3_fu_1170_p6;
                weight_regfile_3_3_016_fu_88 <= weight_regfile_3_3_3_fu_1144_p6;
            end if;
        end if;
    end process;
    mul2_i_i_reg_1520(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n, ap_CS_fsm_state2, icmp_ln19_fu_500_p2, ap_CS_fsm_state7, icmp_ln20_fu_638_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln20_fu_638_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln19_fu_506_p2 <= std_logic_vector(unsigned(ci_reg_328) + unsigned(ap_const_lv3_1));
    add_ln20_fu_644_p2 <= std_logic_vector(unsigned(ki_reg_339) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
                ap_block_state1 <= ((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln19_fu_500_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_500_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_500_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_500_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= weight_regfile_0_0_018_fu_104;
    ap_return_1 <= weight_regfile_0_1_021_fu_128;
    ap_return_10 <= weight_regfile_2_2_023_fu_148;
    ap_return_11 <= weight_regfile_2_3_022_fu_136;
    ap_return_12 <= weight_regfile_3_0_020_fu_124;
    ap_return_13 <= weight_regfile_3_1_019_fu_112;
    ap_return_14 <= weight_regfile_3_2_017_fu_100;
    ap_return_15 <= weight_regfile_3_3_016_fu_88;
    ap_return_2 <= weight_regfile_0_2_024_fu_152;
    ap_return_3 <= weight_regfile_0_3_027_fu_176;
    ap_return_4 <= weight_regfile_1_0_030_fu_200;
    ap_return_5 <= weight_regfile_1_1_031_fu_208;
    ap_return_6 <= weight_regfile_1_2_029_fu_196;
    ap_return_7 <= weight_regfile_1_3_028_fu_184;
    ap_return_8 <= weight_regfile_2_0_026_fu_172;
    ap_return_9 <= weight_regfile_2_1_025_fu_160;
    ci_cast_i_i_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_fu_512_p1),9));

    co_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, co_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_1_blk_n <= co_1_empty_n;
        else 
            co_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    co_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            co_1_read <= ap_const_logic_1;
        else 
            co_1_read <= ap_const_logic_0;
        end if; 
    end process;


    empty_19_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_19_blk_n <= empty_19_empty_n;
        else 
            empty_19_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_19_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_19_read <= ap_const_logic_1;
        else 
            empty_19_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_36_fu_402_p1 <= so_dout(9 - 1 downto 0);
    empty_37_fu_512_p1 <= ci_reg_328(2 - 1 downto 0);

    empty_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_blk_n <= empty_empty_n;
        else 
            empty_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_read <= ap_const_logic_1;
        else 
            empty_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln19_fu_500_p2 <= "1" when (ci_reg_328 = ap_const_lv3_4) else "0";
    icmp_ln20_fu_638_p2 <= "1" when (ki_reg_339 = ap_const_lv3_4) else "0";
    idxprom_i_i_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1288_p4),64));

    ko_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_blk_n <= ko_2_empty_n;
        else 
            ko_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_2_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_2_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_out_blk_n <= ko_2_out_full_n;
        else 
            ko_2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ko_2_out_din <= ko_2_dout;

    ko_2_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_out_write <= ap_const_logic_1;
        else 
            ko_2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ko_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_read <= ap_const_logic_1;
        else 
            ko_2_read <= ap_const_logic_0;
        end if; 
    end process;

    mul2_i_i_fu_406_p3 <= (co_1_dout & ap_const_lv2_0);
    mul61_i_i_fu_530_p1 <= std_logic_vector(unsigned(tmp_fu_520_p2) + unsigned(mul2_i_i_reg_1520));

    ro_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_blk_n <= ro_empty_n;
        else 
            ro_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ro_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ro_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_blk_n <= ro_out_full_n;
        else 
            ro_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ro_out_din <= ro_dout;

    ro_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_out_write <= ap_const_logic_1;
        else 
            ro_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ro_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ro_read <= ap_const_logic_1;
        else 
            ro_read <= ap_const_logic_0;
        end if; 
    end process;


    so_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_blk_n <= so_empty_n;
        else 
            so_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    so_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, so_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_blk_n <= so_out_full_n;
        else 
            so_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    so_out_din <= so_dout;

    so_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_out_write <= ap_const_logic_1;
        else 
            so_out_write <= ap_const_logic_0;
        end if; 
    end process;


    so_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_19_empty_n, empty_empty_n, ko_2_empty_n, co_1_empty_n, ro_empty_n, so_empty_n, ko_2_out_full_n, ro_out_full_n, so_out_full_n)
    begin
        if ((not(((so_out_full_n = ap_const_logic_0) or (ro_out_full_n = ap_const_logic_0) or (ko_2_out_full_n = ap_const_logic_0) or (so_empty_n = ap_const_logic_0) or (ro_empty_n = ap_const_logic_0) or (co_1_empty_n = ap_const_logic_0) or (ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (empty_19_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            so_read <= ap_const_logic_1;
        else 
            so_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_520_p2 <= std_logic_vector(unsigned(mul4_i_i_reg_1525) + unsigned(ci_cast_i_i_cast_fu_516_p1));
    trunc_ln18_fu_398_p1 <= ro_dout(9 - 1 downto 0);
    trunc_ln24_fu_650_p1 <= ki_reg_339(2 - 1 downto 0);
    weight_l2_0_address0 <= idxprom_i_i_fu_631_p1(9 - 1 downto 0);

    weight_l2_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_l2_0_ce0 <= ap_const_logic_1;
        else 
            weight_l2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_1_address0 <= idxprom_i_i_fu_631_p1(9 - 1 downto 0);

    weight_l2_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_l2_1_ce0 <= ap_const_logic_1;
        else 
            weight_l2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_2_address0 <= idxprom_i_i_fu_631_p1(9 - 1 downto 0);

    weight_l2_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_l2_2_ce0 <= ap_const_logic_1;
        else 
            weight_l2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_l2_3_address0 <= idxprom_i_i_fu_631_p1(9 - 1 downto 0);

    weight_l2_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_l2_3_ce0 <= ap_const_logic_1;
        else 
            weight_l2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_regfile_1_1_fu_654_p5 <= ki_reg_339(2 - 1 downto 0);
end behav;
