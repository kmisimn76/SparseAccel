-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv_sysarr_runSysArr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_regfile_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_regfile_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_0_ce0 : OUT STD_LOGIC;
    data_l1buf_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_1_ce0 : OUT STD_LOGIC;
    data_l1buf_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_2_ce0 : OUT STD_LOGIC;
    data_l1buf_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_l1buf_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    data_l1buf_3_ce0 : OUT STD_LOGIC;
    data_l1buf_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_l1_pass_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_pass_0_ce0 : OUT STD_LOGIC;
    output_l1_pass_0_we0 : OUT STD_LOGIC;
    output_l1_pass_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_pass_1_ce0 : OUT STD_LOGIC;
    output_l1_pass_1_we0 : OUT STD_LOGIC;
    output_l1_pass_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_pass_2_ce0 : OUT STD_LOGIC;
    output_l1_pass_2_we0 : OUT STD_LOGIC;
    output_l1_pass_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_l1_pass_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_l1_pass_3_ce0 : OUT STD_LOGIC;
    output_l1_pass_3_we0 : OUT STD_LOGIC;
    output_l1_pass_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    empty_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_empty_n : IN STD_LOGIC;
    empty_read : OUT STD_LOGIC;
    ko_2_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    ko_2_empty_n : IN STD_LOGIC;
    ko_2_read : OUT STD_LOGIC;
    s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    s_empty_n : IN STD_LOGIC;
    s_read : OUT STD_LOGIC;
    r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    r_empty_n : IN STD_LOGIC;
    r_read : OUT STD_LOGIC );
end;


architecture behav of Conv_sysarr_runSysArr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_1FA : STD_LOGIC_VECTOR (8 downto 0) := "111111010";
    constant ap_const_lv9_1FB : STD_LOGIC_VECTOR (8 downto 0) := "111111011";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv33_1FFFFFFFE : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv33_1FFFFFFFD : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111101";
    constant ap_const_lv33_1FFFFFFFC : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111100";
    constant ap_const_lv33_1FFFFFFFA : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111010";
    constant ap_const_lv32_FFFFFFFA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111010";
    constant ap_const_lv33_1FFFFFFFB : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111011";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv32_FFFFFFFC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111100";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_l1_local_3_ce0 : STD_LOGIC;
    signal output_l1_local_3_we0 : STD_LOGIC;
    signal output_l1_local_3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_3_ce1 : STD_LOGIC;
    signal output_l1_local_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_2_ce0 : STD_LOGIC;
    signal output_l1_local_2_we0 : STD_LOGIC;
    signal output_l1_local_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_2_ce1 : STD_LOGIC;
    signal output_l1_local_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_1_ce0 : STD_LOGIC;
    signal output_l1_local_1_we0 : STD_LOGIC;
    signal output_l1_local_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_1_ce1 : STD_LOGIC;
    signal output_l1_local_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_l1_local_0_ce0 : STD_LOGIC;
    signal output_l1_local_0_we0 : STD_LOGIC;
    signal output_l1_local_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_l1_local_0_ce1 : STD_LOGIC;
    signal output_l1_local_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_blk_n : STD_LOGIC;
    signal ko_2_blk_n : STD_LOGIC;
    signal s_blk_n : STD_LOGIC;
    signal r_blk_n : STD_LOGIC;
    signal i_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln147_reg_1697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal add_ln147_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln147_reg_1705 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln197_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln197_reg_1710 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln86_fu_615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_reg_1718 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_1_fu_619_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_1_reg_1723 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_2_fu_623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_2_reg_1728 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_3_fu_627_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_3_reg_1733 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_4_fu_631_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_4_reg_1738 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_5_fu_635_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_5_reg_1743 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_6_fu_639_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_6_reg_1748 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_7_fu_643_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_7_reg_1753 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_8_fu_647_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_8_reg_1758 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_9_fu_651_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_9_reg_1763 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_10_fu_655_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_10_reg_1768 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_11_fu_659_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_11_reg_1773 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_12_fu_663_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_12_reg_1778 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_13_fu_667_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_13_reg_1783 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_14_fu_671_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_14_reg_1788 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln55_fu_675_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln55_reg_1793 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln100_4_fu_679_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_4_reg_1798 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_5_fu_685_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_5_reg_1803 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_6_fu_691_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_6_reg_1808 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_7_fu_697_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln100_7_reg_1813 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln55_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln55_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln55_fu_719_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln55_reg_1827 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln68_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1840 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1850 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1860 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_reg_1915 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_l1_local_3_addr_reg_1919 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln93_1_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_1_reg_1925 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_l1_local_2_addr_reg_1929 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln93_2_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_2_reg_1935 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_l1_local_1_addr_reg_1939 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln93_3_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln93_3_reg_1945 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_l1_local_0_addr_reg_1949 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln55_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln70_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_1_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_1_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_2_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_1336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_1_fu_1360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_2_fu_1384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_3_fu_1408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_reg_0_0_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_0_1_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_0_1_1_fu_1040_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_data_reg_1_1_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_0_2_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_0_2_1_fu_1047_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_data_reg_1_2_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_0_3_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_0_3_1_fu_1054_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_data_reg_1_3_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_1_0_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_1_1_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_1_2_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_1_3_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_2_0_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_2_1_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_2_2_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_reg_2_3_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_reg_0_0_fu_214 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_0_0_1_fu_1307_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_0_1_fu_218 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1505_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal output_reg_0_2_fu_222 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1497_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1488_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal output_reg_1_0_fu_230 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_1_0_1_fu_1225_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_1_1_fu_234 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1480_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal output_reg_1_2_fu_238 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1472_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1463_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal output_reg_2_0_fu_246 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_2_0_1_fu_1167_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_2_1_fu_250 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1455_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal output_reg_2_2_fu_254 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1447_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1438_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal output_reg_3_0_fu_262 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_3_0_1_fu_1109_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_reg_3_1_fu_266 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1430_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal output_reg_3_2_fu_270 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1422_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1413_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln197_fu_1323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln197_1_fu_1347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln197_2_fu_1371_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln197_3_fu_1395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln197_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul86_i_i_fu_609_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul86_i_i_fu_609_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln70_fu_733_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_1_fu_723_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln68_fu_744_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln68_1_fu_763_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_30_fu_897_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln93_fu_908_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_fu_919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_1_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln93_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_2_fu_950_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_fu_961_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_3_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_1_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln93_1_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_992_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_4_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_2_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln93_2_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_5_fu_1023_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln93_3_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln68_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_reg_3_0_1_fu_1109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_reg_2_0_1_fu_1167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_reg_1_0_1_fu_1225_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_reg_0_0_1_fu_1307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln85_fu_1068_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_fu_1317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln100_fu_1332_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln85_1_fu_1126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_1_fu_1341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln100_1_fu_1356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln85_2_fu_1184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_2_fu_1365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln100_2_fu_1380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln85_3_fu_1251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_3_fu_1389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln100_3_fu_1404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1455_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1472_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1488_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1497_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Conv_sysarr_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_sysarr_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Conv_sysarr_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_8s_8s_18s_19_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_8s_8s_17s_18_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_8s_8s_16s_17_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_8s_8s_18s_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_8s_8s_17s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component Conv_sysarr_mac_muladd_8s_8s_16s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component Conv_sysarr_runSysArr_output_l1_local_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_l1_local_3_U : component Conv_sysarr_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_3_addr_reg_1919,
        ce0 => output_l1_local_3_ce0,
        we0 => output_l1_local_3_we0,
        d0 => select_ln197_fu_1323_p3,
        address1 => output_l1_local_3_address1,
        ce1 => output_l1_local_3_ce1,
        q1 => output_l1_local_3_q1);

    output_l1_local_2_U : component Conv_sysarr_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_2_addr_reg_1929,
        ce0 => output_l1_local_2_ce0,
        we0 => output_l1_local_2_we0,
        d0 => select_ln197_1_fu_1347_p3,
        address1 => output_l1_local_2_address1,
        ce1 => output_l1_local_2_ce1,
        q1 => output_l1_local_2_q1);

    output_l1_local_1_U : component Conv_sysarr_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_1_addr_reg_1939,
        ce0 => output_l1_local_1_ce0,
        we0 => output_l1_local_1_we0,
        d0 => select_ln197_2_fu_1371_p3,
        address1 => output_l1_local_1_address1,
        ce1 => output_l1_local_1_ce1,
        q1 => output_l1_local_1_q1);

    output_l1_local_0_U : component Conv_sysarr_runSysArr_output_l1_local_3
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_l1_local_0_addr_reg_1949,
        ce0 => output_l1_local_0_ce0,
        we0 => output_l1_local_0_we0,
        d0 => select_ln197_3_fu_1395_p3,
        address1 => output_l1_local_0_address1,
        ce1 => output_l1_local_0_ce1,
        q1 => output_l1_local_0_q1);

    mul_32s_32s_32_1_1_U98 : component Conv_sysarr_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_dout,
        din1 => empty_dout,
        dout => mul_ln147_fu_581_p2);

    mul_9s_9s_9_1_1_U99 : component Conv_sysarr_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => ko_2_dout,
        din1 => mul86_i_i_fu_609_p1,
        dout => mul86_i_i_fu_609_p2);

    mul_8s_8s_16_1_1_U100 : component Conv_sysarr_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => data_reg_2_0_fu_182,
        din1 => output_reg_3_0_1_fu_1109_p1,
        dout => output_reg_3_0_1_fu_1109_p2);

    mul_8s_8s_16_1_1_U101 : component Conv_sysarr_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => data_reg_1_0_fu_166,
        din1 => output_reg_2_0_1_fu_1167_p1,
        dout => output_reg_2_0_1_fu_1167_p2);

    mul_8s_8s_16_1_1_U102 : component Conv_sysarr_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => data_reg_0_0_fu_150,
        din1 => output_reg_1_0_1_fu_1225_p1,
        dout => output_reg_1_0_1_fu_1225_p2);

    mul_8s_8s_16_1_1_U103 : component Conv_sysarr_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => data_l1buf_0_q0,
        din1 => output_reg_0_0_1_fu_1307_p1,
        dout => output_reg_0_0_1_fu_1307_p2);

    mac_muladd_8s_8s_18s_19_2_1_U104 : component Conv_sysarr_mac_muladd_8s_8s_18s_19_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_reg_2_3_fu_194,
        din1 => grp_fu_1413_p1,
        din2 => output_reg_3_2_fu_270,
        ce => ap_const_logic_1,
        dout => grp_fu_1413_p3);

    mac_muladd_8s_8s_17s_18_2_1_U105 : component Conv_sysarr_mac_muladd_8s_8s_17s_18_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_reg_2_2_fu_190,
        din1 => grp_fu_1422_p1,
        din2 => output_reg_3_1_fu_266,
        ce => ap_const_logic_1,
        dout => grp_fu_1422_p3);

    mac_muladd_8s_8s_16s_17_2_1_U106 : component Conv_sysarr_mac_muladd_8s_8s_16s_17_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_reg_2_1_fu_186,
        din1 => grp_fu_1430_p1,
        din2 => output_reg_3_0_fu_262,
        ce => ap_const_logic_1,
        dout => grp_fu_1430_p3);

    mac_muladd_8s_8s_18s_19_2_1_U107 : component Conv_sysarr_mac_muladd_8s_8s_18s_19_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_reg_1_3_fu_178,
        din1 => grp_fu_1438_p1,
        din2 => output_reg_2_2_fu_254,
        ce => ap_const_logic_1,
        dout => grp_fu_1438_p3);

    mac_muladd_8s_8s_17s_18_2_1_U108 : component Conv_sysarr_mac_muladd_8s_8s_17s_18_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_reg_1_2_fu_174,
        din1 => grp_fu_1447_p1,
        din2 => output_reg_2_1_fu_250,
        ce => ap_const_logic_1,
        dout => grp_fu_1447_p3);

    mac_muladd_8s_8s_16s_17_2_1_U109 : component Conv_sysarr_mac_muladd_8s_8s_16s_17_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_reg_1_1_fu_170,
        din1 => grp_fu_1455_p1,
        din2 => output_reg_2_0_fu_246,
        ce => ap_const_logic_1,
        dout => grp_fu_1455_p3);

    mac_muladd_8s_8s_18s_19_2_1_U110 : component Conv_sysarr_mac_muladd_8s_8s_18s_19_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_data_reg_1_3_1,
        din1 => grp_fu_1463_p1,
        din2 => output_reg_1_2_fu_238,
        ce => ap_const_logic_1,
        dout => grp_fu_1463_p3);

    mac_muladd_8s_8s_17s_18_2_1_U111 : component Conv_sysarr_mac_muladd_8s_8s_17s_18_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_data_reg_1_2_1,
        din1 => grp_fu_1472_p1,
        din2 => output_reg_1_1_fu_234,
        ce => ap_const_logic_1,
        dout => grp_fu_1472_p3);

    mac_muladd_8s_8s_16s_17_2_1_U112 : component Conv_sysarr_mac_muladd_8s_8s_16s_17_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_data_reg_1_1_1,
        din1 => grp_fu_1480_p1,
        din2 => output_reg_1_0_fu_230,
        ce => ap_const_logic_1,
        dout => grp_fu_1480_p3);

    mac_muladd_8s_8s_18s_19_1_1_U113 : component Conv_sysarr_mac_muladd_8s_8s_18s_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => data_reg_0_3_1_fu_1054_p3,
        din1 => grp_fu_1488_p1,
        din2 => output_reg_0_2_fu_222,
        dout => grp_fu_1488_p3);

    mac_muladd_8s_8s_17s_18_1_1_U114 : component Conv_sysarr_mac_muladd_8s_8s_17s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        din0 => data_reg_0_2_1_fu_1047_p3,
        din1 => grp_fu_1497_p1,
        din2 => output_reg_0_1_fu_218,
        dout => grp_fu_1497_p3);

    mac_muladd_8s_8s_16s_17_1_1_U115 : component Conv_sysarr_mac_muladd_8s_8s_16s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => data_reg_0_1_1_fu_1040_p3,
        din1 => grp_fu_1505_p1,
        din2 => output_reg_0_0_fu_214,
        dout => grp_fu_1505_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_703_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_570 <= add_ln55_fu_708_p2;
            elsif ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_570 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln100_4_reg_1798 <= add_ln100_4_fu_679_p2;
                add_ln100_5_reg_1803 <= add_ln100_5_fu_685_p2;
                add_ln100_6_reg_1808 <= add_ln100_6_fu_691_p2;
                add_ln100_7_reg_1813 <= add_ln100_7_fu_697_p2;
                add_ln147_reg_1705 <= add_ln147_fu_587_p2;
                icmp_ln197_reg_1710 <= icmp_ln197_fu_599_p2;
                mul_ln147_reg_1697 <= mul_ln147_fu_581_p2;
                sext_ln55_reg_1793 <= sext_ln55_fu_675_p1;
                sext_ln86_10_reg_1768 <= sext_ln86_10_fu_655_p1;
                sext_ln86_11_reg_1773 <= sext_ln86_11_fu_659_p1;
                sext_ln86_12_reg_1778 <= sext_ln86_12_fu_663_p1;
                sext_ln86_13_reg_1783 <= sext_ln86_13_fu_667_p1;
                sext_ln86_14_reg_1788 <= sext_ln86_14_fu_671_p1;
                sext_ln86_1_reg_1723 <= sext_ln86_1_fu_619_p1;
                sext_ln86_2_reg_1728 <= sext_ln86_2_fu_623_p1;
                sext_ln86_3_reg_1733 <= sext_ln86_3_fu_627_p1;
                sext_ln86_4_reg_1738 <= sext_ln86_4_fu_631_p1;
                sext_ln86_5_reg_1743 <= sext_ln86_5_fu_635_p1;
                sext_ln86_6_reg_1748 <= sext_ln86_6_fu_639_p1;
                sext_ln86_7_reg_1753 <= sext_ln86_7_fu_643_p1;
                sext_ln86_8_reg_1758 <= sext_ln86_8_fu_647_p1;
                sext_ln86_9_reg_1763 <= sext_ln86_9_fu_651_p1;
                sext_ln86_reg_1718 <= sext_ln86_fu_615_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_703_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln93_1_reg_1925 <= and_ln93_1_fu_986_p2;
                and_ln93_2_reg_1935 <= and_ln93_2_fu_1017_p2;
                and_ln93_3_reg_1945 <= and_ln93_3_fu_1034_p2;
                and_ln93_reg_1915 <= and_ln93_fu_944_p2;
                icmp_ln68_reg_1840 <= icmp_ln68_fu_727_p2;
                tmp_3_reg_1860 <= add_ln68_1_fu_763_p2(32 downto 32);
                tmp_reg_1850 <= add_ln68_fu_744_p2(32 downto 32);
                trunc_ln55_reg_1827 <= trunc_ln55_fu_719_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_reg_0_0_fu_150 <= data_l1buf_0_q0;
                data_reg_0_1_fu_154 <= data_reg_0_1_1_fu_1040_p3;
                data_reg_0_2_fu_158 <= data_reg_0_2_1_fu_1047_p3;
                data_reg_0_3_fu_162 <= data_reg_0_3_1_fu_1054_p3;
                data_reg_1_0_fu_166 <= data_reg_0_0_fu_150;
                data_reg_2_0_fu_182 <= data_reg_1_0_fu_166;
                output_reg_0_0_fu_214 <= output_reg_0_0_1_fu_1307_p2;
                output_reg_0_1_fu_218 <= grp_fu_1505_p3;
                output_reg_0_2_fu_222 <= grp_fu_1497_p3;
                output_reg_1_0_fu_230 <= output_reg_1_0_1_fu_1225_p2;
                output_reg_1_1_fu_234 <= grp_fu_1480_p3;
                output_reg_1_2_fu_238 <= grp_fu_1472_p3;
                output_reg_2_0_fu_246 <= output_reg_2_0_1_fu_1167_p2;
                output_reg_2_1_fu_250 <= grp_fu_1455_p3;
                output_reg_2_2_fu_254 <= grp_fu_1447_p3;
                output_reg_3_0_fu_262 <= output_reg_3_0_1_fu_1109_p2;
                output_reg_3_1_fu_266 <= grp_fu_1430_p3;
                output_reg_3_2_fu_270 <= grp_fu_1422_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_703_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_reg_1_1_fu_170 <= ap_sig_allocacmp_data_reg_1_1_1;
                data_reg_1_2_fu_174 <= ap_sig_allocacmp_data_reg_1_2_1;
                data_reg_1_3_fu_178 <= ap_sig_allocacmp_data_reg_1_3_1;
                data_reg_2_1_fu_186 <= data_reg_1_1_fu_170;
                data_reg_2_2_fu_190 <= data_reg_1_2_fu_174;
                data_reg_2_3_fu_194 <= data_reg_1_3_fu_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln93_3_fu_1034_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_703_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_l1_local_0_addr_reg_1949 <= zext_ln68_1_fu_769_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln93_2_fu_1017_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_703_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_l1_local_1_addr_reg_1939 <= zext_ln93_fu_903_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln93_1_fu_986_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_703_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_l1_local_2_addr_reg_1929 <= zext_ln93_2_fu_956_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln93_fu_944_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_703_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_l1_local_3_addr_reg_1919 <= zext_ln93_1_fu_914_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, empty_empty_n, ko_2_empty_n, s_empty_n, r_empty_n, icmp_ln55_fu_703_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln55_fu_703_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln55_fu_703_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln100_1_fu_1356_p2 <= std_logic_vector(unsigned(add_ln100_5_reg_1803) + unsigned(trunc_ln55_reg_1827));
    add_ln100_2_fu_1380_p2 <= std_logic_vector(unsigned(add_ln100_6_reg_1808) + unsigned(trunc_ln55_reg_1827));
    add_ln100_3_fu_1404_p2 <= std_logic_vector(unsigned(add_ln100_7_reg_1813) + unsigned(trunc_ln55_reg_1827));
    add_ln100_4_fu_679_p2 <= std_logic_vector(signed(ap_const_lv9_1FA) + signed(mul86_i_i_fu_609_p2));
    add_ln100_5_fu_685_p2 <= std_logic_vector(signed(ap_const_lv9_1FB) + signed(mul86_i_i_fu_609_p2));
    add_ln100_6_fu_691_p2 <= std_logic_vector(signed(ap_const_lv9_1FC) + signed(mul86_i_i_fu_609_p2));
    add_ln100_7_fu_697_p2 <= std_logic_vector(signed(ap_const_lv9_1FD) + signed(mul86_i_i_fu_609_p2));
    add_ln100_fu_1332_p2 <= std_logic_vector(unsigned(add_ln100_4_reg_1798) + unsigned(trunc_ln55_reg_1827));
    add_ln147_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv32_6) + unsigned(mul_ln147_fu_581_p2));
    add_ln55_fu_708_p2 <= std_logic_vector(unsigned(i_reg_570) + unsigned(ap_const_lv32_1));
    add_ln68_1_fu_763_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFD) + signed(zext_ln55_1_fu_723_p1));
    add_ln68_fu_744_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFE) + signed(zext_ln55_1_fu_723_p1));
    add_ln70_fu_733_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(trunc_ln55_fu_719_p1));
    add_ln93_1_fu_933_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFA) + signed(i_reg_570));
    add_ln93_2_fu_950_p2 <= std_logic_vector(unsigned(zext_ln55_1_fu_723_p1) + unsigned(ap_const_lv33_1FFFFFFFB));
    add_ln93_3_fu_975_p2 <= std_logic_vector(unsigned(i_reg_570) + unsigned(ap_const_lv32_FFFFFFFB));
    add_ln93_4_fu_1006_p2 <= std_logic_vector(unsigned(i_reg_570) + unsigned(ap_const_lv32_FFFFFFFC));
    add_ln93_5_fu_1023_p2 <= std_logic_vector(unsigned(i_reg_570) + unsigned(ap_const_lv32_FFFFFFFD));
    add_ln93_fu_908_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFA) + signed(zext_ln55_1_fu_723_p1));
    add_ln98_1_fu_1341_p2 <= std_logic_vector(unsigned(output_l1_local_2_q1) + unsigned(sext_ln85_1_fu_1126_p1));
    add_ln98_2_fu_1365_p2 <= std_logic_vector(unsigned(output_l1_local_1_q1) + unsigned(sext_ln85_2_fu_1184_p1));
    add_ln98_3_fu_1389_p2 <= std_logic_vector(unsigned(output_l1_local_0_q1) + unsigned(sext_ln85_3_fu_1251_p1));
    add_ln98_fu_1317_p2 <= std_logic_vector(unsigned(output_l1_local_3_q1) + unsigned(sext_ln85_fu_1068_p1));
    and_ln93_1_fu_986_p2 <= (xor_ln93_1_fu_969_p2 and icmp_ln93_1_fu_981_p2);
    and_ln93_2_fu_1017_p2 <= (xor_ln93_2_fu_1000_p2 and icmp_ln93_2_fu_1012_p2);
    and_ln93_3_fu_1034_p2 <= (xor_ln68_fu_783_p2 and icmp_ln93_3_fu_1029_p2);
    and_ln93_fu_944_p2 <= (xor_ln93_fu_927_p2 and icmp_ln93_fu_939_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, empty_empty_n, ko_2_empty_n, s_empty_n, r_empty_n)
    begin
                ap_block_state1 <= ((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln55_fu_703_p2)
    begin
        if ((icmp_ln55_fu_703_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_data_reg_1_1_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, data_reg_0_1_fu_154, data_reg_0_1_1_fu_1040_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_data_reg_1_1_1 <= data_reg_0_1_1_fu_1040_p3;
        else 
            ap_sig_allocacmp_data_reg_1_1_1 <= data_reg_0_1_fu_154;
        end if; 
    end process;


    ap_sig_allocacmp_data_reg_1_2_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, data_reg_0_2_fu_158, data_reg_0_2_1_fu_1047_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_data_reg_1_2_1 <= data_reg_0_2_1_fu_1047_p3;
        else 
            ap_sig_allocacmp_data_reg_1_2_1 <= data_reg_0_2_fu_158;
        end if; 
    end process;


    ap_sig_allocacmp_data_reg_1_3_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, data_reg_0_3_fu_162, data_reg_0_3_1_fu_1054_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_data_reg_1_3_1 <= data_reg_0_3_1_fu_1054_p3;
        else 
            ap_sig_allocacmp_data_reg_1_3_1 <= data_reg_0_3_fu_162;
        end if; 
    end process;

    data_l1buf_0_address0 <= zext_ln55_fu_714_p1(9 - 1 downto 0);

    data_l1buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_l1buf_0_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_1_address0 <= zext_ln70_fu_739_p1(9 - 1 downto 0);

    data_l1buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_l1buf_1_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_2_address0 <= zext_ln68_fu_750_p1(9 - 1 downto 0);

    data_l1buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_l1buf_2_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_l1buf_3_address0 <= zext_ln68_1_fu_769_p1(9 - 1 downto 0);

    data_l1buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_l1buf_3_ce0 <= ap_const_logic_1;
        else 
            data_l1buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_reg_0_1_1_fu_1040_p3 <= 
        ap_const_lv8_0 when (icmp_ln68_reg_1840(0) = '1') else 
        data_l1buf_1_q0;
    data_reg_0_2_1_fu_1047_p3 <= 
        ap_const_lv8_0 when (tmp_reg_1850(0) = '1') else 
        data_l1buf_2_q0;
    data_reg_0_3_1_fu_1054_p3 <= 
        ap_const_lv8_0 when (tmp_3_reg_1860(0) = '1') else 
        data_l1buf_3_q0;
    empty_30_fu_897_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFC) + signed(zext_ln55_1_fu_723_p1));

    empty_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_blk_n <= empty_empty_n;
        else 
            empty_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    empty_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, ko_2_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            empty_read <= ap_const_logic_1;
        else 
            empty_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1413_p1 <= sext_ln86_reg_1718(8 - 1 downto 0);
    grp_fu_1422_p1 <= sext_ln86_1_reg_1723(8 - 1 downto 0);
    grp_fu_1430_p1 <= sext_ln86_2_reg_1728(8 - 1 downto 0);
    grp_fu_1438_p1 <= sext_ln86_4_reg_1738(8 - 1 downto 0);
    grp_fu_1447_p1 <= sext_ln86_5_reg_1743(8 - 1 downto 0);
    grp_fu_1455_p1 <= sext_ln86_6_reg_1748(8 - 1 downto 0);
    grp_fu_1463_p1 <= sext_ln86_8_reg_1758(8 - 1 downto 0);
    grp_fu_1472_p1 <= sext_ln86_9_reg_1763(8 - 1 downto 0);
    grp_fu_1480_p1 <= sext_ln86_10_reg_1768(8 - 1 downto 0);
    grp_fu_1488_p1 <= sext_ln86_12_reg_1778(8 - 1 downto 0);
    grp_fu_1497_p1 <= sext_ln86_13_reg_1783(8 - 1 downto 0);
    grp_fu_1505_p1 <= sext_ln86_14_reg_1788(8 - 1 downto 0);
    icmp_ln197_fu_599_p2 <= "1" when (or_ln197_fu_593_p2 = ap_const_lv32_0) else "0";
    icmp_ln55_fu_703_p2 <= "1" when (i_reg_570 = add_ln147_reg_1705) else "0";
    icmp_ln68_fu_727_p2 <= "1" when (i_reg_570 = ap_const_lv32_0) else "0";
    icmp_ln93_1_fu_981_p2 <= "1" when (unsigned(add_ln93_3_fu_975_p2) < unsigned(mul_ln147_reg_1697)) else "0";
    icmp_ln93_2_fu_1012_p2 <= "1" when (unsigned(add_ln93_4_fu_1006_p2) < unsigned(mul_ln147_reg_1697)) else "0";
    icmp_ln93_3_fu_1029_p2 <= "1" when (unsigned(add_ln93_5_fu_1023_p2) < unsigned(mul_ln147_reg_1697)) else "0";
    icmp_ln93_fu_939_p2 <= "1" when (unsigned(add_ln93_1_fu_933_p2) < unsigned(mul_ln147_reg_1697)) else "0";

    ko_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ko_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_blk_n <= ko_2_empty_n;
        else 
            ko_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ko_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, ko_2_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ko_2_read <= ap_const_logic_1;
        else 
            ko_2_read <= ap_const_logic_0;
        end if; 
    end process;

    mul86_i_i_fu_609_p1 <= mul_ln147_fu_581_p2(9 - 1 downto 0);
    or_ln197_fu_593_p2 <= (s_dout or r_dout);
    output_l1_local_0_address1 <= zext_ln68_1_fu_769_p1(10 - 1 downto 0);

    output_l1_local_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_0_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_3_reg_1945, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_3_reg_1945) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_0_we0 <= ap_const_logic_1;
        else 
            output_l1_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_local_1_address1 <= zext_ln93_fu_903_p1(10 - 1 downto 0);

    output_l1_local_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_1_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_2_reg_1935, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_2_reg_1935) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_1_we0 <= ap_const_logic_1;
        else 
            output_l1_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_local_2_address1 <= zext_ln93_2_fu_956_p1(10 - 1 downto 0);

    output_l1_local_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_2_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_1_reg_1925) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_2_we0 <= ap_const_logic_1;
        else 
            output_l1_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_local_3_address1 <= zext_ln93_1_fu_914_p1(10 - 1 downto 0);

    output_l1_local_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_local_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_3_ce1 <= ap_const_logic_1;
        else 
            output_l1_local_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_l1_local_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_reg_1915, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_reg_1915) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_local_3_we0 <= ap_const_logic_1;
        else 
            output_l1_local_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_0_address0 <= zext_ln100_3_fu_1408_p1(9 - 1 downto 0);

    output_l1_pass_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_0_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_0_d0 <= select_ln197_3_fu_1395_p3;

    output_l1_pass_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_3_reg_1945, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_3_reg_1945) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_0_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_1_address0 <= zext_ln100_2_fu_1384_p1(9 - 1 downto 0);

    output_l1_pass_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_1_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_1_d0 <= select_ln197_2_fu_1371_p3;

    output_l1_pass_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_2_reg_1935, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_2_reg_1935) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_1_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_2_address0 <= zext_ln100_1_fu_1360_p1(9 - 1 downto 0);

    output_l1_pass_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_2_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_2_d0 <= select_ln197_1_fu_1347_p3;

    output_l1_pass_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_1_reg_1925, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_1_reg_1925) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_2_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_3_address0 <= zext_ln100_fu_1336_p1(9 - 1 downto 0);

    output_l1_pass_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_3_ce0 <= ap_const_logic_1;
        else 
            output_l1_pass_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_l1_pass_3_d0 <= select_ln197_fu_1323_p3;

    output_l1_pass_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln93_reg_1915, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln93_reg_1915) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_l1_pass_3_we0 <= ap_const_logic_1;
        else 
            output_l1_pass_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_reg_0_0_1_fu_1307_p1 <= sext_ln55_reg_1793(8 - 1 downto 0);
    output_reg_1_0_1_fu_1225_p1 <= sext_ln86_11_reg_1773(8 - 1 downto 0);
    output_reg_2_0_1_fu_1167_p1 <= sext_ln86_7_reg_1753(8 - 1 downto 0);
    output_reg_3_0_1_fu_1109_p1 <= sext_ln86_3_reg_1733(8 - 1 downto 0);

    r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, r_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_blk_n <= r_empty_n;
        else 
            r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, ko_2_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            r_read <= ap_const_logic_1;
        else 
            r_read <= ap_const_logic_0;
        end if; 
    end process;


    s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_blk_n <= s_empty_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, empty_empty_n, ko_2_empty_n, s_empty_n, r_empty_n)
    begin
        if ((not(((ko_2_empty_n = ap_const_logic_0) or (empty_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (r_empty_n = ap_const_logic_0) or (s_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            s_read <= ap_const_logic_1;
        else 
            s_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln197_1_fu_1347_p3 <= 
        sext_ln85_1_fu_1126_p1 when (icmp_ln197_reg_1710(0) = '1') else 
        add_ln98_1_fu_1341_p2;
    select_ln197_2_fu_1371_p3 <= 
        sext_ln85_2_fu_1184_p1 when (icmp_ln197_reg_1710(0) = '1') else 
        add_ln98_2_fu_1365_p2;
    select_ln197_3_fu_1395_p3 <= 
        sext_ln85_3_fu_1251_p1 when (icmp_ln197_reg_1710(0) = '1') else 
        add_ln98_3_fu_1389_p2;
    select_ln197_fu_1323_p3 <= 
        sext_ln85_fu_1068_p1 when (icmp_ln197_reg_1710(0) = '1') else 
        add_ln98_fu_1317_p2;
        sext_ln55_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_0_read),16));

        sext_ln85_1_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1438_p3),32));

        sext_ln85_2_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1463_p3),32));

        sext_ln85_3_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1488_p3),32));

        sext_ln85_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1413_p3),32));

        sext_ln86_10_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_1_read),16));

        sext_ln86_11_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_0_read),16));

        sext_ln86_12_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_3_read),16));

        sext_ln86_13_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_2_read),16));

        sext_ln86_14_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_0_1_read),16));

        sext_ln86_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_2_read),16));

        sext_ln86_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_1_read),16));

        sext_ln86_3_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_0_read),16));

        sext_ln86_4_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_3_read),16));

        sext_ln86_5_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_2_read),16));

        sext_ln86_6_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_1_read),16));

        sext_ln86_7_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_2_0_read),16));

        sext_ln86_8_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_3_read),16));

        sext_ln86_9_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_1_2_read),16));

        sext_ln86_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weight_regfile_3_3_read),16));

    tmp_3_fu_775_p3 <= add_ln68_1_fu_763_p2(32 downto 32);
    tmp_4_fu_919_p3 <= add_ln93_fu_908_p2(32 downto 32);
    tmp_5_fu_961_p3 <= add_ln93_2_fu_950_p2(32 downto 32);
    tmp_6_fu_992_p3 <= empty_30_fu_897_p2(32 downto 32);
    trunc_ln55_fu_719_p1 <= i_reg_570(9 - 1 downto 0);
    xor_ln68_fu_783_p2 <= (tmp_3_fu_775_p3 xor ap_const_lv1_1);
    xor_ln93_1_fu_969_p2 <= (tmp_5_fu_961_p3 xor ap_const_lv1_1);
    xor_ln93_2_fu_1000_p2 <= (tmp_6_fu_992_p3 xor ap_const_lv1_1);
    xor_ln93_fu_927_p2 <= (tmp_4_fu_919_p3 xor ap_const_lv1_1);
    zext_ln100_1_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_1_fu_1356_p2),64));
    zext_ln100_2_fu_1384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_2_fu_1380_p2),64));
    zext_ln100_3_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_3_fu_1404_p2),64));
    zext_ln100_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln100_fu_1332_p2),64));
    zext_ln55_1_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_570),33));
    zext_ln55_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_570),64));
    zext_ln68_1_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_1_fu_763_p2),64));
    zext_ln68_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_744_p2),64));
    zext_ln70_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_733_p2),64));
    zext_ln93_1_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_fu_908_p2),64));
    zext_ln93_2_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_2_fu_950_p2),64));
    zext_ln93_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_fu_897_p2),64));
end behav;
