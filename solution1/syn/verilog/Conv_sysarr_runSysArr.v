// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runSysArr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        data_l1_017_i_address0,
        data_l1_017_i_ce0,
        data_l1_017_i_q0,
        data_l1_118_i_address0,
        data_l1_118_i_ce0,
        data_l1_118_i_q0,
        data_l1_219_i_address0,
        data_l1_219_i_ce0,
        data_l1_219_i_q0,
        data_l1_320_i_address0,
        data_l1_320_i_ce0,
        data_l1_320_i_q0,
        output_l1_021_i_address0,
        output_l1_021_i_ce0,
        output_l1_021_i_we0,
        output_l1_021_i_d0,
        output_l1_122_i_address0,
        output_l1_122_i_ce0,
        output_l1_122_i_we0,
        output_l1_122_i_d0,
        output_l1_223_i_address0,
        output_l1_223_i_ce0,
        output_l1_223_i_we0,
        output_l1_223_i_d0,
        output_l1_324_i_address0,
        output_l1_324_i_ce0,
        output_l1_324_i_we0,
        output_l1_324_i_d0,
        param_dout,
        param_empty_n,
        param_read,
        param_out_din,
        param_out_full_n,
        param_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
output  [5:0] data_l1_017_i_address0;
output   data_l1_017_i_ce0;
input  [7:0] data_l1_017_i_q0;
output  [5:0] data_l1_118_i_address0;
output   data_l1_118_i_ce0;
input  [7:0] data_l1_118_i_q0;
output  [5:0] data_l1_219_i_address0;
output   data_l1_219_i_ce0;
input  [7:0] data_l1_219_i_q0;
output  [5:0] data_l1_320_i_address0;
output   data_l1_320_i_ce0;
input  [7:0] data_l1_320_i_q0;
output  [5:0] output_l1_021_i_address0;
output   output_l1_021_i_ce0;
output   output_l1_021_i_we0;
output  [31:0] output_l1_021_i_d0;
output  [5:0] output_l1_122_i_address0;
output   output_l1_122_i_ce0;
output   output_l1_122_i_we0;
output  [31:0] output_l1_122_i_d0;
output  [5:0] output_l1_223_i_address0;
output   output_l1_223_i_ce0;
output   output_l1_223_i_we0;
output  [31:0] output_l1_223_i_d0;
output  [5:0] output_l1_324_i_address0;
output   output_l1_324_i_ce0;
output   output_l1_324_i_we0;
output  [31:0] output_l1_324_i_d0;
input  [1183:0] param_dout;
input   param_empty_n;
output   param_read;
output  [1119:0] param_out_din;
input   param_out_full_n;
output   param_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_l1_017_i_ce0;
reg data_l1_118_i_ce0;
reg data_l1_219_i_ce0;
reg data_l1_320_i_ce0;
reg output_l1_021_i_ce0;
reg output_l1_021_i_we0;
reg output_l1_122_i_ce0;
reg output_l1_122_i_we0;
reg output_l1_223_i_ce0;
reg output_l1_223_i_we0;
reg output_l1_324_i_ce0;
reg output_l1_324_i_we0;
reg param_read;
reg param_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    param_blk_n;
reg    param_out_blk_n;
reg   [30:0] i_reg_484;
wire   [31:0] mul_ln276_fu_520_p2;
reg   [31:0] mul_ln276_reg_1427;
reg    ap_block_state1;
wire   [31:0] add_ln276_fu_526_p2;
reg   [31:0] add_ln276_reg_1435;
wire  signed [15:0] sext_ln156_fu_552_p1;
reg  signed [15:0] sext_ln156_reg_1440;
wire  signed [15:0] sext_ln156_1_fu_556_p1;
reg  signed [15:0] sext_ln156_1_reg_1445;
wire  signed [15:0] sext_ln156_2_fu_560_p1;
reg  signed [15:0] sext_ln156_2_reg_1450;
wire  signed [15:0] sext_ln156_3_fu_564_p1;
reg  signed [15:0] sext_ln156_3_reg_1455;
wire  signed [15:0] sext_ln156_4_fu_568_p1;
reg  signed [15:0] sext_ln156_4_reg_1460;
wire  signed [15:0] sext_ln156_5_fu_572_p1;
reg  signed [15:0] sext_ln156_5_reg_1465;
wire  signed [15:0] sext_ln156_6_fu_576_p1;
reg  signed [15:0] sext_ln156_6_reg_1470;
wire  signed [15:0] sext_ln156_7_fu_580_p1;
reg  signed [15:0] sext_ln156_7_reg_1475;
wire  signed [15:0] sext_ln156_8_fu_584_p1;
reg  signed [15:0] sext_ln156_8_reg_1480;
wire  signed [15:0] sext_ln156_9_fu_588_p1;
reg  signed [15:0] sext_ln156_9_reg_1485;
wire  signed [15:0] sext_ln156_10_fu_592_p1;
reg  signed [15:0] sext_ln156_10_reg_1490;
wire  signed [15:0] sext_ln156_11_fu_596_p1;
reg  signed [15:0] sext_ln156_11_reg_1495;
wire  signed [15:0] sext_ln156_12_fu_600_p1;
reg  signed [15:0] sext_ln156_12_reg_1500;
wire  signed [15:0] sext_ln156_13_fu_604_p1;
reg  signed [15:0] sext_ln156_13_reg_1505;
wire  signed [15:0] sext_ln156_14_fu_608_p1;
reg  signed [15:0] sext_ln156_14_reg_1510;
wire  signed [15:0] sext_ln185_fu_612_p1;
reg  signed [15:0] sext_ln185_reg_1515;
wire   [63:0] bound_fu_624_p2;
reg   [63:0] bound_reg_1520;
wire   [0:0] icmp_ln185_fu_630_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] add_ln185_fu_635_p2;
reg   [63:0] add_ln185_reg_1529;
wire   [31:0] i_cast402_i_i_fu_641_p1;
reg   [31:0] i_cast402_i_i_reg_1534;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln190_fu_645_p2;
reg   [0:0] icmp_ln190_reg_1541;
wire   [30:0] i_1_fu_650_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln138_fu_671_p2;
reg   [0:0] icmp_ln138_reg_1555;
reg   [0:0] tmp_reg_1565;
wire   [0:0] tmp_1_fu_707_p3;
reg   [0:0] tmp_1_reg_1575;
wire   [63:0] zext_ln140_3_fu_721_p1;
reg   [63:0] zext_ln140_3_reg_1580;
wire   [0:0] and_ln163_3_fu_839_p2;
reg   [0:0] and_ln163_3_reg_1635;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [63:0] indvar_flatten_reg_473;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln140_fu_660_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln140_1_fu_677_p1;
wire   [63:0] zext_ln140_2_fu_696_p1;
wire   [63:0] zext_ln168_fu_1045_p1;
wire   [0:0] and_ln163_fu_1039_p2;
wire   [63:0] zext_ln168_1_fu_1080_p1;
wire   [0:0] and_ln163_1_fu_1074_p2;
wire   [63:0] zext_ln168_2_fu_1110_p1;
wire   [0:0] and_ln163_2_fu_1104_p2;
reg   [31:0] psum_fu_148;
wire  signed [31:0] sext_ln155_3_fu_1006_p1;
reg   [31:0] psum_1_fu_152;
wire  signed [31:0] grp_fu_1255_p3;
reg   [31:0] psum_2_fu_156;
wire  signed [31:0] grp_fu_1247_p3;
reg   [31:0] psum_3_fu_160;
wire  signed [31:0] sext_ln155_2_fu_961_p1;
reg   [31:0] psum_4_fu_164;
wire  signed [31:0] grp_fu_1231_p3;
reg   [31:0] psum_5_fu_168;
wire  signed [31:0] grp_fu_1223_p3;
reg   [31:0] psum_6_fu_172;
wire  signed [31:0] sext_ln155_1_fu_940_p1;
reg   [31:0] psum_7_fu_176;
wire  signed [31:0] grp_fu_1207_p3;
reg   [31:0] psum_8_fu_180;
wire  signed [31:0] grp_fu_1199_p3;
reg   [31:0] psum_9_fu_184;
wire  signed [31:0] sext_ln155_fu_919_p1;
reg   [31:0] psum_10_fu_188;
wire  signed [31:0] grp_fu_1183_p3;
reg   [31:0] psum_11_fu_192;
wire  signed [31:0] grp_fu_1175_p3;
reg  signed [7:0] data_reg_0_0_fu_196;
reg   [7:0] data_reg_0_1_fu_200;
wire  signed [7:0] data_reg_0_1_1_fu_881_p3;
reg  signed [7:0] ap_sig_allocacmp_data_reg_1_1_1;
reg   [7:0] data_reg_0_2_fu_204;
wire  signed [7:0] data_reg_0_2_1_fu_888_p3;
reg  signed [7:0] ap_sig_allocacmp_data_reg_1_2_1;
reg   [7:0] data_reg_0_3_fu_208;
wire  signed [7:0] data_reg_0_3_1_fu_895_p3;
reg  signed [7:0] ap_sig_allocacmp_data_reg_1_3_1;
reg  signed [7:0] data_reg_1_0_fu_212;
reg  signed [7:0] data_reg_1_1_fu_216;
reg  signed [7:0] data_reg_1_2_fu_220;
reg  signed [7:0] data_reg_1_3_fu_224;
reg  signed [7:0] data_reg_2_0_fu_228;
reg  signed [7:0] data_reg_2_1_fu_232;
reg  signed [7:0] data_reg_2_2_fu_236;
reg  signed [7:0] data_reg_2_3_fu_240;
wire  signed [31:0] grp_fu_1167_p3;
wire  signed [31:0] grp_fu_1191_p3;
wire  signed [31:0] grp_fu_1215_p3;
wire  signed [31:0] grp_fu_1239_p3;
wire  signed [31:0] mul_ln276_fu_520_p0;
wire  signed [31:0] mul_ln276_fu_520_p1;
wire   [31:0] param_TILESIZE_R_i_i_fu_532_p4;
wire   [31:0] param_TILESIZE_S_i_i_fu_542_p4;
wire   [31:0] bound_fu_624_p0;
wire   [31:0] bound_fu_624_p1;
wire   [5:0] empty_68_fu_656_p1;
wire   [5:0] add_ln138_fu_665_p2;
wire   [31:0] add_ln138_1_fu_682_p2;
wire   [31:0] add_ln138_2_fu_701_p2;
wire   [0:0] icmp_ln163_3_fu_834_p2;
wire   [0:0] xor_ln138_fu_715_p2;
wire  signed [7:0] output_reg_3_0_fu_914_p1;
wire   [15:0] output_reg_3_0_fu_914_p2;
wire  signed [7:0] output_reg_2_0_fu_935_p1;
wire   [15:0] output_reg_2_0_fu_935_p2;
wire  signed [7:0] output_reg_1_0_fu_956_p1;
wire   [15:0] output_reg_1_0_fu_956_p2;
wire  signed [7:0] output_reg_0_0_fu_1001_p1;
wire   [15:0] output_reg_0_0_fu_1001_p2;
wire   [31:0] add_ln163_fu_1015_p2;
wire   [0:0] tmp_2_fu_1020_p3;
wire   [0:0] icmp_ln163_fu_1034_p2;
wire   [0:0] xor_ln163_fu_1028_p2;
wire   [31:0] add_ln163_1_fu_1050_p2;
wire   [0:0] tmp_3_fu_1055_p3;
wire   [0:0] icmp_ln163_1_fu_1069_p2;
wire   [0:0] xor_ln163_1_fu_1063_p2;
wire   [31:0] sub49_i_i_i_fu_1010_p2;
wire   [0:0] tmp_4_fu_1085_p3;
wire   [0:0] icmp_ln163_2_fu_1099_p2;
wire   [0:0] xor_ln163_2_fu_1093_p2;
wire  signed [7:0] grp_fu_1167_p1;
wire  signed [7:0] grp_fu_1175_p1;
wire  signed [7:0] grp_fu_1183_p1;
wire  signed [7:0] grp_fu_1191_p1;
wire  signed [7:0] grp_fu_1199_p1;
wire  signed [7:0] grp_fu_1207_p1;
wire  signed [7:0] grp_fu_1215_p1;
wire  signed [7:0] grp_fu_1223_p1;
wire  signed [7:0] grp_fu_1231_p1;
wire  signed [7:0] grp_fu_1239_p1;
wire  signed [7:0] grp_fu_1247_p1;
wire  signed [7:0] grp_fu_1255_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_624_p00;
wire   [63:0] bound_fu_624_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Conv_sysarr_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U190(
    .din0(mul_ln276_fu_520_p0),
    .din1(mul_ln276_fu_520_p1),
    .dout(mul_ln276_fu_520_p2)
);

Conv_sysarr_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U191(
    .din0(bound_fu_624_p0),
    .din1(bound_fu_624_p1),
    .dout(bound_fu_624_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U192(
    .din0(data_reg_2_0_fu_228),
    .din1(output_reg_3_0_fu_914_p1),
    .dout(output_reg_3_0_fu_914_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U193(
    .din0(data_reg_1_0_fu_212),
    .din1(output_reg_2_0_fu_935_p1),
    .dout(output_reg_2_0_fu_935_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U194(
    .din0(data_reg_0_0_fu_196),
    .din1(output_reg_1_0_fu_956_p1),
    .dout(output_reg_1_0_fu_956_p2)
);

Conv_sysarr_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U195(
    .din0(data_l1_017_i_q0),
    .din1(output_reg_0_0_fu_1001_p1),
    .dout(output_reg_0_0_fu_1001_p2)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U196(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_2_3_fu_240),
    .din1(grp_fu_1167_p1),
    .din2(psum_11_fu_192),
    .ce(1'b1),
    .dout(grp_fu_1167_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U197(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_2_2_fu_236),
    .din1(grp_fu_1175_p1),
    .din2(psum_10_fu_188),
    .ce(1'b1),
    .dout(grp_fu_1175_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U198(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_2_1_fu_232),
    .din1(grp_fu_1183_p1),
    .din2(psum_9_fu_184),
    .ce(1'b1),
    .dout(grp_fu_1183_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U199(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_1_3_fu_224),
    .din1(grp_fu_1191_p1),
    .din2(psum_8_fu_180),
    .ce(1'b1),
    .dout(grp_fu_1191_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U200(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_1_2_fu_220),
    .din1(grp_fu_1199_p1),
    .din2(psum_7_fu_176),
    .ce(1'b1),
    .dout(grp_fu_1199_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U201(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_reg_1_1_fu_216),
    .din1(grp_fu_1207_p1),
    .din2(psum_6_fu_172),
    .ce(1'b1),
    .dout(grp_fu_1207_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U202(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_data_reg_1_3_1),
    .din1(grp_fu_1215_p1),
    .din2(psum_5_fu_168),
    .ce(1'b1),
    .dout(grp_fu_1215_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U203(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_data_reg_1_2_1),
    .din1(grp_fu_1223_p1),
    .din2(psum_4_fu_164),
    .ce(1'b1),
    .dout(grp_fu_1223_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_2_1_U204(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_data_reg_1_1_1),
    .din1(grp_fu_1231_p1),
    .din2(psum_3_fu_160),
    .ce(1'b1),
    .dout(grp_fu_1231_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_1_1_U205(
    .din0(data_reg_0_3_1_fu_895_p3),
    .din1(grp_fu_1239_p1),
    .din2(psum_2_fu_156),
    .dout(grp_fu_1239_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_1_1_U206(
    .din0(data_reg_0_2_1_fu_888_p3),
    .din1(grp_fu_1247_p1),
    .din2(psum_1_fu_152),
    .dout(grp_fu_1247_p3)
);

Conv_sysarr_mac_muladd_8s_8s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8s_8s_32ns_32_1_1_U207(
    .din0(data_reg_0_1_1_fu_881_p3),
    .din1(grp_fu_1255_p1),
    .din2(psum_fu_148),
    .dout(grp_fu_1255_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_630_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_630_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_630_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln190_fu_645_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_484 <= i_1_fu_650_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_630_p2 == 1'd0))) begin
        i_reg_484 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten_reg_473 <= add_ln185_reg_1529;
    end else if ((~((ap_start == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (param_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_473 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln185_reg_1529 <= add_ln185_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (param_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln276_reg_1435 <= add_ln276_fu_526_p2;
        bound_reg_1520 <= bound_fu_624_p2;
        mul_ln276_reg_1427 <= mul_ln276_fu_520_p2;
        sext_ln156_10_reg_1490 <= sext_ln156_10_fu_592_p1;
        sext_ln156_11_reg_1495 <= sext_ln156_11_fu_596_p1;
        sext_ln156_12_reg_1500 <= sext_ln156_12_fu_600_p1;
        sext_ln156_13_reg_1505 <= sext_ln156_13_fu_604_p1;
        sext_ln156_14_reg_1510 <= sext_ln156_14_fu_608_p1;
        sext_ln156_1_reg_1445 <= sext_ln156_1_fu_556_p1;
        sext_ln156_2_reg_1450 <= sext_ln156_2_fu_560_p1;
        sext_ln156_3_reg_1455 <= sext_ln156_3_fu_564_p1;
        sext_ln156_4_reg_1460 <= sext_ln156_4_fu_568_p1;
        sext_ln156_5_reg_1465 <= sext_ln156_5_fu_572_p1;
        sext_ln156_6_reg_1470 <= sext_ln156_6_fu_576_p1;
        sext_ln156_7_reg_1475 <= sext_ln156_7_fu_580_p1;
        sext_ln156_8_reg_1480 <= sext_ln156_8_fu_584_p1;
        sext_ln156_9_reg_1485 <= sext_ln156_9_fu_588_p1;
        sext_ln156_reg_1440 <= sext_ln156_fu_552_p1;
        sext_ln185_reg_1515 <= sext_ln185_fu_612_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln190_fu_645_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln163_3_reg_1635 <= and_ln163_3_fu_839_p2;
        icmp_ln138_reg_1555 <= icmp_ln138_fu_671_p2;
        tmp_1_reg_1575 <= add_ln138_2_fu_701_p2[32'd31];
        tmp_reg_1565 <= add_ln138_1_fu_682_p2[32'd31];
        zext_ln140_3_reg_1580[31 : 0] <= zext_ln140_3_fu_721_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_reg_0_0_fu_196 <= data_l1_017_i_q0;
        data_reg_0_1_fu_200 <= data_reg_0_1_1_fu_881_p3;
        data_reg_0_2_fu_204 <= data_reg_0_2_1_fu_888_p3;
        data_reg_0_3_fu_208 <= data_reg_0_3_1_fu_895_p3;
        data_reg_1_0_fu_212 <= data_reg_0_0_fu_196;
        data_reg_2_0_fu_228 <= data_reg_1_0_fu_212;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln190_fu_645_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_reg_1_1_fu_216 <= ap_sig_allocacmp_data_reg_1_1_1;
        data_reg_1_2_fu_220 <= ap_sig_allocacmp_data_reg_1_2_1;
        data_reg_1_3_fu_224 <= ap_sig_allocacmp_data_reg_1_3_1;
        data_reg_2_1_fu_232 <= data_reg_1_1_fu_216;
        data_reg_2_2_fu_236 <= data_reg_1_2_fu_220;
        data_reg_2_3_fu_240 <= data_reg_1_3_fu_224;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_cast402_i_i_reg_1534[30 : 0] <= i_cast402_i_i_fu_641_p1[30 : 0];
        icmp_ln190_reg_1541 <= icmp_ln190_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln190_reg_1541 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        psum_10_fu_188 <= grp_fu_1183_p3;
        psum_11_fu_192 <= grp_fu_1175_p3;
        psum_1_fu_152 <= grp_fu_1255_p3;
        psum_2_fu_156 <= grp_fu_1247_p3;
        psum_3_fu_160 <= sext_ln155_2_fu_961_p1;
        psum_4_fu_164 <= grp_fu_1231_p3;
        psum_5_fu_168 <= grp_fu_1223_p3;
        psum_6_fu_172 <= sext_ln155_1_fu_940_p1;
        psum_7_fu_176 <= grp_fu_1207_p3;
        psum_8_fu_180 <= grp_fu_1199_p3;
        psum_9_fu_184 <= sext_ln155_fu_919_p1;
        psum_fu_148 <= sext_ln155_3_fu_1006_p1;
    end
end

always @ (*) begin
    if ((icmp_ln190_fu_645_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_630_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_630_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_data_reg_1_1_1 = data_reg_0_1_1_fu_881_p3;
    end else begin
        ap_sig_allocacmp_data_reg_1_1_1 = data_reg_0_1_fu_200;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_data_reg_1_2_1 = data_reg_0_2_1_fu_888_p3;
    end else begin
        ap_sig_allocacmp_data_reg_1_2_1 = data_reg_0_2_fu_204;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_data_reg_1_3_1 = data_reg_0_3_1_fu_895_p3;
    end else begin
        ap_sig_allocacmp_data_reg_1_3_1 = data_reg_0_3_fu_208;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_017_i_ce0 = 1'b1;
    end else begin
        data_l1_017_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_118_i_ce0 = 1'b1;
    end else begin
        data_l1_118_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_219_i_ce0 = 1'b1;
    end else begin
        data_l1_219_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_l1_320_i_ce0 = 1'b1;
    end else begin
        data_l1_320_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_021_i_ce0 = 1'b1;
    end else begin
        output_l1_021_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln163_3_reg_1635) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_021_i_we0 = 1'b1;
    end else begin
        output_l1_021_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_122_i_ce0 = 1'b1;
    end else begin
        output_l1_122_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln163_2_fu_1104_p2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_122_i_we0 = 1'b1;
    end else begin
        output_l1_122_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_223_i_ce0 = 1'b1;
    end else begin
        output_l1_223_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln163_1_fu_1074_p2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_223_i_we0 = 1'b1;
    end else begin
        output_l1_223_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_324_i_ce0 = 1'b1;
    end else begin
        output_l1_324_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln163_fu_1039_p2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l1_324_i_we0 = 1'b1;
    end else begin
        output_l1_324_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_blk_n = param_empty_n;
    end else begin
        param_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_out_blk_n = param_out_full_n;
    end else begin
        param_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (param_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_out_write = 1'b1;
    end else begin
        param_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (param_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_read = 1'b1;
    end else begin
        param_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (param_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln185_fu_630_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln190_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln190_fu_645_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln138_1_fu_682_p2 = ($signed(32'd4294967294) + $signed(i_cast402_i_i_fu_641_p1));

assign add_ln138_2_fu_701_p2 = ($signed(32'd4294967293) + $signed(i_cast402_i_i_fu_641_p1));

assign add_ln138_fu_665_p2 = ($signed(6'd63) + $signed(empty_68_fu_656_p1));

assign add_ln163_1_fu_1050_p2 = ($signed(i_cast402_i_i_reg_1534) + $signed(32'd4294967291));

assign add_ln163_fu_1015_p2 = ($signed(32'd4294967290) + $signed(i_cast402_i_i_reg_1534));

assign add_ln185_fu_635_p2 = (indvar_flatten_reg_473 + 64'd1);

assign add_ln276_fu_526_p2 = (32'd6 + mul_ln276_fu_520_p2);

assign and_ln163_1_fu_1074_p2 = (xor_ln163_1_fu_1063_p2 & icmp_ln163_1_fu_1069_p2);

assign and_ln163_2_fu_1104_p2 = (xor_ln163_2_fu_1093_p2 & icmp_ln163_2_fu_1099_p2);

assign and_ln163_3_fu_839_p2 = (xor_ln138_fu_715_p2 & icmp_ln163_3_fu_834_p2);

assign and_ln163_fu_1039_p2 = (xor_ln163_fu_1028_p2 & icmp_ln163_fu_1034_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (param_out_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_624_p0 = bound_fu_624_p00;

assign bound_fu_624_p00 = param_TILESIZE_S_i_i_fu_542_p4;

assign bound_fu_624_p1 = bound_fu_624_p10;

assign bound_fu_624_p10 = param_TILESIZE_R_i_i_fu_532_p4;

assign data_l1_017_i_address0 = zext_ln140_fu_660_p1;

assign data_l1_118_i_address0 = zext_ln140_1_fu_677_p1;

assign data_l1_219_i_address0 = zext_ln140_2_fu_696_p1;

assign data_l1_320_i_address0 = zext_ln140_3_fu_721_p1;

assign data_reg_0_1_1_fu_881_p3 = ((icmp_ln138_reg_1555[0:0] === 1'b1) ? 8'd0 : data_l1_118_i_q0);

assign data_reg_0_2_1_fu_888_p3 = ((tmp_reg_1565[0:0] === 1'b1) ? 8'd0 : data_l1_219_i_q0);

assign data_reg_0_3_1_fu_895_p3 = ((tmp_1_reg_1575[0:0] === 1'b1) ? 8'd0 : data_l1_320_i_q0);

assign empty_68_fu_656_p1 = i_reg_484[5:0];

assign grp_fu_1167_p1 = sext_ln156_reg_1440;

assign grp_fu_1175_p1 = sext_ln156_1_reg_1445;

assign grp_fu_1183_p1 = sext_ln156_2_reg_1450;

assign grp_fu_1191_p1 = sext_ln156_4_reg_1460;

assign grp_fu_1199_p1 = sext_ln156_5_reg_1465;

assign grp_fu_1207_p1 = sext_ln156_6_reg_1470;

assign grp_fu_1215_p1 = sext_ln156_8_reg_1480;

assign grp_fu_1223_p1 = sext_ln156_9_reg_1485;

assign grp_fu_1231_p1 = sext_ln156_10_reg_1490;

assign grp_fu_1239_p1 = sext_ln156_12_reg_1500;

assign grp_fu_1247_p1 = sext_ln156_13_reg_1505;

assign grp_fu_1255_p1 = sext_ln156_14_reg_1510;

assign i_1_fu_650_p2 = (i_reg_484 + 31'd1);

assign i_cast402_i_i_fu_641_p1 = i_reg_484;

assign icmp_ln138_fu_671_p2 = ((i_reg_484 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln163_1_fu_1069_p2 = ((add_ln163_1_fu_1050_p2 < mul_ln276_reg_1427) ? 1'b1 : 1'b0);

assign icmp_ln163_2_fu_1099_p2 = ((sub49_i_i_i_fu_1010_p2 < mul_ln276_reg_1427) ? 1'b1 : 1'b0);

assign icmp_ln163_3_fu_834_p2 = ((add_ln138_2_fu_701_p2 < mul_ln276_reg_1427) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_1034_p2 = ((add_ln163_fu_1015_p2 < mul_ln276_reg_1427) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_630_p2 = ((indvar_flatten_reg_473 == bound_reg_1520) ? 1'b1 : 1'b0);

assign icmp_ln190_fu_645_p2 = (($signed(i_cast402_i_i_fu_641_p1) < $signed(add_ln276_reg_1435)) ? 1'b1 : 1'b0);

assign mul_ln276_fu_520_p0 = {{param_dout[1119:1088]}};

assign mul_ln276_fu_520_p1 = {{param_dout[1087:1056]}};

assign output_l1_021_i_address0 = zext_ln140_3_reg_1580;

assign output_l1_021_i_d0 = grp_fu_1239_p3;

assign output_l1_122_i_address0 = zext_ln168_2_fu_1110_p1;

assign output_l1_122_i_d0 = grp_fu_1215_p3;

assign output_l1_223_i_address0 = zext_ln168_1_fu_1080_p1;

assign output_l1_223_i_d0 = grp_fu_1191_p3;

assign output_l1_324_i_address0 = zext_ln168_fu_1045_p1;

assign output_l1_324_i_d0 = grp_fu_1167_p3;

assign output_reg_0_0_fu_1001_p1 = sext_ln185_reg_1515;

assign output_reg_1_0_fu_956_p1 = sext_ln156_11_reg_1495;

assign output_reg_2_0_fu_935_p1 = sext_ln156_7_reg_1475;

assign output_reg_3_0_fu_914_p1 = sext_ln156_3_reg_1455;

assign param_TILESIZE_R_i_i_fu_532_p4 = {{param_dout[1151:1120]}};

assign param_TILESIZE_S_i_i_fu_542_p4 = {{param_dout[1183:1152]}};

assign param_out_din = param_dout[1119:0];

assign sext_ln155_1_fu_940_p1 = $signed(output_reg_2_0_fu_935_p2);

assign sext_ln155_2_fu_961_p1 = $signed(output_reg_1_0_fu_956_p2);

assign sext_ln155_3_fu_1006_p1 = $signed(output_reg_0_0_fu_1001_p2);

assign sext_ln155_fu_919_p1 = $signed(output_reg_3_0_fu_914_p2);

assign sext_ln156_10_fu_592_p1 = $signed(p_read5);

assign sext_ln156_11_fu_596_p1 = $signed(p_read4);

assign sext_ln156_12_fu_600_p1 = $signed(p_read3);

assign sext_ln156_13_fu_604_p1 = $signed(p_read2);

assign sext_ln156_14_fu_608_p1 = $signed(p_read1);

assign sext_ln156_1_fu_556_p1 = $signed(p_read14);

assign sext_ln156_2_fu_560_p1 = $signed(p_read13);

assign sext_ln156_3_fu_564_p1 = $signed(p_read12);

assign sext_ln156_4_fu_568_p1 = $signed(p_read11);

assign sext_ln156_5_fu_572_p1 = $signed(p_read10);

assign sext_ln156_6_fu_576_p1 = $signed(p_read9);

assign sext_ln156_7_fu_580_p1 = $signed(p_read8);

assign sext_ln156_8_fu_584_p1 = $signed(p_read7);

assign sext_ln156_9_fu_588_p1 = $signed(p_read6);

assign sext_ln156_fu_552_p1 = $signed(p_read15);

assign sext_ln185_fu_612_p1 = $signed(p_read);

assign sub49_i_i_i_fu_1010_p2 = ($signed(32'd4294967292) + $signed(i_cast402_i_i_reg_1534));

assign tmp_1_fu_707_p3 = add_ln138_2_fu_701_p2[32'd31];

assign tmp_2_fu_1020_p3 = add_ln163_fu_1015_p2[32'd31];

assign tmp_3_fu_1055_p3 = add_ln163_1_fu_1050_p2[32'd31];

assign tmp_4_fu_1085_p3 = sub49_i_i_i_fu_1010_p2[32'd31];

assign xor_ln138_fu_715_p2 = (tmp_1_fu_707_p3 ^ 1'd1);

assign xor_ln163_1_fu_1063_p2 = (tmp_3_fu_1055_p3 ^ 1'd1);

assign xor_ln163_2_fu_1093_p2 = (tmp_4_fu_1085_p3 ^ 1'd1);

assign xor_ln163_fu_1028_p2 = (tmp_2_fu_1020_p3 ^ 1'd1);

assign zext_ln140_1_fu_677_p1 = add_ln138_fu_665_p2;

assign zext_ln140_2_fu_696_p1 = add_ln138_1_fu_682_p2;

assign zext_ln140_3_fu_721_p1 = add_ln138_2_fu_701_p2;

assign zext_ln140_fu_660_p1 = i_reg_484;

assign zext_ln168_1_fu_1080_p1 = add_ln163_1_fu_1050_p2;

assign zext_ln168_2_fu_1110_p1 = sub49_i_i_i_fu_1010_p2;

assign zext_ln168_fu_1045_p1 = add_ln163_fu_1015_p2;

always @ (posedge ap_clk) begin
    i_cast402_i_i_reg_1534[31] <= 1'b0;
    zext_ln140_3_reg_1580[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //Conv_sysarr_runSysArr
