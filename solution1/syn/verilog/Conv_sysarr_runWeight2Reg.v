// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runWeight2Reg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        param_dout,
        param_empty_n,
        param_read,
        ko_1_dout,
        ko_1_empty_n,
        ko_1_read,
        co_dout,
        co_empty_n,
        co_read,
        ro_dout,
        ro_empty_n,
        ro_read,
        so_dout,
        so_empty_n,
        so_read,
        weight_l2_0_address0,
        weight_l2_0_ce0,
        weight_l2_0_q0,
        weight_l2_1_address0,
        weight_l2_1_ce0,
        weight_l2_1_q0,
        weight_l2_2_address0,
        weight_l2_2_ce0,
        weight_l2_2_q0,
        weight_l2_3_address0,
        weight_l2_3_ce0,
        weight_l2_3_q0,
        param_out_din,
        param_out_full_n,
        param_out_write,
        ko_1_out_din,
        ko_1_out_full_n,
        ko_1_out_write,
        co_out_din,
        co_out_full_n,
        co_out_write,
        ro_out_din,
        ro_out_full_n,
        ro_out_write,
        so_out_din,
        so_out_full_n,
        so_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1183:0] param_dout;
input   param_empty_n;
output   param_read;
input  [11:0] ko_1_dout;
input   ko_1_empty_n;
output   ko_1_read;
input  [31:0] co_dout;
input   co_empty_n;
output   co_read;
input  [31:0] ro_dout;
input   ro_empty_n;
output   ro_read;
input  [31:0] so_dout;
input   so_empty_n;
output   so_read;
output  [11:0] weight_l2_0_address0;
output   weight_l2_0_ce0;
input  [7:0] weight_l2_0_q0;
output  [11:0] weight_l2_1_address0;
output   weight_l2_1_ce0;
input  [7:0] weight_l2_1_q0;
output  [11:0] weight_l2_2_address0;
output   weight_l2_2_ce0;
input  [7:0] weight_l2_2_q0;
output  [11:0] weight_l2_3_address0;
output   weight_l2_3_ce0;
input  [7:0] weight_l2_3_q0;
output  [1183:0] param_out_din;
input   param_out_full_n;
output   param_out_write;
output  [10:0] ko_1_out_din;
input   ko_1_out_full_n;
output   ko_1_out_write;
output  [31:0] co_out_din;
input   co_out_full_n;
output   co_out_write;
output  [31:0] ro_out_din;
input   ro_out_full_n;
output   ro_out_write;
output  [31:0] so_out_din;
input   so_out_full_n;
output   so_out_write;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg param_read;
reg ko_1_read;
reg co_read;
reg ro_read;
reg so_read;
reg weight_l2_0_ce0;
reg weight_l2_1_ce0;
reg weight_l2_2_ce0;
reg weight_l2_3_ce0;
reg param_out_write;
reg ko_1_out_write;
reg co_out_write;
reg ro_out_write;
reg so_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    param_blk_n;
reg    ko_1_blk_n;
reg    co_blk_n;
reg    ro_blk_n;
reg    so_blk_n;
reg    param_out_blk_n;
reg    ko_1_out_blk_n;
reg    co_out_blk_n;
reg    ro_out_blk_n;
reg    so_out_blk_n;
reg    ap_block_state1;
wire   [11:0] empty_fu_430_p1;
reg   [11:0] empty_reg_1574;
wire   [11:0] empty_65_fu_434_p1;
reg   [11:0] empty_65_reg_1579;
reg  signed [11:0] p_cast7_reg_1589;
reg  signed [11:0] p_cast1_reg_1594;
wire   [9:0] empty_66_fu_468_p1;
reg   [9:0] empty_66_reg_1599;
wire   [11:0] mul2_i_i_i_fu_552_p3;
reg   [11:0] mul2_i_i_i_reg_1604;
wire    ap_CS_fsm_state4;
wire  signed [11:0] grp_fu_1342_p2;
reg  signed [11:0] mul4_i_i_i_reg_1609;
wire   [2:0] add_ln69_fu_565_p2;
reg   [2:0] add_ln69_reg_1617;
wire    ap_CS_fsm_state5;
wire   [1:0] empty_67_fu_571_p1;
reg   [1:0] empty_67_reg_1622;
wire   [0:0] icmp_ln69_fu_559_p2;
wire    ap_CS_fsm_state11;
reg   [7:0] weight_l2_0_load_reg_1683;
wire    ap_CS_fsm_state12;
reg   [7:0] weight_l2_1_load_reg_1688;
reg   [7:0] weight_l2_2_load_reg_1693;
reg   [7:0] weight_l2_3_load_reg_1698;
wire   [2:0] add_ln70_fu_698_p2;
wire    ap_CS_fsm_state13;
reg   [2:0] ci_reg_355;
wire   [0:0] icmp_ln70_fu_692_p2;
reg   [2:0] ki_reg_366;
wire   [63:0] idxprom_i_i_i_fu_685_p1;
reg   [7:0] weight_regfile_3_316_i_016_fu_106;
wire   [7:0] weight_regfile_3_316_i_3_fu_1198_p6;
wire   [1:0] trunc_ln74_fu_704_p1;
reg   [0:0] write_flag_0_fu_110;
wire   [0:0] write_flag_3_fu_1042_p6;
reg   [0:0] write_flag45_0_fu_114;
wire   [0:0] write_flag45_3_fu_1211_p6;
reg   [7:0] weight_regfile_3_215_i_017_fu_118;
wire   [7:0] weight_regfile_3_215_i_3_fu_1224_p6;
reg   [7:0] weight_regfile_0_01_i_018_fu_122;
wire   [7:0] weight_regfile_0_01_i_3_fu_1055_p6;
reg   [0:0] write_flag42_0_fu_126;
wire   [0:0] write_flag42_3_fu_1237_p6;
reg   [7:0] weight_regfile_3_114_i_019_fu_130;
wire   [7:0] weight_regfile_3_114_i_3_fu_1250_p6;
reg   [0:0] write_flag3_0_fu_134;
wire   [0:0] write_flag3_3_fu_1068_p6;
reg   [0:0] write_flag39_0_fu_138;
wire   [0:0] write_flag39_3_fu_1263_p6;
reg   [7:0] weight_regfile_3_013_i_020_fu_142;
wire   [7:0] weight_regfile_3_013_i_3_fu_1276_p6;
reg   [7:0] weight_regfile_0_12_i_021_fu_146;
wire   [7:0] weight_regfile_0_12_i_3_fu_1081_p6;
reg   [0:0] write_flag36_0_fu_150;
wire   [0:0] write_flag36_3_fu_1289_p6;
reg   [7:0] weight_regfile_2_312_i_022_fu_154;
wire   [7:0] weight_regfile_2_312_i_3_fu_730_p6;
reg   [0:0] write_flag6_0_fu_158;
wire   [0:0] write_flag6_3_fu_1094_p6;
reg   [0:0] write_flag33_0_fu_162;
wire   [0:0] write_flag33_3_fu_743_p6;
reg   [7:0] weight_regfile_2_211_i_023_fu_166;
wire   [7:0] weight_regfile_2_211_i_3_fu_756_p6;
reg   [7:0] weight_regfile_0_23_i_024_fu_170;
wire   [7:0] weight_regfile_0_23_i_3_fu_1107_p6;
reg   [0:0] write_flag30_0_fu_174;
wire   [0:0] write_flag30_3_fu_769_p6;
reg   [7:0] weight_regfile_2_110_i_025_fu_178;
wire   [7:0] weight_regfile_2_110_i_3_fu_782_p6;
reg   [0:0] write_flag9_0_fu_182;
wire   [0:0] write_flag9_3_fu_1120_p6;
reg   [0:0] write_flag27_0_fu_186;
wire   [0:0] write_flag27_3_fu_795_p6;
reg   [7:0] weight_regfile_2_09_i_026_fu_190;
wire   [7:0] weight_regfile_2_09_i_3_fu_808_p6;
reg   [7:0] weight_regfile_0_34_i_027_fu_194;
wire   [7:0] weight_regfile_0_34_i_3_fu_1133_p6;
reg   [0:0] write_flag24_0_fu_198;
wire   [0:0] write_flag24_3_fu_821_p6;
reg   [7:0] weight_regfile_1_38_i_028_fu_202;
wire   [7:0] weight_regfile_1_38_i_3_fu_886_p6;
reg   [0:0] write_flag12_0_fu_206;
wire   [0:0] write_flag12_3_fu_899_p6;
reg   [0:0] write_flag21_0_fu_210;
wire   [0:0] write_flag21_3_fu_912_p6;
reg   [7:0] weight_regfile_1_27_i_029_fu_214;
wire   [7:0] weight_regfile_1_27_i_3_fu_925_p6;
reg   [7:0] weight_regfile_1_05_i_030_fu_218;
wire   [7:0] weight_regfile_1_05_i_3_fu_938_p6;
reg   [0:0] write_flag18_0_fu_222;
wire   [0:0] write_flag18_3_fu_951_p6;
reg   [7:0] weight_regfile_1_16_i_031_fu_226;
wire   [7:0] weight_regfile_1_16_i_3_fu_964_p6;
reg   [0:0] write_flag15_0_fu_230;
wire   [0:0] write_flag15_3_fu_977_p6;
wire  signed [11:0] trunc_ln357_fu_425_p0;
wire   [11:0] ci_cast_i_i_i_cast_fu_575_p1;
(* use_dsp48 = "no" *) wire   [11:0] tmp_fu_579_p2;
wire  signed [11:0] grp_fu_1353_p4;
wire   [1:0] weight_regfile_1_16_i_fu_708_p5;
wire   [7:0] weight_regfile_1_16_i_fu_708_p6;
wire  signed [11:0] grp_fu_1342_p1;
wire  signed [11:0] grp_fu_1348_p1;
wire  signed [11:0] grp_fu_1348_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
reg    grp_fu_1342_ce;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
end

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U109(
    .din0(weight_l2_0_load_reg_1683),
    .din1(weight_l2_1_load_reg_1688),
    .din2(weight_l2_2_load_reg_1693),
    .din3(weight_l2_3_load_reg_1698),
    .din4(weight_regfile_1_16_i_fu_708_p5),
    .dout(weight_regfile_1_16_i_fu_708_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U110(
    .din0(weight_regfile_2_312_i_022_fu_154),
    .din1(weight_regfile_2_312_i_022_fu_154),
    .din2(weight_regfile_2_312_i_022_fu_154),
    .din3(weight_regfile_1_16_i_fu_708_p6),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_2_312_i_3_fu_730_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U111(
    .din0(write_flag33_0_fu_162),
    .din1(write_flag33_0_fu_162),
    .din2(write_flag33_0_fu_162),
    .din3(1'd1),
    .din4(empty_67_reg_1622),
    .dout(write_flag33_3_fu_743_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U112(
    .din0(weight_regfile_2_211_i_023_fu_166),
    .din1(weight_regfile_2_211_i_023_fu_166),
    .din2(weight_regfile_1_16_i_fu_708_p6),
    .din3(weight_regfile_2_211_i_023_fu_166),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_2_211_i_3_fu_756_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U113(
    .din0(write_flag30_0_fu_174),
    .din1(write_flag30_0_fu_174),
    .din2(1'd1),
    .din3(write_flag30_0_fu_174),
    .din4(empty_67_reg_1622),
    .dout(write_flag30_3_fu_769_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U114(
    .din0(weight_regfile_2_110_i_025_fu_178),
    .din1(weight_regfile_1_16_i_fu_708_p6),
    .din2(weight_regfile_2_110_i_025_fu_178),
    .din3(weight_regfile_2_110_i_025_fu_178),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_2_110_i_3_fu_782_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U115(
    .din0(write_flag27_0_fu_186),
    .din1(1'd1),
    .din2(write_flag27_0_fu_186),
    .din3(write_flag27_0_fu_186),
    .din4(empty_67_reg_1622),
    .dout(write_flag27_3_fu_795_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U116(
    .din0(weight_regfile_1_16_i_fu_708_p6),
    .din1(weight_regfile_2_09_i_026_fu_190),
    .din2(weight_regfile_2_09_i_026_fu_190),
    .din3(weight_regfile_2_09_i_026_fu_190),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_2_09_i_3_fu_808_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U117(
    .din0(1'd1),
    .din1(write_flag24_0_fu_198),
    .din2(write_flag24_0_fu_198),
    .din3(write_flag24_0_fu_198),
    .din4(empty_67_reg_1622),
    .dout(write_flag24_3_fu_821_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U118(
    .din0(weight_regfile_1_38_i_028_fu_202),
    .din1(weight_regfile_1_38_i_028_fu_202),
    .din2(weight_regfile_1_38_i_028_fu_202),
    .din3(weight_regfile_1_16_i_fu_708_p6),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_1_38_i_3_fu_886_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U119(
    .din0(1'd1),
    .din1(write_flag12_0_fu_206),
    .din2(write_flag12_0_fu_206),
    .din3(write_flag12_0_fu_206),
    .din4(empty_67_reg_1622),
    .dout(write_flag12_3_fu_899_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U120(
    .din0(write_flag21_0_fu_210),
    .din1(write_flag21_0_fu_210),
    .din2(write_flag21_0_fu_210),
    .din3(1'd1),
    .din4(empty_67_reg_1622),
    .dout(write_flag21_3_fu_912_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U121(
    .din0(weight_regfile_1_27_i_029_fu_214),
    .din1(weight_regfile_1_27_i_029_fu_214),
    .din2(weight_regfile_1_16_i_fu_708_p6),
    .din3(weight_regfile_1_27_i_029_fu_214),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_1_27_i_3_fu_925_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U122(
    .din0(weight_regfile_1_16_i_fu_708_p6),
    .din1(weight_regfile_1_05_i_030_fu_218),
    .din2(weight_regfile_1_05_i_030_fu_218),
    .din3(weight_regfile_1_05_i_030_fu_218),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_1_05_i_3_fu_938_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U123(
    .din0(write_flag18_0_fu_222),
    .din1(write_flag18_0_fu_222),
    .din2(1'd1),
    .din3(write_flag18_0_fu_222),
    .din4(empty_67_reg_1622),
    .dout(write_flag18_3_fu_951_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U124(
    .din0(weight_regfile_1_16_i_031_fu_226),
    .din1(weight_regfile_1_16_i_fu_708_p6),
    .din2(weight_regfile_1_16_i_031_fu_226),
    .din3(weight_regfile_1_16_i_031_fu_226),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_1_16_i_3_fu_964_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U125(
    .din0(write_flag15_0_fu_230),
    .din1(1'd1),
    .din2(write_flag15_0_fu_230),
    .din3(write_flag15_0_fu_230),
    .din4(empty_67_reg_1622),
    .dout(write_flag15_3_fu_977_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U126(
    .din0(1'd1),
    .din1(write_flag_0_fu_110),
    .din2(write_flag_0_fu_110),
    .din3(write_flag_0_fu_110),
    .din4(empty_67_reg_1622),
    .dout(write_flag_3_fu_1042_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U127(
    .din0(weight_regfile_1_16_i_fu_708_p6),
    .din1(weight_regfile_0_01_i_018_fu_122),
    .din2(weight_regfile_0_01_i_018_fu_122),
    .din3(weight_regfile_0_01_i_018_fu_122),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_0_01_i_3_fu_1055_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U128(
    .din0(write_flag3_0_fu_134),
    .din1(1'd1),
    .din2(write_flag3_0_fu_134),
    .din3(write_flag3_0_fu_134),
    .din4(empty_67_reg_1622),
    .dout(write_flag3_3_fu_1068_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U129(
    .din0(weight_regfile_0_12_i_021_fu_146),
    .din1(weight_regfile_1_16_i_fu_708_p6),
    .din2(weight_regfile_0_12_i_021_fu_146),
    .din3(weight_regfile_0_12_i_021_fu_146),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_0_12_i_3_fu_1081_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U130(
    .din0(write_flag6_0_fu_158),
    .din1(write_flag6_0_fu_158),
    .din2(1'd1),
    .din3(write_flag6_0_fu_158),
    .din4(empty_67_reg_1622),
    .dout(write_flag6_3_fu_1094_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U131(
    .din0(weight_regfile_0_23_i_024_fu_170),
    .din1(weight_regfile_0_23_i_024_fu_170),
    .din2(weight_regfile_1_16_i_fu_708_p6),
    .din3(weight_regfile_0_23_i_024_fu_170),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_0_23_i_3_fu_1107_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U132(
    .din0(write_flag9_0_fu_182),
    .din1(write_flag9_0_fu_182),
    .din2(write_flag9_0_fu_182),
    .din3(1'd1),
    .din4(empty_67_reg_1622),
    .dout(write_flag9_3_fu_1120_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U133(
    .din0(weight_regfile_0_34_i_027_fu_194),
    .din1(weight_regfile_0_34_i_027_fu_194),
    .din2(weight_regfile_0_34_i_027_fu_194),
    .din3(weight_regfile_1_16_i_fu_708_p6),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_0_34_i_3_fu_1133_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U134(
    .din0(weight_regfile_3_316_i_016_fu_106),
    .din1(weight_regfile_3_316_i_016_fu_106),
    .din2(weight_regfile_3_316_i_016_fu_106),
    .din3(weight_regfile_1_16_i_fu_708_p6),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_3_316_i_3_fu_1198_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U135(
    .din0(write_flag45_0_fu_114),
    .din1(write_flag45_0_fu_114),
    .din2(write_flag45_0_fu_114),
    .din3(1'd1),
    .din4(empty_67_reg_1622),
    .dout(write_flag45_3_fu_1211_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U136(
    .din0(weight_regfile_3_215_i_017_fu_118),
    .din1(weight_regfile_3_215_i_017_fu_118),
    .din2(weight_regfile_1_16_i_fu_708_p6),
    .din3(weight_regfile_3_215_i_017_fu_118),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_3_215_i_3_fu_1224_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U137(
    .din0(write_flag42_0_fu_126),
    .din1(write_flag42_0_fu_126),
    .din2(1'd1),
    .din3(write_flag42_0_fu_126),
    .din4(empty_67_reg_1622),
    .dout(write_flag42_3_fu_1237_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U138(
    .din0(weight_regfile_3_114_i_019_fu_130),
    .din1(weight_regfile_1_16_i_fu_708_p6),
    .din2(weight_regfile_3_114_i_019_fu_130),
    .din3(weight_regfile_3_114_i_019_fu_130),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_3_114_i_3_fu_1250_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U139(
    .din0(write_flag39_0_fu_138),
    .din1(1'd1),
    .din2(write_flag39_0_fu_138),
    .din3(write_flag39_0_fu_138),
    .din4(empty_67_reg_1622),
    .dout(write_flag39_3_fu_1263_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U140(
    .din0(weight_regfile_1_16_i_fu_708_p6),
    .din1(weight_regfile_3_013_i_020_fu_142),
    .din2(weight_regfile_3_013_i_020_fu_142),
    .din3(weight_regfile_3_013_i_020_fu_142),
    .din4(empty_67_reg_1622),
    .dout(weight_regfile_3_013_i_3_fu_1276_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U141(
    .din0(1'd1),
    .din1(write_flag36_0_fu_150),
    .din2(write_flag36_0_fu_150),
    .din3(write_flag36_0_fu_150),
    .din4(empty_67_reg_1622),
    .dout(write_flag36_3_fu_1289_p6)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ko_1_dout),
    .din1(grp_fu_1342_p1),
    .ce(grp_fu_1342_ce),
    .dout(grp_fu_1342_p2)
);

Conv_sysarr_mul_mul_12s_12s_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_mul_12s_12s_12_4_1_U143(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_cast7_reg_1589),
    .din1(grp_fu_1348_p1),
    .ce(1'b1),
    .dout(grp_fu_1348_p2)
);

Conv_sysarr_ama_addmuladd_12ns_12s_12s_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ama_addmuladd_12ns_12s_12s_12ns_12_4_1_U144(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_reg_1574),
    .din1(grp_fu_1348_p2),
    .din2(p_cast1_reg_1594),
    .din3(empty_65_reg_1579),
    .ce(1'b1),
    .dout(grp_fu_1353_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_559_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ci_reg_355 <= add_ln69_reg_1617;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ci_reg_355 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        ki_reg_366 <= add_ln70_fu_698_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ki_reg_366 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd1) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag12_0_fu_206 <= write_flag12_3_fu_899_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag12_0_fu_206 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd1) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag15_0_fu_230 <= write_flag15_3_fu_977_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag15_0_fu_230 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd1) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag18_0_fu_222 <= write_flag18_3_fu_951_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag18_0_fu_222 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd1) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag21_0_fu_210 <= write_flag21_3_fu_912_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag21_0_fu_210 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd2) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag24_0_fu_198 <= write_flag24_3_fu_821_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag24_0_fu_198 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd2) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag27_0_fu_186 <= write_flag27_3_fu_795_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag27_0_fu_186 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd2) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag30_0_fu_174 <= write_flag30_3_fu_769_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag30_0_fu_174 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd2) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag33_0_fu_162 <= write_flag33_3_fu_743_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag33_0_fu_162 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd3) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag36_0_fu_150 <= write_flag36_3_fu_1289_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag36_0_fu_150 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd3) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag39_0_fu_138 <= write_flag39_3_fu_1263_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag39_0_fu_138 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd0) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag3_0_fu_134 <= write_flag3_3_fu_1068_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag3_0_fu_134 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd3) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag42_0_fu_126 <= write_flag42_3_fu_1237_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag42_0_fu_126 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd3) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag45_0_fu_114 <= write_flag45_3_fu_1211_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag45_0_fu_114 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd0) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag6_0_fu_158 <= write_flag6_3_fu_1094_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag6_0_fu_158 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd0) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag9_0_fu_182 <= write_flag9_3_fu_1120_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag9_0_fu_182 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd0) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        write_flag_0_fu_110 <= write_flag_3_fu_1042_p6;
    end else if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag_0_fu_110 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln69_reg_1617 <= add_ln69_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_65_reg_1579 <= empty_65_fu_434_p1;
        empty_66_reg_1599 <= empty_66_fu_468_p1;
        empty_reg_1574 <= empty_fu_430_p1;
        p_cast1_reg_1594 <= {{param_dout[587:576]}};
        p_cast7_reg_1589 <= {{param_dout[555:544]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_559_p2 == 1'd0))) begin
        empty_67_reg_1622 <= empty_67_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul2_i_i_i_reg_1604[11 : 2] <= mul2_i_i_i_fu_552_p3[11 : 2];
        mul4_i_i_i_reg_1609 <= grp_fu_1342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_l2_0_load_reg_1683 <= weight_l2_0_q0;
        weight_l2_1_load_reg_1688 <= weight_l2_1_q0;
        weight_l2_2_load_reg_1693 <= weight_l2_2_q0;
        weight_l2_3_load_reg_1698 <= weight_l2_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd0) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        weight_regfile_0_01_i_018_fu_122 <= weight_regfile_0_01_i_3_fu_1055_p6;
        weight_regfile_0_12_i_021_fu_146 <= weight_regfile_0_12_i_3_fu_1081_p6;
        weight_regfile_0_23_i_024_fu_170 <= weight_regfile_0_23_i_3_fu_1107_p6;
        weight_regfile_0_34_i_027_fu_194 <= weight_regfile_0_34_i_3_fu_1133_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd1) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        weight_regfile_1_05_i_030_fu_218 <= weight_regfile_1_05_i_3_fu_938_p6;
        weight_regfile_1_16_i_031_fu_226 <= weight_regfile_1_16_i_3_fu_964_p6;
        weight_regfile_1_27_i_029_fu_214 <= weight_regfile_1_27_i_3_fu_925_p6;
        weight_regfile_1_38_i_028_fu_202 <= weight_regfile_1_38_i_3_fu_886_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd2) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        weight_regfile_2_09_i_026_fu_190 <= weight_regfile_2_09_i_3_fu_808_p6;
        weight_regfile_2_110_i_025_fu_178 <= weight_regfile_2_110_i_3_fu_782_p6;
        weight_regfile_2_211_i_023_fu_166 <= weight_regfile_2_211_i_3_fu_756_p6;
        weight_regfile_2_312_i_022_fu_154 <= weight_regfile_2_312_i_3_fu_730_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln74_fu_704_p1 == 2'd3) & (icmp_ln70_fu_692_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        weight_regfile_3_013_i_020_fu_142 <= weight_regfile_3_013_i_3_fu_1276_p6;
        weight_regfile_3_114_i_019_fu_130 <= weight_regfile_3_114_i_3_fu_1250_p6;
        weight_regfile_3_215_i_017_fu_118 <= weight_regfile_3_215_i_3_fu_1224_p6;
        weight_regfile_3_316_i_016_fu_106 <= weight_regfile_3_316_i_3_fu_1198_p6;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_559_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_559_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_blk_n = co_empty_n;
    end else begin
        co_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_out_blk_n = co_out_full_n;
    end else begin
        co_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_out_write = 1'b1;
    end else begin
        co_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_read = 1'b1;
    end else begin
        co_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_1342_ce = 1'b1;
    end else begin
        grp_fu_1342_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_blk_n = ko_1_empty_n;
    end else begin
        ko_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_out_blk_n = ko_1_out_full_n;
    end else begin
        ko_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_out_write = 1'b1;
    end else begin
        ko_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_read = 1'b1;
    end else begin
        ko_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_blk_n = param_empty_n;
    end else begin
        param_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_out_blk_n = param_out_full_n;
    end else begin
        param_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_out_write = 1'b1;
    end else begin
        param_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        param_read = 1'b1;
    end else begin
        param_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_blk_n = ro_empty_n;
    end else begin
        ro_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_out_blk_n = ro_out_full_n;
    end else begin
        ro_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_out_write = 1'b1;
    end else begin
        ro_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ro_read = 1'b1;
    end else begin
        ro_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_blk_n = so_empty_n;
    end else begin
        so_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_out_blk_n = so_out_full_n;
    end else begin
        so_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_out_write = 1'b1;
    end else begin
        so_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        so_read = 1'b1;
    end else begin
        so_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_0_ce0 = 1'b1;
    end else begin
        weight_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_1_ce0 = 1'b1;
    end else begin
        weight_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_2_ce0 = 1'b1;
    end else begin
        weight_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_l2_3_ce0 = 1'b1;
    end else begin
        weight_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_559_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln70_fu_692_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln69_fu_565_p2 = (ci_reg_355 + 3'd1);

assign add_ln70_fu_698_p2 = (ki_reg_366 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((so_out_full_n == 1'b0) | (ro_out_full_n == 1'b0) | (co_out_full_n == 1'b0) | (ko_1_out_full_n == 1'b0) | (param_out_full_n == 1'b0) | (so_empty_n == 1'b0) | (ro_empty_n == 1'b0) | (co_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (param_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_return_0 = weight_regfile_0_01_i_018_fu_122;

assign ap_return_1 = weight_regfile_0_12_i_021_fu_146;

assign ap_return_10 = weight_regfile_2_211_i_023_fu_166;

assign ap_return_11 = weight_regfile_2_312_i_022_fu_154;

assign ap_return_12 = weight_regfile_3_013_i_020_fu_142;

assign ap_return_13 = weight_regfile_3_114_i_019_fu_130;

assign ap_return_14 = weight_regfile_3_215_i_017_fu_118;

assign ap_return_15 = weight_regfile_3_316_i_016_fu_106;

assign ap_return_2 = weight_regfile_0_23_i_024_fu_170;

assign ap_return_3 = weight_regfile_0_34_i_027_fu_194;

assign ap_return_4 = weight_regfile_1_05_i_030_fu_218;

assign ap_return_5 = weight_regfile_1_16_i_031_fu_226;

assign ap_return_6 = weight_regfile_1_27_i_029_fu_214;

assign ap_return_7 = weight_regfile_1_38_i_028_fu_202;

assign ap_return_8 = weight_regfile_2_09_i_026_fu_190;

assign ap_return_9 = weight_regfile_2_110_i_025_fu_178;

assign ci_cast_i_i_i_cast_fu_575_p1 = empty_67_fu_571_p1;

assign co_out_din = co_dout;

assign empty_65_fu_434_p1 = so_dout[11:0];

assign empty_66_fu_468_p1 = co_dout[9:0];

assign empty_67_fu_571_p1 = ci_reg_355[1:0];

assign empty_fu_430_p1 = ro_dout[11:0];

assign grp_fu_1342_p1 = {{param_dout[395:384]}};

assign grp_fu_1348_p1 = (tmp_fu_579_p2 + mul2_i_i_i_reg_1604);

assign icmp_ln69_fu_559_p2 = ((ci_reg_355 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_692_p2 = ((ki_reg_366 == 3'd4) ? 1'b1 : 1'b0);

assign idxprom_i_i_i_fu_685_p1 = $unsigned(grp_fu_1353_p4);

assign ko_1_out_din = trunc_ln357_fu_425_p0[10:0];

assign mul2_i_i_i_fu_552_p3 = {{empty_66_reg_1599}, {2'd0}};

assign param_out_din = param_dout;

assign ro_out_din = ro_dout;

assign so_out_din = so_dout;

assign tmp_fu_579_p2 = ($signed(mul4_i_i_i_reg_1609) + $signed(ci_cast_i_i_i_cast_fu_575_p1));

assign trunc_ln357_fu_425_p0 = ko_1_dout;

assign trunc_ln74_fu_704_p1 = ki_reg_366[1:0];

assign weight_l2_0_address0 = idxprom_i_i_i_fu_685_p1;

assign weight_l2_1_address0 = idxprom_i_i_i_fu_685_p1;

assign weight_l2_2_address0 = idxprom_i_i_i_fu_685_p1;

assign weight_l2_3_address0 = idxprom_i_i_i_fu_685_p1;

assign weight_regfile_1_16_i_fu_708_p5 = ki_reg_366[1:0];

always @ (posedge ap_clk) begin
    mul2_i_i_i_reg_1604[1:0] <= 2'b00;
end

endmodule //Conv_sysarr_runWeight2Reg
