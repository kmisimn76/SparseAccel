// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_dbbuf_dataflow_in_loop_LOOP_S_entry17 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        ko_1,
        co_2,
        r,
        s,
        p_read2,
        p_read3,
        p_c_din,
        p_c_full_n,
        p_c_write,
        p_c1_din,
        p_c1_full_n,
        p_c1_write,
        ko_1_c_din,
        ko_1_c_full_n,
        ko_1_c_write,
        co_2_c_din,
        co_2_c_full_n,
        co_2_c_write,
        co_2_c2_din,
        co_2_c2_full_n,
        co_2_c2_write,
        r_c_din,
        r_c_full_n,
        r_c_write,
        r_c3_din,
        r_c3_full_n,
        r_c3_write,
        s_c_din,
        s_c_full_n,
        s_c_write,
        s_c4_din,
        s_c4_full_n,
        s_c4_write,
        p_c5_din,
        p_c5_full_n,
        p_c5_write,
        p_c6_din,
        p_c6_full_n,
        p_c6_write,
        p_c7_din,
        p_c7_full_n,
        p_c7_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [10:0] p_read;
input  [10:0] p_read1;
input  [8:0] ko_1;
input  [9:0] co_2;
input  [10:0] r;
input  [31:0] s;
input  [31:0] p_read2;
input  [9:0] p_read3;
output  [10:0] p_c_din;
input   p_c_full_n;
output   p_c_write;
output  [10:0] p_c1_din;
input   p_c1_full_n;
output   p_c1_write;
output  [8:0] ko_1_c_din;
input   ko_1_c_full_n;
output   ko_1_c_write;
output  [8:0] co_2_c_din;
input   co_2_c_full_n;
output   co_2_c_write;
output  [9:0] co_2_c2_din;
input   co_2_c2_full_n;
output   co_2_c2_write;
output  [10:0] r_c_din;
input   r_c_full_n;
output   r_c_write;
output  [9:0] r_c3_din;
input   r_c3_full_n;
output   r_c3_write;
output  [10:0] s_c_din;
input   s_c_full_n;
output   s_c_write;
output  [9:0] s_c4_din;
input   s_c4_full_n;
output   s_c4_write;
output  [31:0] p_c5_din;
input   p_c5_full_n;
output   p_c5_write;
output  [31:0] p_c6_din;
input   p_c6_full_n;
output   p_c6_write;
output  [9:0] p_c7_din;
input   p_c7_full_n;
output   p_c7_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_c_write;
reg p_c1_write;
reg ko_1_c_write;
reg co_2_c_write;
reg co_2_c2_write;
reg r_c_write;
reg r_c3_write;
reg s_c_write;
reg s_c4_write;
reg p_c5_write;
reg p_c6_write;
reg p_c7_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_c_blk_n;
reg    p_c1_blk_n;
reg    ko_1_c_blk_n;
reg    co_2_c_blk_n;
reg    co_2_c2_blk_n;
reg    r_c_blk_n;
reg    r_c3_blk_n;
reg    s_c_blk_n;
reg    s_c4_blk_n;
reg    p_c5_blk_n;
reg    p_c6_blk_n;
reg    p_c7_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_2_c2_blk_n = co_2_c2_full_n;
    end else begin
        co_2_c2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_2_c2_write = 1'b1;
    end else begin
        co_2_c2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_2_c_blk_n = co_2_c_full_n;
    end else begin
        co_2_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_2_c_write = 1'b1;
    end else begin
        co_2_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_c_blk_n = ko_1_c_full_n;
    end else begin
        ko_1_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_c_write = 1'b1;
    end else begin
        ko_1_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c1_blk_n = p_c1_full_n;
    end else begin
        p_c1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c1_write = 1'b1;
    end else begin
        p_c1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c5_blk_n = p_c5_full_n;
    end else begin
        p_c5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c5_write = 1'b1;
    end else begin
        p_c5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c6_blk_n = p_c6_full_n;
    end else begin
        p_c6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c6_write = 1'b1;
    end else begin
        p_c6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c7_blk_n = p_c7_full_n;
    end else begin
        p_c7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c7_write = 1'b1;
    end else begin
        p_c7_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_blk_n = p_c_full_n;
    end else begin
        p_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_write = 1'b1;
    end else begin
        p_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_c3_blk_n = r_c3_full_n;
    end else begin
        r_c3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_c3_write = 1'b1;
    end else begin
        r_c3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_c_blk_n = r_c_full_n;
    end else begin
        r_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_c_write = 1'b1;
    end else begin
        r_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_c4_blk_n = s_c4_full_n;
    end else begin
        s_c4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_c4_write = 1'b1;
    end else begin
        s_c4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_c_blk_n = s_c_full_n;
    end else begin
        s_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_c_write = 1'b1;
    end else begin
        s_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((p_c7_full_n == 1'b0) | (p_c6_full_n == 1'b0) | (ap_start == 1'b0) | (p_c5_full_n == 1'b0) | (s_c4_full_n == 1'b0) | (s_c_full_n == 1'b0) | (r_c3_full_n == 1'b0) | (r_c_full_n == 1'b0) | (co_2_c2_full_n == 1'b0) | (co_2_c_full_n == 1'b0) | (ko_1_c_full_n == 1'b0) | (p_c1_full_n == 1'b0) | (p_c_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign co_2_c2_din = co_2;

assign co_2_c_din = co_2[8:0];

assign ko_1_c_din = ko_1;

assign p_c1_din = p_read1;

assign p_c5_din = p_read2;

assign p_c6_din = p_read2;

assign p_c7_din = p_read3;

assign p_c_din = p_read;

assign r_c3_din = r[9:0];

assign r_c_din = r;

assign s_c4_din = s[9:0];

assign s_c_din = s[10:0];

endmodule //Conv_sysarr_dbbuf_dataflow_in_loop_LOOP_S_entry17
