// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_dbbuf_runWeight2Reg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        empty_13_dout,
        empty_13_empty_n,
        empty_13_read,
        empty_dout,
        empty_empty_n,
        empty_read,
        ko_1_dout,
        ko_1_empty_n,
        ko_1_read,
        co_2_dout,
        co_2_empty_n,
        co_2_read,
        r_dout,
        r_empty_n,
        r_read,
        s_dout,
        s_empty_n,
        s_read,
        ko_1_out_din,
        ko_1_out_full_n,
        ko_1_out_write,
        weight_l2_0_address0,
        weight_l2_0_ce0,
        weight_l2_0_q0,
        weight_l2_1_address0,
        weight_l2_1_ce0,
        weight_l2_1_q0,
        weight_l2_2_address0,
        weight_l2_2_ce0,
        weight_l2_2_q0,
        weight_l2_3_address0,
        weight_l2_3_ce0,
        weight_l2_3_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state13 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [10:0] empty_13_dout;
input   empty_13_empty_n;
output   empty_13_read;
input  [10:0] empty_dout;
input   empty_empty_n;
output   empty_read;
input  [8:0] ko_1_dout;
input   ko_1_empty_n;
output   ko_1_read;
input  [8:0] co_2_dout;
input   co_2_empty_n;
output   co_2_read;
input  [10:0] r_dout;
input   r_empty_n;
output   r_read;
input  [10:0] s_dout;
input   s_empty_n;
output   s_read;
output  [8:0] ko_1_out_din;
input   ko_1_out_full_n;
output   ko_1_out_write;
output  [8:0] weight_l2_0_address0;
output   weight_l2_0_ce0;
input  [7:0] weight_l2_0_q0;
output  [8:0] weight_l2_1_address0;
output   weight_l2_1_ce0;
input  [7:0] weight_l2_1_q0;
output  [8:0] weight_l2_2_address0;
output   weight_l2_2_ce0;
input  [7:0] weight_l2_2_q0;
output  [8:0] weight_l2_3_address0;
output   weight_l2_3_ce0;
input  [7:0] weight_l2_3_q0;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg empty_13_read;
reg empty_read;
reg ko_1_read;
reg co_2_read;
reg r_read;
reg s_read;
reg ko_1_out_write;
reg weight_l2_0_ce0;
reg weight_l2_1_ce0;
reg weight_l2_2_ce0;
reg weight_l2_3_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    empty_13_blk_n;
reg    empty_blk_n;
reg    ko_1_blk_n;
reg    co_2_blk_n;
reg    r_blk_n;
reg    s_blk_n;
reg    ko_1_out_blk_n;
reg   [4:0] indvar_flatten_reg_322;
reg   [2:0] ki_reg_333;
reg   [2:0] ci_reg_344;
reg   [8:0] ko_1_read_reg_1563;
reg    ap_block_state1;
reg   [8:0] co_2_read_reg_1569;
reg   [10:0] r_read_reg_1574;
reg   [10:0] s_read_reg_1579;
reg  signed [10:0] C_assign_reg_1584;
reg  signed [10:0] RS_assign_reg_1589;
wire   [0:0] icmp_ln40_fu_494_p2;
reg   [0:0] icmp_ln40_reg_1595;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter1_reg;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter2_reg;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter3_reg;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter4_reg;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter5_reg;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter6_reg;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter7_reg;
reg   [0:0] icmp_ln40_reg_1595_pp0_iter8_reg;
wire   [4:0] add_ln40_fu_500_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln40_1_fu_530_p3;
reg   [1:0] select_ln40_1_reg_1604;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter1_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter2_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter3_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter4_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter5_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter6_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter7_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter8_reg;
reg   [1:0] select_ln40_1_reg_1604_pp0_iter9_reg;
wire   [2:0] select_ln40_3_fu_553_p3;
wire   [1:0] trunc_ln46_fu_561_p1;
reg   [1:0] trunc_ln46_reg_1618;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter1_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter2_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter3_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter4_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter5_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter6_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter7_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter8_reg;
reg   [1:0] trunc_ln46_reg_1618_pp0_iter9_reg;
wire   [2:0] add_ln42_fu_565_p2;
wire  signed [10:0] grp_fu_1334_p3;
reg    ap_enable_reg_pp0_iter3;
wire   [1:0] trunc_ln47_fu_577_p1;
reg   [1:0] trunc_ln47_reg_1670;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
wire   [63:0] zext_ln47_1_fu_589_p1;
wire    ap_block_pp0_stage0;
reg   [7:0] weight_regfile_3_3_1_fu_98;
wire   [7:0] weight_regfile_3_3_3_fu_1094_p6;
wire    ap_CS_fsm_state13;
reg   [0:0] write_flag_1_fu_102;
wire   [0:0] write_flag_3_fu_938_p6;
reg   [0:0] write_flag45_1_fu_106;
wire   [0:0] write_flag45_3_fu_1107_p6;
reg   [7:0] weight_regfile_3_2_1_fu_110;
wire   [7:0] weight_regfile_3_2_3_fu_1120_p6;
reg   [7:0] weight_regfile_0_0_1_fu_114;
wire   [7:0] weight_regfile_0_0_3_fu_951_p6;
reg   [0:0] write_flag42_1_fu_118;
wire   [0:0] write_flag42_3_fu_1133_p6;
reg   [7:0] weight_regfile_3_1_1_fu_122;
wire   [7:0] weight_regfile_3_1_3_fu_1146_p6;
reg   [0:0] write_flag3_1_fu_126;
wire   [0:0] write_flag3_3_fu_964_p6;
reg   [0:0] write_flag39_1_fu_130;
wire   [0:0] write_flag39_3_fu_1159_p6;
reg   [7:0] weight_regfile_3_0_1_fu_134;
wire   [7:0] weight_regfile_3_0_3_fu_1172_p6;
reg   [7:0] weight_regfile_0_1_1_fu_138;
wire   [7:0] weight_regfile_0_1_3_fu_977_p6;
reg   [0:0] write_flag36_1_fu_142;
wire   [0:0] write_flag36_3_fu_1185_p6;
reg   [7:0] weight_regfile_2_3_1_fu_146;
wire   [7:0] weight_regfile_2_3_3_fu_626_p6;
reg   [0:0] write_flag6_1_fu_150;
wire   [0:0] write_flag6_3_fu_990_p6;
reg   [0:0] write_flag33_1_fu_154;
wire   [0:0] write_flag33_3_fu_639_p6;
reg   [7:0] weight_regfile_2_2_1_fu_158;
wire   [7:0] weight_regfile_2_2_3_fu_652_p6;
reg   [7:0] weight_regfile_0_2_1_fu_162;
wire   [7:0] weight_regfile_0_2_3_fu_1003_p6;
reg   [0:0] write_flag30_1_fu_166;
wire   [0:0] write_flag30_3_fu_665_p6;
reg   [7:0] weight_regfile_2_1_1_fu_170;
wire   [7:0] weight_regfile_2_1_3_fu_678_p6;
reg   [0:0] write_flag9_1_fu_174;
wire   [0:0] write_flag9_3_fu_1016_p6;
reg   [0:0] write_flag27_1_fu_178;
wire   [0:0] write_flag27_3_fu_691_p6;
reg   [7:0] weight_regfile_2_0_1_fu_182;
wire   [7:0] weight_regfile_2_0_3_fu_704_p6;
reg   [7:0] weight_regfile_0_3_1_fu_186;
wire   [7:0] weight_regfile_0_3_3_fu_1029_p6;
reg   [0:0] write_flag24_1_fu_190;
wire   [0:0] write_flag24_3_fu_717_p6;
reg   [7:0] weight_regfile_1_3_1_fu_194;
wire   [7:0] weight_regfile_1_3_3_fu_782_p6;
reg   [0:0] write_flag12_1_fu_198;
wire   [0:0] write_flag12_3_fu_795_p6;
reg   [0:0] write_flag21_1_fu_202;
wire   [0:0] write_flag21_3_fu_808_p6;
reg   [7:0] weight_regfile_1_2_1_fu_206;
wire   [7:0] weight_regfile_1_2_3_fu_821_p6;
reg   [7:0] weight_regfile_1_0_1_fu_210;
wire   [7:0] weight_regfile_1_0_3_fu_834_p6;
reg   [0:0] write_flag18_1_fu_214;
wire   [0:0] write_flag18_3_fu_847_p6;
reg   [7:0] weight_regfile_1_1_1_fu_218;
wire   [7:0] weight_regfile_1_1_3_fu_860_p6;
reg   [0:0] write_flag15_1_fu_222;
wire   [0:0] write_flag15_3_fu_873_p6;
wire   [1:0] empty_29_fu_483_p1;
wire   [0:0] icmp_ln42_fu_506_p2;
wire   [2:0] add_ln40_1_fu_520_p2;
wire   [1:0] empty_30_fu_526_p1;
wire   [10:0] p_cast_mid1_fu_538_p3;
wire   [10:0] p_cast_fu_487_p3;
wire   [2:0] select_ln40_fu_512_p3;
wire  signed [10:0] grp_fu_1346_p4;
wire   [8:0] lshr_ln_fu_580_p4;
wire   [31:0] weight_regfile_1_1_fu_600_p5;
wire   [7:0] weight_regfile_1_1_fu_600_p6;
wire  signed [10:0] grp_fu_1334_p0;
wire   [10:0] grp_fu_1334_p2;
wire  signed [10:0] grp_fu_1341_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

Conv_sysarr_dbbuf_mux_432_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
mux_432_8_1_1_U21(
    .din0(weight_l2_0_q0),
    .din1(weight_l2_1_q0),
    .din2(weight_l2_2_q0),
    .din3(weight_l2_3_q0),
    .din4(weight_regfile_1_1_fu_600_p5),
    .dout(weight_regfile_1_1_fu_600_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U22(
    .din0(weight_regfile_2_3_1_fu_146),
    .din1(weight_regfile_2_3_1_fu_146),
    .din2(weight_regfile_2_3_1_fu_146),
    .din3(weight_regfile_1_1_fu_600_p6),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_2_3_3_fu_626_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U23(
    .din0(write_flag33_1_fu_154),
    .din1(write_flag33_1_fu_154),
    .din2(write_flag33_1_fu_154),
    .din3(1'd1),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag33_3_fu_639_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U24(
    .din0(weight_regfile_2_2_1_fu_158),
    .din1(weight_regfile_2_2_1_fu_158),
    .din2(weight_regfile_1_1_fu_600_p6),
    .din3(weight_regfile_2_2_1_fu_158),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_2_2_3_fu_652_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U25(
    .din0(write_flag30_1_fu_166),
    .din1(write_flag30_1_fu_166),
    .din2(1'd1),
    .din3(write_flag30_1_fu_166),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag30_3_fu_665_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U26(
    .din0(weight_regfile_2_1_1_fu_170),
    .din1(weight_regfile_1_1_fu_600_p6),
    .din2(weight_regfile_2_1_1_fu_170),
    .din3(weight_regfile_2_1_1_fu_170),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_2_1_3_fu_678_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U27(
    .din0(write_flag27_1_fu_178),
    .din1(1'd1),
    .din2(write_flag27_1_fu_178),
    .din3(write_flag27_1_fu_178),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag27_3_fu_691_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U28(
    .din0(weight_regfile_1_1_fu_600_p6),
    .din1(weight_regfile_2_0_1_fu_182),
    .din2(weight_regfile_2_0_1_fu_182),
    .din3(weight_regfile_2_0_1_fu_182),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_2_0_3_fu_704_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U29(
    .din0(1'd1),
    .din1(write_flag24_1_fu_190),
    .din2(write_flag24_1_fu_190),
    .din3(write_flag24_1_fu_190),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag24_3_fu_717_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U30(
    .din0(weight_regfile_1_3_1_fu_194),
    .din1(weight_regfile_1_3_1_fu_194),
    .din2(weight_regfile_1_3_1_fu_194),
    .din3(weight_regfile_1_1_fu_600_p6),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_1_3_3_fu_782_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U31(
    .din0(1'd1),
    .din1(write_flag12_1_fu_198),
    .din2(write_flag12_1_fu_198),
    .din3(write_flag12_1_fu_198),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag12_3_fu_795_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U32(
    .din0(write_flag21_1_fu_202),
    .din1(write_flag21_1_fu_202),
    .din2(write_flag21_1_fu_202),
    .din3(1'd1),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag21_3_fu_808_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U33(
    .din0(weight_regfile_1_2_1_fu_206),
    .din1(weight_regfile_1_2_1_fu_206),
    .din2(weight_regfile_1_1_fu_600_p6),
    .din3(weight_regfile_1_2_1_fu_206),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_1_2_3_fu_821_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U34(
    .din0(weight_regfile_1_1_fu_600_p6),
    .din1(weight_regfile_1_0_1_fu_210),
    .din2(weight_regfile_1_0_1_fu_210),
    .din3(weight_regfile_1_0_1_fu_210),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_1_0_3_fu_834_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U35(
    .din0(write_flag18_1_fu_214),
    .din1(write_flag18_1_fu_214),
    .din2(1'd1),
    .din3(write_flag18_1_fu_214),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag18_3_fu_847_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U36(
    .din0(weight_regfile_1_1_1_fu_218),
    .din1(weight_regfile_1_1_fu_600_p6),
    .din2(weight_regfile_1_1_1_fu_218),
    .din3(weight_regfile_1_1_1_fu_218),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_1_1_3_fu_860_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U37(
    .din0(write_flag15_1_fu_222),
    .din1(1'd1),
    .din2(write_flag15_1_fu_222),
    .din3(write_flag15_1_fu_222),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag15_3_fu_873_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U38(
    .din0(1'd1),
    .din1(write_flag_1_fu_102),
    .din2(write_flag_1_fu_102),
    .din3(write_flag_1_fu_102),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag_3_fu_938_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U39(
    .din0(weight_regfile_1_1_fu_600_p6),
    .din1(weight_regfile_0_0_1_fu_114),
    .din2(weight_regfile_0_0_1_fu_114),
    .din3(weight_regfile_0_0_1_fu_114),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_0_0_3_fu_951_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U40(
    .din0(write_flag3_1_fu_126),
    .din1(1'd1),
    .din2(write_flag3_1_fu_126),
    .din3(write_flag3_1_fu_126),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag3_3_fu_964_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U41(
    .din0(weight_regfile_0_1_1_fu_138),
    .din1(weight_regfile_1_1_fu_600_p6),
    .din2(weight_regfile_0_1_1_fu_138),
    .din3(weight_regfile_0_1_1_fu_138),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_0_1_3_fu_977_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U42(
    .din0(write_flag6_1_fu_150),
    .din1(write_flag6_1_fu_150),
    .din2(1'd1),
    .din3(write_flag6_1_fu_150),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag6_3_fu_990_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U43(
    .din0(weight_regfile_0_2_1_fu_162),
    .din1(weight_regfile_0_2_1_fu_162),
    .din2(weight_regfile_1_1_fu_600_p6),
    .din3(weight_regfile_0_2_1_fu_162),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_0_2_3_fu_1003_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U44(
    .din0(write_flag9_1_fu_174),
    .din1(write_flag9_1_fu_174),
    .din2(write_flag9_1_fu_174),
    .din3(1'd1),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag9_3_fu_1016_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U45(
    .din0(weight_regfile_0_3_1_fu_186),
    .din1(weight_regfile_0_3_1_fu_186),
    .din2(weight_regfile_0_3_1_fu_186),
    .din3(weight_regfile_1_1_fu_600_p6),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_0_3_3_fu_1029_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U46(
    .din0(weight_regfile_3_3_1_fu_98),
    .din1(weight_regfile_3_3_1_fu_98),
    .din2(weight_regfile_3_3_1_fu_98),
    .din3(weight_regfile_1_1_fu_600_p6),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_3_3_3_fu_1094_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U47(
    .din0(write_flag45_1_fu_106),
    .din1(write_flag45_1_fu_106),
    .din2(write_flag45_1_fu_106),
    .din3(1'd1),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag45_3_fu_1107_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U48(
    .din0(weight_regfile_3_2_1_fu_110),
    .din1(weight_regfile_3_2_1_fu_110),
    .din2(weight_regfile_1_1_fu_600_p6),
    .din3(weight_regfile_3_2_1_fu_110),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_3_2_3_fu_1120_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U49(
    .din0(write_flag42_1_fu_118),
    .din1(write_flag42_1_fu_118),
    .din2(1'd1),
    .din3(write_flag42_1_fu_118),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag42_3_fu_1133_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U50(
    .din0(weight_regfile_3_1_1_fu_122),
    .din1(weight_regfile_1_1_fu_600_p6),
    .din2(weight_regfile_3_1_1_fu_122),
    .din3(weight_regfile_3_1_1_fu_122),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_3_1_3_fu_1146_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U51(
    .din0(write_flag39_1_fu_130),
    .din1(1'd1),
    .din2(write_flag39_1_fu_130),
    .din3(write_flag39_1_fu_130),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag39_3_fu_1159_p6)
);

Conv_sysarr_dbbuf_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U52(
    .din0(weight_regfile_1_1_fu_600_p6),
    .din1(weight_regfile_3_0_1_fu_134),
    .din2(weight_regfile_3_0_1_fu_134),
    .din3(weight_regfile_3_0_1_fu_134),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(weight_regfile_3_0_3_fu_1172_p6)
);

Conv_sysarr_dbbuf_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U53(
    .din0(1'd1),
    .din1(write_flag36_1_fu_142),
    .din2(write_flag36_1_fu_142),
    .din3(write_flag36_1_fu_142),
    .din4(trunc_ln46_reg_1618_pp0_iter9_reg),
    .dout(write_flag36_3_fu_1185_p6)
);

Conv_sysarr_dbbuf_mac_muladd_11s_11s_11ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
mac_muladd_11s_11s_11ns_11_4_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1334_p0),
    .din1(C_assign_reg_1584),
    .din2(grp_fu_1334_p2),
    .ce(1'b1),
    .dout(grp_fu_1334_p3)
);

Conv_sysarr_dbbuf_mul_mul_11s_11s_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
mul_mul_11s_11s_11_4_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(RS_assign_reg_1589),
    .din1(grp_fu_1334_p3),
    .ce(1'b1),
    .dout(grp_fu_1341_p2)
);

Conv_sysarr_dbbuf_ama_addmuladd_11ns_11s_11s_11ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 11 ),
    .din3_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
ama_addmuladd_11ns_11s_11s_11ns_11_4_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(r_read_reg_1574),
    .din1(grp_fu_1341_p2),
    .din2(RS_assign_reg_1589),
    .din3(s_read_reg_1579),
    .ce(1'b1),
    .dout(grp_fu_1346_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_494_p2 == 1'd0))) begin
        ci_reg_344 <= add_ln42_fu_565_p2;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ci_reg_344 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_494_p2 == 1'd0))) begin
        indvar_flatten_reg_322 <= add_ln40_fu_500_p2;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_322 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_494_p2 == 1'd0))) begin
        ki_reg_333 <= select_ln40_3_fu_553_p3;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ki_reg_333 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag12_1_fu_198 <= write_flag12_3_fu_795_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag12_1_fu_198 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag15_1_fu_222 <= write_flag15_3_fu_873_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag15_1_fu_222 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag18_1_fu_214 <= write_flag18_3_fu_847_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag18_1_fu_214 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag21_1_fu_202 <= write_flag21_3_fu_808_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag21_1_fu_202 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag24_1_fu_190 <= write_flag24_3_fu_717_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag24_1_fu_190 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag27_1_fu_178 <= write_flag27_3_fu_691_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag27_1_fu_178 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag30_1_fu_166 <= write_flag30_3_fu_665_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag30_1_fu_166 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag33_1_fu_154 <= write_flag33_3_fu_639_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag33_1_fu_154 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag36_1_fu_142 <= write_flag36_3_fu_1185_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag36_1_fu_142 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag39_1_fu_130 <= write_flag39_3_fu_1159_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag39_1_fu_130 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag3_1_fu_126 <= write_flag3_3_fu_964_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag3_1_fu_126 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag42_1_fu_118 <= write_flag42_3_fu_1133_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag42_1_fu_118 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag45_1_fu_106 <= write_flag45_3_fu_1107_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag45_1_fu_106 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag6_1_fu_150 <= write_flag6_3_fu_990_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag6_1_fu_150 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag9_1_fu_174 <= write_flag9_3_fu_1016_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag9_1_fu_174 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag_1_fu_102 <= write_flag_3_fu_938_p6;
    end else if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag_1_fu_102 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_assign_reg_1584 <= empty_13_dout;
        RS_assign_reg_1589 <= empty_dout;
        co_2_read_reg_1569 <= co_2_dout;
        ko_1_read_reg_1563 <= ko_1_dout;
        r_read_reg_1574 <= r_dout;
        s_read_reg_1579 <= s_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln40_reg_1595 <= icmp_ln40_fu_494_p2;
        icmp_ln40_reg_1595_pp0_iter1_reg <= icmp_ln40_reg_1595;
        select_ln40_1_reg_1604_pp0_iter1_reg <= select_ln40_1_reg_1604;
        trunc_ln46_reg_1618_pp0_iter1_reg <= trunc_ln46_reg_1618;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln40_reg_1595_pp0_iter2_reg <= icmp_ln40_reg_1595_pp0_iter1_reg;
        icmp_ln40_reg_1595_pp0_iter3_reg <= icmp_ln40_reg_1595_pp0_iter2_reg;
        icmp_ln40_reg_1595_pp0_iter4_reg <= icmp_ln40_reg_1595_pp0_iter3_reg;
        icmp_ln40_reg_1595_pp0_iter5_reg <= icmp_ln40_reg_1595_pp0_iter4_reg;
        icmp_ln40_reg_1595_pp0_iter6_reg <= icmp_ln40_reg_1595_pp0_iter5_reg;
        icmp_ln40_reg_1595_pp0_iter7_reg <= icmp_ln40_reg_1595_pp0_iter6_reg;
        icmp_ln40_reg_1595_pp0_iter8_reg <= icmp_ln40_reg_1595_pp0_iter7_reg;
        select_ln40_1_reg_1604_pp0_iter2_reg <= select_ln40_1_reg_1604_pp0_iter1_reg;
        select_ln40_1_reg_1604_pp0_iter3_reg <= select_ln40_1_reg_1604_pp0_iter2_reg;
        select_ln40_1_reg_1604_pp0_iter4_reg <= select_ln40_1_reg_1604_pp0_iter3_reg;
        select_ln40_1_reg_1604_pp0_iter5_reg <= select_ln40_1_reg_1604_pp0_iter4_reg;
        select_ln40_1_reg_1604_pp0_iter6_reg <= select_ln40_1_reg_1604_pp0_iter5_reg;
        select_ln40_1_reg_1604_pp0_iter7_reg <= select_ln40_1_reg_1604_pp0_iter6_reg;
        select_ln40_1_reg_1604_pp0_iter8_reg <= select_ln40_1_reg_1604_pp0_iter7_reg;
        select_ln40_1_reg_1604_pp0_iter9_reg <= select_ln40_1_reg_1604_pp0_iter8_reg;
        trunc_ln46_reg_1618_pp0_iter2_reg <= trunc_ln46_reg_1618_pp0_iter1_reg;
        trunc_ln46_reg_1618_pp0_iter3_reg <= trunc_ln46_reg_1618_pp0_iter2_reg;
        trunc_ln46_reg_1618_pp0_iter4_reg <= trunc_ln46_reg_1618_pp0_iter3_reg;
        trunc_ln46_reg_1618_pp0_iter5_reg <= trunc_ln46_reg_1618_pp0_iter4_reg;
        trunc_ln46_reg_1618_pp0_iter6_reg <= trunc_ln46_reg_1618_pp0_iter5_reg;
        trunc_ln46_reg_1618_pp0_iter7_reg <= trunc_ln46_reg_1618_pp0_iter6_reg;
        trunc_ln46_reg_1618_pp0_iter8_reg <= trunc_ln46_reg_1618_pp0_iter7_reg;
        trunc_ln46_reg_1618_pp0_iter9_reg <= trunc_ln46_reg_1618_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_fu_494_p2 == 1'd0))) begin
        select_ln40_1_reg_1604 <= select_ln40_1_fu_530_p3;
        trunc_ln46_reg_1618 <= trunc_ln46_fu_561_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1595_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln47_reg_1670 <= trunc_ln47_fu_577_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile_0_0_1_fu_114 <= weight_regfile_0_0_3_fu_951_p6;
        weight_regfile_0_1_1_fu_138 <= weight_regfile_0_1_3_fu_977_p6;
        weight_regfile_0_2_1_fu_162 <= weight_regfile_0_2_3_fu_1003_p6;
        weight_regfile_0_3_1_fu_186 <= weight_regfile_0_3_3_fu_1029_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile_1_0_1_fu_210 <= weight_regfile_1_0_3_fu_834_p6;
        weight_regfile_1_1_1_fu_218 <= weight_regfile_1_1_3_fu_860_p6;
        weight_regfile_1_2_1_fu_206 <= weight_regfile_1_2_3_fu_821_p6;
        weight_regfile_1_3_1_fu_194 <= weight_regfile_1_3_3_fu_782_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile_2_0_1_fu_182 <= weight_regfile_2_0_3_fu_704_p6;
        weight_regfile_2_1_1_fu_170 <= weight_regfile_2_1_3_fu_678_p6;
        weight_regfile_2_2_1_fu_158 <= weight_regfile_2_2_3_fu_652_p6;
        weight_regfile_2_3_1_fu_146 <= weight_regfile_2_3_3_fu_626_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (select_ln40_1_reg_1604_pp0_iter9_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile_3_0_1_fu_134 <= weight_regfile_3_0_3_fu_1172_p6;
        weight_regfile_3_1_1_fu_122 <= weight_regfile_3_1_3_fu_1146_p6;
        weight_regfile_3_2_1_fu_110 <= weight_regfile_3_2_3_fu_1120_p6;
        weight_regfile_3_3_1_fu_98 <= weight_regfile_3_3_3_fu_1094_p6;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_494_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_2_blk_n = co_2_empty_n;
    end else begin
        co_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        co_2_read = 1'b1;
    end else begin
        co_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_13_blk_n = empty_13_empty_n;
    end else begin
        empty_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_13_read = 1'b1;
    end else begin
        empty_13_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_blk_n = empty_empty_n;
    end else begin
        empty_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_read = 1'b1;
    end else begin
        empty_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_blk_n = ko_1_empty_n;
    end else begin
        ko_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_out_blk_n = ko_1_out_full_n;
    end else begin
        ko_1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_out_write = 1'b1;
    end else begin
        ko_1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ko_1_read = 1'b1;
    end else begin
        ko_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_blk_n = r_empty_n;
    end else begin
        r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_read = 1'b1;
    end else begin
        r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_l2_0_ce0 = 1'b1;
    end else begin
        weight_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_l2_1_ce0 = 1'b1;
    end else begin
        weight_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_l2_2_ce0 = 1'b1;
    end else begin
        weight_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_l2_3_ce0 = 1'b1;
    end else begin
        weight_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln40_fu_494_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter10 == 1'b1) & (ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln40_fu_494_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_520_p2 = (3'd1 + ki_reg_333);

assign add_ln40_fu_500_p2 = (5'd1 + indvar_flatten_reg_322);

assign add_ln42_fu_565_p2 = (select_ln40_fu_512_p3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ko_1_out_full_n == 1'b0) | (s_empty_n == 1'b0) | (r_empty_n == 1'b0) | (co_2_empty_n == 1'b0) | (ko_1_empty_n == 1'b0) | (empty_empty_n == 1'b0) | (empty_13_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = weight_regfile_0_0_1_fu_114;

assign ap_return_1 = weight_regfile_0_1_1_fu_138;

assign ap_return_10 = weight_regfile_2_2_1_fu_158;

assign ap_return_11 = weight_regfile_2_3_1_fu_146;

assign ap_return_12 = weight_regfile_3_0_1_fu_134;

assign ap_return_13 = weight_regfile_3_1_1_fu_122;

assign ap_return_14 = weight_regfile_3_2_1_fu_110;

assign ap_return_15 = weight_regfile_3_3_1_fu_98;

assign ap_return_2 = weight_regfile_0_2_1_fu_162;

assign ap_return_3 = weight_regfile_0_3_1_fu_186;

assign ap_return_4 = weight_regfile_1_0_1_fu_210;

assign ap_return_5 = weight_regfile_1_1_1_fu_218;

assign ap_return_6 = weight_regfile_1_2_1_fu_206;

assign ap_return_7 = weight_regfile_1_3_1_fu_194;

assign ap_return_8 = weight_regfile_2_0_1_fu_182;

assign ap_return_9 = weight_regfile_2_1_1_fu_170;

assign empty_29_fu_483_p1 = ki_reg_333[1:0];

assign empty_30_fu_526_p1 = add_ln40_1_fu_520_p2[1:0];

assign grp_fu_1334_p0 = ((icmp_ln42_fu_506_p2[0:0] === 1'b1) ? p_cast_mid1_fu_538_p3 : p_cast_fu_487_p3);

assign grp_fu_1334_p2 = {{co_2_read_reg_1569}, {trunc_ln46_reg_1618_pp0_iter1_reg}};

assign icmp_ln40_fu_494_p2 = ((indvar_flatten_reg_322 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_506_p2 = ((ci_reg_344 == 3'd4) ? 1'b1 : 1'b0);

assign ko_1_out_din = ko_1_dout;

assign lshr_ln_fu_580_p4 = {{grp_fu_1346_p4[10:2]}};

assign p_cast_fu_487_p3 = {{ko_1_read_reg_1563}, {empty_29_fu_483_p1}};

assign p_cast_mid1_fu_538_p3 = {{ko_1_read_reg_1563}, {empty_30_fu_526_p1}};

assign select_ln40_1_fu_530_p3 = ((icmp_ln42_fu_506_p2[0:0] === 1'b1) ? empty_30_fu_526_p1 : empty_29_fu_483_p1);

assign select_ln40_3_fu_553_p3 = ((icmp_ln42_fu_506_p2[0:0] === 1'b1) ? add_ln40_1_fu_520_p2 : ki_reg_333);

assign select_ln40_fu_512_p3 = ((icmp_ln42_fu_506_p2[0:0] === 1'b1) ? 3'd0 : ci_reg_344);

assign trunc_ln46_fu_561_p1 = select_ln40_fu_512_p3[1:0];

assign trunc_ln47_fu_577_p1 = grp_fu_1346_p4[1:0];

assign weight_l2_0_address0 = zext_ln47_1_fu_589_p1;

assign weight_l2_1_address0 = zext_ln47_1_fu_589_p1;

assign weight_l2_2_address0 = zext_ln47_1_fu_589_p1;

assign weight_l2_3_address0 = zext_ln47_1_fu_589_p1;

assign weight_regfile_1_1_fu_600_p5 = trunc_ln47_reg_1670;

assign zext_ln47_1_fu_589_p1 = lshr_ln_fu_580_p4;

endmodule //Conv_sysarr_dbbuf_runWeight2Reg
