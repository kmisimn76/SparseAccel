// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adder_tree_large_adder_tree_large,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.670000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=133,HLS_SYN_LUT=387,HLS_VERSION=2020_1}" *)

module adder_tree_large (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [6:0] a_address1;
output   a_ce1;
input  [31:0] a_q1;
output  [6:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [6:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] a_address0;
reg a_ce0;
reg[6:0] a_address1;
reg a_ce1;
reg[6:0] b_address0;
reg b_ce0;
reg[6:0] b_address1;
reg b_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln18_fu_216_p2;
reg   [31:0] add_ln18_reg_282;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_210_p2;
reg   [31:0] add_ln18_1_reg_307;
wire   [31:0] grp_fu_198_p2;
reg   [31:0] c_4_reg_312;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_204_p2;
reg   [31:0] c_5_reg_317;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln18_3_fu_226_p2;
wire   [31:0] add_ln18_5_fu_230_p2;
wire   [31:0] add_ln18_2_fu_222_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

adder_tree_large_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(b_q1),
    .din1(a_q1),
    .dout(grp_fu_198_p2)
);

adder_tree_large_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(b_q0),
    .din1(a_q0),
    .dout(grp_fu_204_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln18_1_reg_307 <= grp_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_282 <= add_ln18_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_4_reg_312 <= grp_fu_198_p2;
        c_5_reg_317 <= grp_fu_204_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address0 = 64'd1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address1 = 64'd0;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address0 = 64'd1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        b_address1 = 64'd0;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_2_fu_222_p2 = (add_ln18_1_reg_307 + add_ln18_reg_282);

assign add_ln18_3_fu_226_p2 = (c_4_reg_312 + c_5_reg_317);

assign add_ln18_5_fu_230_p2 = (grp_fu_210_p2 + add_ln18_3_fu_226_p2);

assign add_ln18_fu_216_p2 = (grp_fu_204_p2 + grp_fu_198_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = (add_ln18_5_fu_230_p2 + add_ln18_2_fu_222_p2);

assign grp_fu_210_p2 = (grp_fu_198_p2 + grp_fu_204_p2);

endmodule //adder_tree_large
