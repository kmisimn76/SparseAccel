-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adder_tree_large is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_2_ce0 : OUT STD_LOGIC;
    a_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_3_ce0 : OUT STD_LOGIC;
    a_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_4_ce0 : OUT STD_LOGIC;
    a_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_5_ce0 : OUT STD_LOGIC;
    a_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_6_ce0 : OUT STD_LOGIC;
    a_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_7_ce0 : OUT STD_LOGIC;
    a_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_3_ce0 : OUT STD_LOGIC;
    b_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_4_ce0 : OUT STD_LOGIC;
    b_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_5_ce0 : OUT STD_LOGIC;
    b_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_6_ce0 : OUT STD_LOGIC;
    b_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_7_ce0 : OUT STD_LOGIC;
    b_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_0_ce0 : OUT STD_LOGIC;
    c_0_we0 : OUT STD_LOGIC;
    c_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_1_ce0 : OUT STD_LOGIC;
    c_1_we0 : OUT STD_LOGIC;
    c_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_1_ce1 : OUT STD_LOGIC;
    c_1_we1 : OUT STD_LOGIC;
    c_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_2_ce0 : OUT STD_LOGIC;
    c_2_we0 : OUT STD_LOGIC;
    c_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_2_ce1 : OUT STD_LOGIC;
    c_2_we1 : OUT STD_LOGIC;
    c_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_3_ce0 : OUT STD_LOGIC;
    c_3_we0 : OUT STD_LOGIC;
    c_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_3_ce1 : OUT STD_LOGIC;
    c_3_we1 : OUT STD_LOGIC;
    c_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_4_ce0 : OUT STD_LOGIC;
    c_4_we0 : OUT STD_LOGIC;
    c_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_4_ce1 : OUT STD_LOGIC;
    c_4_we1 : OUT STD_LOGIC;
    c_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_5_ce0 : OUT STD_LOGIC;
    c_5_we0 : OUT STD_LOGIC;
    c_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_5_ce1 : OUT STD_LOGIC;
    c_5_we1 : OUT STD_LOGIC;
    c_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_6_ce0 : OUT STD_LOGIC;
    c_6_we0 : OUT STD_LOGIC;
    c_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_6_ce1 : OUT STD_LOGIC;
    c_6_we1 : OUT STD_LOGIC;
    c_6_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_7_ce0 : OUT STD_LOGIC;
    c_7_we0 : OUT STD_LOGIC;
    c_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_7_ce1 : OUT STD_LOGIC;
    c_7_we1 : OUT STD_LOGIC;
    c_7_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of adder_tree_large is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "adder_tree_large_adder_tree_large,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.828000,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=129,HLS_SYN_LUT=593,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal it_reg_329 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_read_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln15_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln15_fu_349_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln15_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln15_1_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_1_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_2_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_3_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_1_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_4_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_5_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_6_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln22_7_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_4_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_3_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_5_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_2_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component adder_tree_large_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adder_tree_large_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        n : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component adder_tree_large_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        n => n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_32s_32s_32_1_1_U1 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_0_q0,
        din1 => a_0_q0,
        dout => mul_ln22_fu_375_p2);

    mul_32s_32s_32_1_1_U2 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_1_q0,
        din1 => a_1_q0,
        dout => mul_ln22_1_fu_381_p2);

    mul_32s_32s_32_1_1_U3 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_2_q0,
        din1 => a_2_q0,
        dout => mul_ln22_2_fu_387_p2);

    mul_32s_32s_32_1_1_U4 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_3_q0,
        din1 => a_3_q0,
        dout => mul_ln22_3_fu_393_p2);

    mul_32s_32s_32_1_1_U5 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_4_q0,
        din1 => a_4_q0,
        dout => mul_ln22_4_fu_399_p2);

    mul_32s_32s_32_1_1_U6 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_5_q0,
        din1 => a_5_q0,
        dout => mul_ln22_5_fu_405_p2);

    mul_32s_32s_32_1_1_U7 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_6_q0,
        din1 => a_6_q0,
        dout => mul_ln22_6_fu_411_p2);

    mul_32s_32s_32_1_1_U8 : component adder_tree_large_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => b_7_q0,
        din1 => a_7_q0,
        dout => mul_ln22_7_fu_417_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    it_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                it_reg_329 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                it_reg_329 <= add_ln15_fu_349_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln15_reg_471 <= icmp_ln15_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                n_read_reg_466 <= n;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln15_reg_480(6 downto 0) <= zext_ln15_fu_355_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln15_reg_480(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln15_fu_344_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln15_fu_344_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln15_fu_344_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_0_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_0_ce0 <= ap_const_logic_1;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_1_ce0 <= ap_const_logic_1;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_2_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_2_ce0 <= ap_const_logic_1;
        else 
            a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_3_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_3_ce0 <= ap_const_logic_1;
        else 
            a_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_4_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_4_ce0 <= ap_const_logic_1;
        else 
            a_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_5_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_5_ce0 <= ap_const_logic_1;
        else 
            a_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_6_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_6_ce0 <= ap_const_logic_1;
        else 
            a_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_7_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    a_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_7_ce0 <= ap_const_logic_1;
        else 
            a_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_fu_349_p2 <= std_logic_vector(unsigned(it_reg_329) + unsigned(ap_const_lv7_1));
    add_ln29_1_fu_429_p2 <= std_logic_vector(unsigned(mul_ln22_2_fu_387_p2) + unsigned(mul_ln22_3_fu_393_p2));
    add_ln29_2_fu_435_p2 <= std_logic_vector(unsigned(add_ln29_1_fu_429_p2) + unsigned(add_ln29_fu_423_p2));
    add_ln29_3_fu_441_p2 <= std_logic_vector(unsigned(mul_ln22_4_fu_399_p2) + unsigned(mul_ln22_5_fu_405_p2));
    add_ln29_4_fu_447_p2 <= std_logic_vector(unsigned(mul_ln22_6_fu_411_p2) + unsigned(mul_ln22_7_fu_417_p2));
    add_ln29_5_fu_453_p2 <= std_logic_vector(unsigned(add_ln29_4_fu_447_p2) + unsigned(add_ln29_3_fu_441_p2));
    add_ln29_fu_423_p2 <= std_logic_vector(unsigned(mul_ln22_1_fu_381_p2) + unsigned(mul_ln22_fu_375_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln15_fu_344_p2)
    begin
        if ((icmp_ln15_fu_344_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_2_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_3_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_3_ce0 <= ap_const_logic_1;
        else 
            b_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_4_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_4_ce0 <= ap_const_logic_1;
        else 
            b_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_5_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_5_ce0 <= ap_const_logic_1;
        else 
            b_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_6_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_6_ce0 <= ap_const_logic_1;
        else 
            b_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_7_address0 <= zext_ln15_fu_355_p1(6 - 1 downto 0);

    b_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_7_ce0 <= ap_const_logic_1;
        else 
            b_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_0_address0 <= zext_ln15_reg_480(6 - 1 downto 0);

    c_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_0_ce0 <= ap_const_logic_1;
        else 
            c_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_0_d0 <= std_logic_vector(unsigned(add_ln29_5_fu_453_p2) + unsigned(add_ln29_2_fu_435_p2));

    c_0_we0_assign_proc : process(icmp_ln15_reg_471, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln15_reg_471 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_0_we0 <= ap_const_logic_1;
        else 
            c_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_address0 <= ap_const_lv6_0;
    c_1_address1 <= ap_const_lv6_0;
    c_1_ce0 <= ap_const_logic_0;
    c_1_ce1 <= ap_const_logic_0;
    c_1_d0 <= ap_const_lv32_0;
    c_1_d1 <= ap_const_lv32_0;
    c_1_we0 <= ap_const_logic_0;
    c_1_we1 <= ap_const_logic_0;
    c_2_address0 <= ap_const_lv6_0;
    c_2_address1 <= ap_const_lv6_0;
    c_2_ce0 <= ap_const_logic_0;
    c_2_ce1 <= ap_const_logic_0;
    c_2_d0 <= ap_const_lv32_0;
    c_2_d1 <= ap_const_lv32_0;
    c_2_we0 <= ap_const_logic_0;
    c_2_we1 <= ap_const_logic_0;
    c_3_address0 <= ap_const_lv6_0;
    c_3_address1 <= ap_const_lv6_0;
    c_3_ce0 <= ap_const_logic_0;
    c_3_ce1 <= ap_const_logic_0;
    c_3_d0 <= ap_const_lv32_0;
    c_3_d1 <= ap_const_lv32_0;
    c_3_we0 <= ap_const_logic_0;
    c_3_we1 <= ap_const_logic_0;
    c_4_address0 <= ap_const_lv6_0;
    c_4_address1 <= ap_const_lv6_0;
    c_4_ce0 <= ap_const_logic_0;
    c_4_ce1 <= ap_const_logic_0;
    c_4_d0 <= ap_const_lv32_0;
    c_4_d1 <= ap_const_lv32_0;
    c_4_we0 <= ap_const_logic_0;
    c_4_we1 <= ap_const_logic_0;
    c_5_address0 <= ap_const_lv6_0;
    c_5_address1 <= ap_const_lv6_0;
    c_5_ce0 <= ap_const_logic_0;
    c_5_ce1 <= ap_const_logic_0;
    c_5_d0 <= ap_const_lv32_0;
    c_5_d1 <= ap_const_lv32_0;
    c_5_we0 <= ap_const_logic_0;
    c_5_we1 <= ap_const_logic_0;
    c_6_address0 <= ap_const_lv6_0;
    c_6_address1 <= ap_const_lv6_0;
    c_6_ce0 <= ap_const_logic_0;
    c_6_ce1 <= ap_const_logic_0;
    c_6_d0 <= ap_const_lv32_0;
    c_6_d1 <= ap_const_lv32_0;
    c_6_we0 <= ap_const_logic_0;
    c_6_we1 <= ap_const_logic_0;
    c_7_address0 <= ap_const_lv6_0;
    c_7_address1 <= ap_const_lv6_0;
    c_7_ce0 <= ap_const_logic_0;
    c_7_ce1 <= ap_const_logic_0;
    c_7_d0 <= ap_const_lv32_0;
    c_7_d1 <= ap_const_lv32_0;
    c_7_we0 <= ap_const_logic_0;
    c_7_we1 <= ap_const_logic_0;
    icmp_ln15_fu_344_p2 <= "1" when (zext_ln15_1_fu_340_p1 = n_read_reg_466) else "0";
    zext_ln15_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_reg_329),32));
    zext_ln15_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_reg_329),64));
end behav;
